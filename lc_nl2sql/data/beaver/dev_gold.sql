SELECT DISTINCT d.FCLT_BUILDING_KEY, e.BUILDING_STREET_ADDRESS, d.CITY, d.STATE, d.POSTAL_CODE FROM FCLT_BUILDING_ADDRESS AS d JOIN FCLT_ROOMS AS a ON a.FCLT_BUILDING_KEY = d.FCLT_BUILDING_KEY JOIN FCLT_ORG_DLC_KEY AS b ON a.FCLT_ORGANIZATION_KEY = b.FCLT_ORGANIZATION_KEY JOIN MASTER_DEPT_HIERARCHY AS c ON b.DLC_KEY = c.DLC_KEY JOIN BUILDINGS AS e ON e.BUILDING_KEY = d.FCLT_BUILDING_KEY WHERE c.DLC_NAME = 'History' AND d.ADDRESS_PURPOSE = 'STREET';	dw
SELECT DISTINCT a.activity_title, d.session_location, c.term_start_date, b.person_name AS Leader FROM iap_subject_detail AS a JOIN iap_subject_person AS b ON a.iap_subject_person_key = b.iap_subject_person_key JOIN academic_terms_all AS c ON c.term_code = a.term_code JOIN iap_subject_session AS d ON a.iap_subject_session_key = d.iap_subject_session_key WHERE b.person_role = 'Activity leader' ORDER BY c.term_start_date ASC;	dw
SELECT T1.instructor_name, T2.subject_title, COUNT(T3.catalog_isbn) FROM LIBRARY_COURSE_INSTRUCTOR AS T1 INNER JOIN LIBRARY_RESERVE_MATRL_DETAIL AS T4 ON T1.LIBRARY_COURSE_INSTRUCTOR_KEY = T4.LIBRARY_COURSE_INSTRUCTOR_KEY INNER JOIN LIBRARY_SUBJECT_OFFERED AS T2 ON T2.LIBRARY_SUBJECT_OFFERED_KEY = T4.LIBRARY_SUBJECT_OFFERED_KEY INNER JOIN LIBRARY_RESERVE_CATALOG AS T3 ON T3.LIBRARY_RESERVE_CATALOG_KEY = T4.LIBRARY_RESERVE_CATALOG_KEY GROUP BY T1.LIBRARY_COURSE_INSTRUCTOR_KEY, T2.LIBRARY_SUBJECT_OFFERED_KEY, T1.instructor_name, T2.subject_title;	dw
SELECT fac_rooms.Room, fac_rooms.floor, fac_building_address.BUILDING_KEY, BUILDINGS.BUILDING_STREET_ADDRESS, fac_building_address.CITY, fac_building_address.STATE, fac_building_address.POSTAL_CODE FROM (SELECT office_location FROM employee_directory WHERE full_name = 'Knapp, Lily-Mae') AS T1 INNER JOIN fac_rooms AS T2 ON T1.office_location = T2.fac_room_key INNER JOIN fac_building_address AS T3 ON T2.building_key = T3.BUILDING_KEY INNER JOIN BUILDINGS AS T4 ON T4.BUILDING_KEY = T3.BUILDING_KEY WHERE T3.ADDRESS_PURPOSE = 'STREET';	dw
SELECT DISTINCT fr.ROOM_FULL_NAME, b.BUILDING_NAME, b.BUILDING_STREET_ADDRESS, fba.CITY, fba.STATE, fba.POSTAL_CODE FROM COURSE_CATALOG_SUBJECT_OFFERED AS ccs INNER JOIN FCLT_ROOMS AS fr ON ccs.MEET_PLACE = fr.FCLT_ROOM_KEY INNER JOIN FCLT_BUILDING_ADDRESS AS fba ON fba.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY INNER JOIN FCLT_BUILDING AS fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY INNER JOIN BUILDINGS AS b ON b.BUILDING_KEY = fr.FCLT_BUILDING_KEY WHERE ccs.DEPARTMENT_NAME = 'Electrical Eng & Computer Sci' AND fba.ADDRESS_PURPOSE = 'STREET';	dw
SELECT DISTINCT s.TERM_CODE, s.subject_title, fr.room, fr.floor, b.BUILDING_KEY, b.BUILDING_STREET_ADDRESS, fba.CITY, fba.STATE, fba.POSTAL_CODE, s.form_type, s.num_enrolled_students FROM subject_offered AS s JOIN FCLT_ROOMS AS fr ON MEET_PLACE = FCLT_ROOM_KEY JOIN FCLT_BUILDING_ADDRESS AS fba ON fba.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY JOIN BUILDINGS AS b ON fr.FCLT_BUILDING_KEY = b.BUILDING_KEY WHERE s.num_enrolled_students > 300 AND fba.ADDRESS_PURPOSE = 'STREET';	dw
SELECT tso.SUBJECT_TITLE, tm.title, tm.isbn, tm.new_shelf_price, ( SELECT SUM(tm2.new_shelf_price) FROM tip_material AS tm2 INNER JOIN TIP_DETAIL AS td2 ON tm2.TIP_MATERIAL_KEY = td2.TIP_MATERIAL_KEY INNER JOIN TIP_SUBJECT_OFFERED AS tso2 ON tso2.SUBJECT_ID = td2.SUBJECT_ID WHERE tso2.SUBJECT_TITLE = tso.SUBJECT_TITLE ) AS sum_price FROM tip_material AS tm INNER JOIN TIP_DETAIL AS td ON tm.TIP_MATERIAL_KEY = td.TIP_MATERIAL_KEY INNER JOIN TIP_SUBJECT_OFFERED AS tso ON tso.SUBJECT_ID = td.SUBJECT_ID GROUP BY tso.SUBJECT_TITLE, tm.title, tm.isbn, tm.new_shelf_price ORDER BY tm.new_shelf_price ASC;	dw
SELECT a.BUILDING_NAME_LONG, a.year_built, num_employees FROM (SELECT a.BUILDING_NAME_LONG, a.year_built, COUNT(DISTINCT employee_directory.MIT_ID) AS num_employees FROM (SELECT DISTINCT FCLT_BUILDING_KEY, BUILDING_NAME_LONG, STRFTIME('%Y', date_built) AS year_built FROM fclt_building_hist WHERE STRFTIME('%Y', date_built) < '1950') AS a INNER JOIN fclt_rooms AS fclt_rooms ON fclt_rooms.FCLT_BUILDING_KEY = a.FCLT_BUILDING_KEY INNER JOIN employee_directory AS employee_directory ON employee_directory.OFFICE_LOCATION = fclt_rooms.BUILDING_ROOM GROUP BY a.BUILDING_NAME_LONG, a.year_built) AS subquery WHERE num_employees > 100;	dw
SELECT fb.BUILDING_NAME, COUNT(DISTINCT ccc.subject_id) FROM cis_course_catalog AS ccc JOIN COURSE_CATALOG_SUBJECT_OFFERED AS ccso ON ccc.SUBJECT_ID = ccso.SUBJECT_ID JOIN FCLT_ROOMS AS fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY JOIN FCLT_BUILDING AS fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY GROUP BY fb.FCLT_BUILDING_KEY, fb.BUILDING_NAME;	dw
SELECT building_name, num_students FROM (SELECT fclt_building_key, COUNT(DISTINCT full_name) AS num_students FROM fclt_rooms AS T1 INNER JOIN mit_student_directory AS T2 ON T1.office_location = T2.BUILDING_ROOM GROUP BY fclt_building_key) AS T3 INNER JOIN fclt_building AS T4 ON T3.fclt_building_key = T4.fclt_building_key INNER JOIN (SELECT MAX(num_students) AS max_num_students FROM (SELECT fclt_building_key, COUNT(DISTINCT full_name) AS num_students FROM fclt_rooms AS T5 INNER JOIN mit_student_directory AS T6 ON T5.office_location = T6.BUILDING_ROOM GROUP BY fclt_building_key) AS T7 ) AS T8 ON T3.num_students = T8.max_num_students;	dw
SELECT DISTINCT B.BUILDING_NAME, A.FLOOR FROM FAC_FLOOR AS A JOIN FAC_BUILDING AS B ON A.BUILDING_KEY = B.FAC_BUILDING_KEY JOIN (SELECT MAX(f) AS highest_floor FROM (SELECT CASE WHEN FLOOR GLOB '[0-9]*' THEN CAST(FLOOR AS INTEGER) ELSE NULL END AS f FROM fac_floor)) AS C ON (CASE WHEN A.FLOOR GLOB '[0-9]*' THEN CAST(A.FLOOR AS INTEGER) ELSE NULL END) = C.highest_floor;	dw
SELECT isc.IAP_CATEGORY_NAME, td.ACADEMIC_YEAR, SUM(isd.FEE) AS Total_Fee, COUNT(DISTINCT isd.ACTIVITY_TITLE) AS Total_Subjects, MIN(isd.MAX_ENROLLMENT) AS Min_Attendance, MAX(isd.MAX_ENROLLMENT) AS Max_Attendance FROM IAP_SUBJECT_DETAIL AS isd JOIN IAP_SUBJECT_CATEGORY AS isc ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY JOIN TIME_DAY AS td ON isd.TERM_CODE = td.ACADEMIC_TERM_CODE GROUP BY isc.IAP_CATEGORY_NAME, td.ACADEMIC_YEAR;	dw
SELECT issr.SPONSOR_NAME, COUNT(DISTINCT iss.IAP_SUBJECT_SESSION_KEY) AS Total_Sessions, SUM(isd.MAX_ENROLLMENT), MIN(isd.FEE) AS Min_Fee, MAX(isd.FEE) AS Max_Fee FROM IAP_SUBJECT_SESSION AS iss JOIN IAP_SUBJECT_DETAIL AS isd ON iss.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN IAP_SUBJECT_SPONSOR AS issr ON isd.IAP_SUBJECT_SPONSOR_KEY = issr.IAP_SUBJECT_SPONSOR_KEY GROUP BY issr.SPONSOR_NAME;	dw
SELECT isp.PERSON_EMAIL, isp.PERSON_NAME, td.ACADEMIC_YEAR, COUNT(DISTINCT isd.ACTIVITY_TITLE) AS Total_Subjects, MIN(isd.FEE) AS Min_Fee, MAX(isd.FEE) AS Max_Fee, SUM(isd.MAX_ENROLLMENT) FROM IAP_SUBJECT_PERSON AS isp JOIN IAP_SUBJECT_DETAIL AS isd ON isp.IAP_SUBJECT_PERSON_KEY = isd.IAP_SUBJECT_PERSON_KEY JOIN TIME_DAY AS td ON isd.TERM_CODE = td.ACADEMIC_TERM_CODE GROUP BY isp.PERSON_EMAIL, isp.PERSON_NAME, td.ACADEMIC_YEAR;	dw
SELECT isd.TERM_CODE, ata.TERM_DESCRIPTION, COUNT(DISTINCT iss.IAP_SUBJECT_SESSION_KEY) AS Total_Sessions, SUM(isd.FEE) AS Total_Fee, MIN(isd.MAX_ENROLLMENT) AS Min_Enrollment, MAX(isd.MAX_ENROLLMENT) AS Max_Enrollment FROM IAP_SUBJECT_SESSION AS iss JOIN IAP_SUBJECT_DETAIL AS isd ON iss.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN ACADEMIC_TERMS_ALL AS ata ON isd.TERM_CODE = ata.TERM_CODE GROUP BY isd.TERM_CODE, ata.TERM_DESCRIPTION;	dw
SELECT b.BUILDING_NAME, COUNT(DISTINCT isd.ACTIVITY_TITLE) AS Total_Subjects, SUM(isd.FEE) AS Total_Fee, MIN((CASE WHEN STRFTIME('%H', iss.SESSION_START_TIME) > STRFTIME('%H', iss.SESSION_END_TIME) THEN STRFTIME('%s', '12:00') ELSE STRFTIME('%s', iss.SESSION_END_TIME) END) - STRFTIME('%s', iss.SESSION_START_TIME)) / 60 AS Min_Sessions, MAX((CASE WHEN STRFTIME('%H', iss.SESSION_START_TIME) > STRFTIME('%H', iss.SESSION_END_TIME) THEN STRFTIME('%s', '12:00') ELSE STRFTIME('%s', iss.SESSION_END_TIME) END) - STRFTIME('%s', iss.SESSION_START_TIME)) / 60 AS Max_Sessions FROM IAP_SUBJECT_SESSION AS iss JOIN IAP_SUBJECT_DETAIL AS isd ON iss.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN BUILDINGS AS b ON b.BUILDING_NUMBER = iss.SESSION_LOCATION GROUP BY b.BUILDING_NAME;	dw
SELECT COUNT(DISTINCT isd.ACTIVITY_TITLE) AS Total_Subjects, SUM(isd.FEE) AS Total_Fee, MIN((CASE WHEN STRFTIME('%H:%M', iss.SESSION_START_TIME) > STRFTIME('%H:%M', iss.SESSION_END_TIME) THEN STRFTIME('%s', '12:00') ELSE STRFTIME('%s', iss.SESSION_END_TIME) END) - STRFTIME('%s', iss.SESSION_START_TIME)) / 60 AS Min_Sessions, MAX((CASE WHEN STRFTIME('%H:%M', iss.SESSION_START_TIME) > STRFTIME('%H:%M', iss.SESSION_END_TIME) THEN STRFTIME('%s', '12:00') ELSE STRFTIME('%s', iss.SESSION_END_TIME) END) - STRFTIME('%s', iss.SESSION_START_TIME)) / 60 AS Max_Sessions FROM IAP_SUBJECT_SESSION AS iss JOIN IAP_SUBJECT_DETAIL AS isd ON iss.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN BUILDINGS AS b ON b.BUILDING_NUMBER != iss.SESSION_LOCATION;	dw
SELECT ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DEPARTMENT_FULL_NAME, scd.COURSE_LEVEL, COUNT(DISTINCT scd.COURSE) AS Total_Courses, SUM(CASE WHEN scd.IS_DEGREE_GRANTING = 'Y' THEN 1 ELSE 0 END) AS Total_Degree_Granting_Courses FROM SIS_COURSE_DESCRIPTION AS scd JOIN SIS_DEPARTMENT AS sd ON scd.DEPARTMENT = sd.DEPARTMENT_CODE JOIN SIS_SUBJECT_CODE AS ssc ON scd.COURSE = ssc.SUBJECT_CODE GROUP BY ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, scd.DEPARTMENT, sd.DEPARTMENT_FULL_NAME, scd.COURSE_LEVEL;	dw
SELECT ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DEPARTMENT_CODE, sad.SIS_ADMIN_DEPARTMENT_NAME, COUNT(DISTINCT sad.DEPARTMENT_PHONE_NUMBER) AS Total_Phone_Numbers FROM SIS_ADMIN_DEPARTMENT AS sad JOIN SIS_DEPARTMENT AS sd ON sad.SIS_ADMIN_DEPARTMENT_CODE = sd.DEPARTMENT_CODE JOIN SIS_COURSE_DESCRIPTION AS scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT JOIN SIS_SUBJECT_CODE AS ssc ON scd.COURSE = ssc.SUBJECT_CODE GROUP BY ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DEPARTMENT_CODE, sad.SIS_ADMIN_DEPARTMENT_NAME;	dw
SELECT ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DLC_KEY, GRADUATE_LEVEL, COUNT(DISTINCT ssc.SUBJECT_CODE) AS Total_Subjects, MIN(ssc.COURSE_NUMBER) AS Min_Course_Number, MAX(ssc.COURSE_NUMBER) AS Max_Course_Number, COUNT(DISTINCT sd.DEPARTMENT_CODE) AS Total_Departments FROM SIS_SUBJECT_CODE AS ssc INNER JOIN SIS_COURSE_DESCRIPTION AS scd ON ssc.SUBJECT_CODE = scd.COURSE INNER JOIN SIS_DEPARTMENT AS sd ON scd.DEPARTMENT = sd.DEPARTMENT_CODE GROUP BY ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DLC_KEY, GRADUATE_LEVEL;	dw
SELECT sd.BUILDING_COMPONENT, b.BUILDING_NAME, sd.Total_Square_Footage, COUNT(DISTINCT SF.FLOOR) AS Total_Number_Of_Floors, COUNT(DISTINCT sd.BUILDING_ROOM) AS Total_Rooms, COUNT(DISTINCT su.FCLT_ORGANIZATION_KEY) AS Total_Number_FCLT, COUNT(DISTINCT ssu.MIT_ID) AS Total_Supervisors, SUM(ssu.NUM_OF_SUPERVISEES) AS Total_Supervisees FROM (SELECT SPACE_DETAIL.*, ( SELECT SUM(ROOM_SQUARE_FOOTAGE) FROM SPACE_DETAIL AS sd2 WHERE sd2.BUILDING_COMPONENT = SPACE_DETAIL.BUILDING_COMPONENT ) AS Total_Square_Footage FROM SPACE_DETAIL) AS sd INNER JOIN BUILDINGS AS b ON b.BUILDING_KEY = sd.BUILDING_KEY INNER JOIN SPACE_FLOOR AS sf ON sd.FLOOR_KEY = sf.FLOOR_KEY INNER JOIN SPACE_UNIT AS su ON sd.SPACE_UNIT_KEY = su.SPACE_UNIT_KEY INNER JOIN SPACE_SUPERVISOR_USAGE AS ssu ON su.DLC_KEY = ssu.DEPT_NAMES GROUP BY sd.BUILDING_COMPONENT, b.BUILDING_NAME, sd.Total_Square_Footage;	dw
SELECT su.DLC_KEY, fo.DLC_NAME, COUNT(DISTINCT SF.FLOOR) AS Total_Number_Of_Floors, sd.Total_Square_Footage, COUNT(DISTINCT su.FCLT_ORGANIZATION_KEY) AS Total_Number_Facility, COUNT(DISTINCT ssu.MIT_ID) AS Total_Supervisors, SUM(ssu.NUM_OF_SUPERVISEES) AS Total_Supervisees FROM (SELECT SPACE_DETAIL.*, SUM(ROOM_SQUARE_FOOTAGE) AS Total_Square_Footage FROM SPACE_DETAIL GROUP BY BUILDING_COMPONENT) AS sd JOIN BUILDINGS AS b ON b.BUILDING_KEY = sd.BUILDING_KEY JOIN SPACE_FLOOR AS sf ON sd.FLOOR_KEY = sf.FLOOR_KEY JOIN SPACE_UNIT AS su ON sd.SPACE_UNIT_KEY = su.SPACE_UNIT_KEY JOIN SPACE_SUPERVISOR_USAGE AS ssu ON su.DLC_KEY = ssu.DEPT_NAMES JOIN (SELECT DISTINCT DLC_KEY, DLC_NAME FROM FCLT_ORGANIZATION) AS fo ON fo.DLC_KEY = su.DLC_KEY GROUP BY su.DLC_KEY, fo.DLC_NAME, sd.Total_Square_Footage;	dw
SELECT tso.OFFER_DEPT_NAME, COUNT(DISTINCT tso.SUBJECT_ID) AS Total_Subjects, SUM(tso.NUM_ENROLLED_STUDENTS) AS Total_Enrolled_Students, MIN(tm.RENTAL_NEW_PRICE) AS Min_Rental_New_Price, MAX(tm.RENTAL_NEW_PRICE) AS Max_Rental_New_Price FROM TIP_SUBJECT_OFFERED AS tso INNER JOIN TIP_DETAIL AS td ON tso.TIP_SUBJECT_OFFERED_KEY = td.TIP_SUBJECT_OFFERED_KEY INNER JOIN TIP_MATERIAL AS tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY GROUP BY tso.OFFER_DEPT_NAME;	dw
SELECT CC.ACADEMIC_YEAR, CC.TERM_CODE, SO.HGN_CODE, COUNT(DISTINCT CC.SUBJECT_ID) AS TOTAL_COURSES, AVG(CC.TOTAL_UNITS) AS AVERAGE_UNITS, CC.DEPARTMENT_NAME, ED.FULL_NAME AS RESPONSIBLE_FACULTY_NAME, ED.EMAIL_ADDRESS AS RESPONSIBLE_FACULTY_EMAIL FROM COURSE_CATALOG_SUBJECT_OFFERED AS CC JOIN SUBJECT_OFFERED AS SO ON CC.SUBJECT_ID = SO.SUBJECT_ID JOIN ACADEMIC_TERMS AS AT ON CC.TERM_CODE = AT.TERM_CODE JOIN EMPLOYEE_DIRECTORY AS ED ON SO.RESPONSIBLE_FACULTY_MIT_ID = ED.MIT_ID WHERE AT.IS_CURRENT_TERM = 'Y' GROUP BY CC.ACADEMIC_YEAR, CC.TERM_CODE, SO.HGN_CODE, CC.DEPARTMENT_NAME, ED.FULL_NAME, ED.EMAIL_ADDRESS;	dw
SELECT isd.ACTIVITY_TITLE, isc.IAP_CATEGORY_NAME, iss.SESSION_TITLE, iss.SESSION_START_TIME, iss.SESSION_END_TIME, isp.SPONSOR_NAME, COUNT(DISTINCT iss.IAP_SUBJECT_SESSION_KEY) AS Total_Sessions FROM IAP_SUBJECT_DETAIL AS isd JOIN IAP_SUBJECT_CATEGORY AS isc ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY JOIN IAP_SUBJECT_SESSION AS iss ON isd.IAP_SUBJECT_SESSION_KEY = iss.IAP_SUBJECT_SESSION_KEY JOIN IAP_SUBJECT_SPONSOR AS isp ON isd.IAP_SUBJECT_SPONSOR_KEY = isp.IAP_SUBJECT_SPONSOR_KEY GROUP BY isd.ACTIVITY_TITLE, isc.IAP_CATEGORY_NAME, iss.SESSION_TITLE, iss.SESSION_START_TIME, iss.SESSION_END_TIME, isp.SPONSOR_NAME;	dw
SELECT sd.DEPARTMENT_NAME, sc.SUBJECT_CODE, sc.SUBJECT_CODE_DESC, scd.GRADUATE_LEVEL, ( SELECT COUNT(DISTINCT T2.COURSE_NUMBER) FROM SIS_DEPARTMENT AS T1 INNER JOIN SIS_COURSE_DESCRIPTION AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT WHERE T1.DEPARTMENT_NAME = sd.DEPARTMENT_NAME ) AS Total_Courses FROM SIS_DEPARTMENT AS sd INNER JOIN SIS_COURSE_DESCRIPTION AS scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT INNER JOIN SIS_SUBJECT_CODE AS sc ON scd.COURSE = sc.COURSE_NUMBER;	dw
SELECT at.TERM_CODE, at.TERM_DESCRIPTION, at.IS_CURRENT_TERM2, COUNT(DISTINCT at.SUBJECT_ID) AS Total_SUBJECTS FROM (SELECT at.*, ccc.SUBJECT_ID, CASE WHEN at.ACADEMIC_YEAR = STRFTIME('%Y', 'now') AND atp.IS_CURRENT_TERM = 'Y' THEN 'Y' ELSE 'N' END AS IS_CURRENT_TERM2 FROM (SELECT ACADEMIC_TERMS_ALL.*, CASE WHEN TERM_CODE LIKE '%FA' THEN 'Y' END AS A, CASE WHEN TERM_CODE LIKE '%JA' THEN 'Y' END AS B, CASE WHEN TERM_CODE LIKE '%SP' THEN 'Y' END AS C, CASE WHEN TERM_CODE LIKE '%SU' THEN 'Y' END AS D FROM ACADEMIC_TERMS_ALL) AS at LEFT OUTER JOIN ACADEMIC_TERM_PARAMETER AS atp ON at.TERM_CODE = atp.TERM_CODE LEFT OUTER JOIN CIS_COURSE_CATALOG AS ccc ON ccc.ACADEMIC_YEAR = at.ACADEMIC_YEAR AND (IS_OFFERED_FALL_TERM = at.A OR IS_OFFERED_IAP = at.B OR IS_OFFERED_SPRING_TERM = at.C OR IS_OFFERED_SPRING_TERM = at.C OR IS_OFFERED_SUMMER_TERM = at.D)) AS at GROUP BY at.TERM_CODE, at.TERM_DESCRIPTION, at.IS_CURRENT_TERM2;	dw
SELECT tm.AUTHOR, sd.SCHOOL_NAME, tms.TIP_MATERIAL_STATUS, SUM(td.RECORD_COUNT) AS Total_Record_Count, COUNT(DISTINCT td.SUBJECT_ID) AS Total_Subject FROM TIP_DETAIL AS td INNER JOIN (SELECT TIP_MATERIAL_KEY, CASE WHEN INSTR(AUTHOR, ';') > 0 THEN SUBSTR(AUTHOR, 1, INSTR(AUTHOR, ';') - 1) ELSE AUTHOR END AS AUTHOR FROM TIP_MATERIAL) AS tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY INNER JOIN TIP_MATERIAL_STATUS AS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY INNER JOIN TIP_SUBJECT_OFFERED AS tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY INNER JOIN STUDENT_DEPARTMENT AS sd ON tso.OFFER_DEPT_CODE = sd.DEPARTMENT_CODE GROUP BY tm.AUTHOR, tms.TIP_MATERIAL_STATUS, sd.SCHOOL_NAME;	dw
SELECT tso.COURSE_NUMBER, tso.SUBJECT_TITLE, tms.TIP_MATERIAL_STATUS, SUM(tm.NEW_SHELF_PRICE) AS Total_New_Price, MIN(tm.NEW_SHELF_PRICE) AS Min_New_Price, MAX(tm.NEW_SHELF_PRICE) AS Max_New_Price, SUM(tm.USED_SHELF_PRICE) AS Total_Used_Price, MIN(tm.USED_SHELF_PRICE) AS Min_Used_Price, MAX(tm.USED_SHELF_PRICE) AS Max_Used_Price, COUNT(DISTINCT OFFER_SCHOOL_NAME) AS Total_Num_Schools, COUNT(DISTINCT td.TIP_MATERIAL_KEY) AS Total_Num_Materials FROM TIP_DETAIL AS td JOIN TIP_MATERIAL AS tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_MATERIAL_STATUS AS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY JOIN TIP_SUBJECT_OFFERED AS tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY GROUP BY tso.COURSE_NUMBER, tso.SUBJECT_TITLE, tms.TIP_MATERIAL_STATUS;	dw
SELECT tms.TIP_MATERIAL_STATUS, COUNT(DISTINCT td.TIP_MATERIAL_KEY) AS Total_Materials, COUNT(DISTINCT td.SUBJECT_ID) AS Total_Subjects, COUNT(DISTINCT SCHOOL_NAME) AS Total_Num_Schools FROM TIP_DETAIL AS td JOIN TIP_MATERIAL AS tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_MATERIAL_STATUS AS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY JOIN TIP_SUBJECT_OFFERED AS tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY JOIN STUDENT_DEPARTMENT AS sd ON tso.OFFER_DEPT_CODE = sd.DEPARTMENT_CODE GROUP BY tms.TIP_MATERIAL_STATUS;	dw
SELECT at.TERM_DESCRIPTION, at.IS_CURRENT_TERM, COUNT(DISTINCT tso.COURSE_NUMBER) AS Total_Courses, COUNT(DISTINCT tm.isbn) AS Total_materials, MIN(tso.NUM_ENROLLED_STUDENTS) AS Min_Enrolled_Students, MAX(tso.NUM_ENROLLED_STUDENTS) AS Max_Enrolled_Students, COUNT(DISTINCT tso.OFFER_SCHOOL_NAME) AS Total_Num_Schools FROM ACADEMIC_TERMS_ALL AS at LEFT OUTER JOIN TIP_SUBJECT_OFFERED AS tso ON at.TERM_CODE = tso.TERM_CODE JOIN TIP_DETAIL AS td ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL AS tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_MATERIAL_STATUS AS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY GROUP BY at.TERM_CODE, at.TERM_DESCRIPTION, at.IS_CURRENT_TERM;	dw
SELECT DISTINCT new.BUILDING_NAME, new.BUILDING_NUMBER, new.BUILDING_STREET_ADDRESS, fba.CITY, fba.STATE, new.HR_DEPARTMENT_NAME, new.BLDG_ASSIGNABLE_SQUARE_FOOTAGE, new.Total_Square_Footage, new.Avg_Square_Footage_Per_Room FROM (SELECT b.BUILDING_NAME, b.BUILDING_NUMBER, b.BUILDING_STREET_ADDRESS,fb.FAC_BUILDING_KEY, fo.HR_DEPARTMENT_NAME, b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE,SUM(fr.AREA) AS Total_Square_Footage, AVG(fr.AREA) AS Avg_Square_Footage_Per_Room FROM BUILDINGS AS b JOIN FAC_BUILDING AS fb ON b.BUILDING_KEY = fb.FAC_BUILDING_KEY JOIN FAC_ROOMS AS fr ON fb.FAC_BUILDING_KEY = fr.BUILDING_KEY JOIN FAC_ORGANIZATION AS fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY GROUP BY b.BUILDING_NAME, b.BUILDING_NUMBER, b.BUILDING_STREET_ADDRESS,fb.FAC_BUILDING_KEY, fo.HR_DEPARTMENT_NAME, b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE ) AS new JOIN FAC_BUILDING_ADDRESS AS fba ON new.FAC_BUILDING_KEY = fba.BUILDING_KEY ORDER BY new.BLDG_ASSIGNABLE_SQUARE_FOOTAGE DESC, new.Total_Square_Footage DESC, new.Avg_Square_Footage_Per_Room DESC;	dw
SELECT DISTINCT at.TERM_DESCRIPTION, ccso.SUBJECT_TITLE, ccso.PREREQUISITES, ( SELECT COUNT(T2.SUBJECT_ID) FROM COURSE_CATALOG_SUBJECT_OFFERED AS T2 WHERE T2.TERM_CODE = at.TERM_CODE ) AS Total_Subjects, ccso.FALL_INSTRUCTORS, ( SELECT COUNT(T2.SUBJECT_ID) FROM COURSE_CATALOG_SUBJECT_OFFERED AS T2 WHERE T2.FALL_INSTRUCTORS = ccso.FALL_INSTRUCTORS ) AS Experience FROM COURSE_CATALOG_SUBJECT_OFFERED AS ccso INNER JOIN ACADEMIC_TERMS AS at ON ccso.TERM_CODE = at.TERM_CODE WHERE ccso.TERM_CODE = '2023FA';	dw
SELECT fr.ROOM_FULL_NAME, fb.BUILDING_NAME, ff.FLOOR, fo.ORGANIZATION_NAME, fo.HR_DEPARTMENT_NAME, CASE WHEN ff.ASSIGNABLE_AREA = 0 THEN 0 ELSE fr.AREA * 1.0 / ff.ASSIGNABLE_AREA END AS PERC_OF_ASG_FLOOR, CASE WHEN fb.ASSIGNABLE_AREA = 0 THEN 0 ELSE fr.AREA * 1.0 / fb.ASSIGNABLE_AREA END AS PERC_OF_ASG_BUILDING FROM FAC_ROOMS AS fr JOIN FAC_BUILDING AS fb ON fr.BUILDING_KEY = fb.FAC_BUILDING_KEY JOIN FAC_FLOOR AS ff ON fr.FLOOR_KEY = ff.FLOOR_KEY JOIN FAC_ORGANIZATION AS fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY;	dw
SELECT fr.ROOM_FULL_NAME, fb.BUILDING_NAME, ff.FLOOR, fo.ORGANIZATION_NAME, fo.HR_DEPARTMENT_NAME, CASE WHEN FLOOR_AREA = 0 THEN 0 ELSE fr.AREA/FLOOR_AREA END AS PERC_OF_FLOOR, CASE WHEN BUILDING_AREA = 0 THEN 0 ELSE fr.AREA/BUILDING_AREA END AS PERC_OF_BUILDING FROM (SELECT ROOM_FULL_NAME, BUILDING_KEY, FLOOR_KEY,ORGANIZATION_KEY, AREA, ( SELECT SUM(AREA) FROM FAC_ROOMS AS fr2 WHERE fr2.FLOOR_KEY = fr1.FLOOR_KEY ) AS FLOOR_AREA, ( SELECT SUM(AREA) FROM FAC_ROOMS AS fr3 WHERE fr3.BUILDING_KEY = fr1.BUILDING_KEY ) AS BUILDING_AREA FROM FAC_ROOMS AS fr1) AS fr INNER JOIN FAC_BUILDING AS fb ON fr.BUILDING_KEY = fb.FAC_BUILDING_KEY INNER JOIN FAC_FLOOR AS ff ON fr.FLOOR_KEY = ff.FLOOR_KEY INNER JOIN FAC_ORGANIZATION AS fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY;	dw
SELECT ata.ACADEMIC_YEAR, ed.FULL_NAME, COUNT(DISTINCT so.COURSE_NUMBER) AS Total_Courses FROM SUBJECT_OFFERED AS so JOIN ACADEMIC_TERMS_ALL AS ata ON so.TERM_CODE = ata.TERM_CODE JOIN EMPLOYEE_DIRECTORY AS ed ON so.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID WHERE ata.ACADEMIC_YEAR = 2022 GROUP BY ata.ACADEMIC_YEAR, ed.FULL_NAME;	dw
SELECT fb.BUILDING_NAME, fo.HR_DEPARTMENT_NAME, fo.ORGANIZATION, MAX(ff.LEVEL_ID) AS MAX_FLOOR, MIN(ff.LEVEL_ID) AS MIN_FLOOR, COUNT(DISTINCT fr.FAC_ROOM_KEY) AS Total_Rooms FROM FAC_BUILDING AS fb JOIN FAC_ROOMS AS fr ON fb.FAC_BUILDING_KEY = fr.BUILDING_KEY JOIN FAC_FLOOR AS ff ON fr.FLOOR_KEY = ff.FLOOR_KEY JOIN FAC_ORGANIZATION AS fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY GROUP BY fb.FAC_BUILDING_KEY, fb.BUILDING_NAME, fo.HR_DEPARTMENT_NAME, fo.ORGANIZATION;	dw
SELECT T1.FULL_NAME, T1.EMAIL_ADDRESS, T2.DEPARTMENT_NAME, T3.DEPARTMENT_PHONE_NUMBER, T2.SCHOOL_NAME, ( SELECT COUNT(T4.EMAIL_ADDRESS) FROM MIT_STUDENT_DIRECTORY AS T4 INNER JOIN SIS_DEPARTMENT AS T5 ON T4.DEPARTMENT = T5.DEPARTMENT_CODE WHERE T5.DEPARTMENT_CODE = T2.DEPARTMENT_CODE ) AS Total_Students_DEPT, ( SELECT COUNT(T4.EMAIL_ADDRESS) FROM MIT_STUDENT_DIRECTORY AS T4 INNER JOIN SIS_DEPARTMENT AS T5 ON T4.DEPARTMENT = T5.DEPARTMENT_CODE WHERE T5.SCHOOL_CODE = T2.SCHOOL_CODE ) AS Total_Students_SCHOOLS FROM MIT_STUDENT_DIRECTORY AS T1 INNER JOIN SIS_DEPARTMENT AS T2 ON T1.DEPARTMENT = T2.DEPARTMENT_CODE INNER JOIN SIS_ADMIN_DEPARTMENT AS T3 ON T2.DEPARTMENT_CODE = T3.SIS_ADMIN_DEPARTMENT_CODE GROUP BY T1.FULL_NAME, T1.EMAIL_ADDRESS, T2.DEPARTMENT_NAME, T3.DEPARTMENT_PHONE_NUMBER, T2.SCHOOL_NAME	dw
SELECT DISTINCT ccso.SUBJECT_TITLE, e.FULL_NAME AS INSTRUCTOR, e.EMAIL_ADDRESS, ( SELECT COUNT(DISTINCT T2.SUBJECT_ID) FROM COURSE_CATALOG_SUBJECT_OFFERED AS T2 WHERE T2.FALL_INSTRUCTORS = ccso.FALL_INSTRUCTORS ) AS Total_Subjects FROM EMPLOYEE_DIRECTORY AS e INNER JOIN COURSE_CATALOG_SUBJECT_OFFERED AS ccso ON ccso.RESPONSIBLE_FACULTY_MIT_ID = e.MIT_ID INNER JOIN ACADEMIC_TERMS_ALL AS at ON ccso.TERM_CODE = at.TERM_CODE WHERE at.TERM_CODE LIKE '%FA';	dw
SELECT b.BUILDING_NAME, fo.HR_DEPARTMENT_NAME, SUM(b.BLDG_GROSS_SQUARE_FOOTAGE), SUM(b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE), AVG(b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE) AS Avg_Square_Footage FROM BUILDINGS AS b JOIN FAC_BUILDING AS fb ON b.BUILDING_KEY = fb.FAC_BUILDING_KEY JOIN FAC_ROOMS AS fr ON fb.FAC_BUILDING_KEY = fr.BUILDING_KEY JOIN FAC_ORGANIZATION AS fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY GROUP BY b.BUILDING_KEY, b.BUILDING_NAME, fo.HR_DEPARTMENT_NAME;	dw
SELECT ccso.SUBJECT_TITLE, ccso.SUBJECT_DESCRIPTION, ccso.RESPONSIBLE_FACULTY_NAME, ed.EMAIL_ADDRESS, b.BUILDING_NAME, fr.ROOM_FULL_NAME, ff.LEVEL_ID, b.BUILDING_STREET_ADDRESS, ( SELECT COUNT(T1.SUBJECT_ID) FROM COURSE_CATALOG_SUBJECT_OFFERED AS T1 WHERE T1.DEPARTMENT_CODE = ccso.DEPARTMENT_CODE ) AS Total_Courses FROM COURSE_CATALOG_SUBJECT_OFFERED AS ccso INNER JOIN EMPLOYEE_DIRECTORY AS ed ON ccso.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID INNER JOIN ACADEMIC_TERMS AS at ON ccso.TERM_CODE = at.TERM_CODE INNER JOIN FAC_ROOMS AS fr ON ccso.MEET_PLACE = fr.FAC_ROOM_KEY INNER JOIN FAC_FLOOR AS ff ON ff.FLOOR_KEY = fr.FLOOR_KEY INNER JOIN BUILDINGS AS b ON fr.BUILDING_KEY = b.BUILDING_KEY WHERE at.TERM_CODE LIKE '%SU';	dw
SELECT ata.TERM_DESCRIPTION, ccso.HASS_ATTRIBUTE_DESC, sd.DEPARTMENT_NAME, sd.SCHOOL_NAME, ( SELECT COUNT(DISTINCT T2.SUBJECT_ID) FROM COURSE_CATALOG_SUBJECT_OFFERED AS T2 INNER JOIN CIS_HASS_ATTRIBUTE AS T3 ON T2.HASS_ATTRIBUTE = T3.HASS_ATTRIBUTE WHERE T3.CIS_ATTRIBUTE_GROUP = 'H' AND T2.TERM_CODE = ata.TERM_CODE ) AS Total_Subjects FROM COURSE_CATALOG_SUBJECT_OFFERED AS ccso INNER JOIN CIS_HASS_ATTRIBUTE AS cha ON ccso.HASS_ATTRIBUTE = cha.HASS_ATTRIBUTE INNER JOIN SIS_DEPARTMENT AS sd ON ccso.DEPARTMENT_CODE = sd.DEPARTMENT_CODE INNER JOIN ACADEMIC_TERMS_ALL AS ata ON ccso.TERM_CODE = ata.TERM_CODE WHERE cha.CIS_ATTRIBUTE_GROUP = 'H';	dw
SELECT fb.BUILDING_NAME, fb.BUILDING_HEIGHT, b.BUILDING_STREET_ADDRESS, fba.CITY, fba.STATE, fba.POSTAL_CODE, fb.EXT_GROSS_AREA, fb.ASSIGNABLE_AREA, MIN(ff.LEVEL_ID) AS SMALLEST_FLOOR, MAX(LEVEL_ID) AS HIGHEST_FLOOR, SUM(fr.AREA) AS Total_Room_Area FROM FAC_BUILDING AS fb JOIN FAC_BUILDING_ADDRESS AS fba ON fb.FAC_BUILDING_KEY = fba.BUILDING_KEY JOIN FAC_FLOOR AS ff ON fb.FAC_BUILDING_KEY = ff.BUILDING_KEY JOIN FAC_ROOMS AS fr ON ff.FLOOR_KEY = fr.FLOOR_KEY JOIN BUILDINGS AS b ON b.BUILDING_KEY = fb.FAC_BUILDING_KEY WHERE fba.ADDRESS_PURPOSE = 'STREET' GROUP BY fb.FAC_BUILDING_KEY, fb.BUILDING_NAME, fb.BUILDING_HEIGHT, fba.CITY, fba.POSTAL_CODE, fba.STATE, b.BUILDING_STREET_ADDRESS, fb.EXT_GROSS_AREA, fb.ASSIGNABLE_AREA;	dw
SELECT c.CATEGORY_TITLE, c.VERSION, sd.DEPARTMENT_NAME, sd.SCHOOL_NAME, SUM(CASE WHEN scd.COURSE_LEVEL = 'U' THEN 1 ELSE 0 END) AS Total_U_Courses, SUM(CASE WHEN scd.COURSE_LEVEL = 'G' THEN 1 ELSE 0 END) AS Total_G_Courses, SUM(CASE WHEN scd.IS_DEGREE_GRANTING = 'Y' THEN 1 ELSE 0 END) AS Total_Degree_Granting_Courses FROM CIP AS c INNER JOIN SIS_COURSE_DESCRIPTION AS scd ON c.PROGRAM_CODE = scd.CIP_PROGRAM_CODE INNER JOIN SIS_DEPARTMENT AS sd ON scd.DEPARTMENT = sd.DEPARTMENT_CODE GROUP BY c.CATEGORY_CODE, c.CATEGORY_TITLE, c.VERSION, sd.DEPARTMENT_NAME, sd.SCHOOL_NAME;	dw
SELECT COUNT(DISTINCT lrc.CATALOG_SYSTEM_NUMBER) AS Total_Materials, MIN(lrc.CATALOG_YEAR) AS Min_Publication_Year, MAX(lrc.CATALOG_YEAR) AS Max_Publication_Year, COUNT(DISTINCT lms.LIBRARY_MATERIAL_STATUS) AS Total_Statuses FROM LIBRARY_COURSE_INSTRUCTOR AS lci INNER JOIN LIBRARY_RESERVE_MATRL_DETAIL AS lrmd ON lci.LIBRARY_COURSE_INSTRUCTOR_KEY = lrmd.LIBRARY_COURSE_INSTRUCTOR_KEY INNER JOIN LIBRARY_RESERVE_CATALOG AS lrc ON lrmd.LIBRARY_RESERVE_CATALOG_KEY = lrc.LIBRARY_RESERVE_CATALOG_KEY INNER JOIN LIBRARY_MATERIAL_STATUS AS lms ON lrmd.LIBRARY_MATERIAL_STATUS_KEY = lms.LIBRARY_MATERIAL_STATUS_KEY GROUP BY lci.COURSE_NAME;	dw
SELECT COUNT(DISTINCT lrc.CATALOG_SYSTEM_NUMBER) AS Total_Materials, MIN(lrc.CATALOG_YEAR) AS Min_Publication_Year, MAX(lrc.CATALOG_YEAR) AS Max_Publication_Year, SUM(lso.NUM_ENROLLED_STUDENTS) AS Total_Enrolled_Students FROM LIBRARY_COURSE_INSTRUCTOR AS lci INNER JOIN LIBRARY_RESERVE_MATRL_DETAIL AS lrmd ON lci.LIBRARY_COURSE_INSTRUCTOR_KEY = lrmd.LIBRARY_COURSE_INSTRUCTOR_KEY INNER JOIN LIBRARY_RESERVE_CATALOG AS lrc ON lrmd.LIBRARY_RESERVE_CATALOG_KEY = lrc.LIBRARY_RESERVE_CATALOG_KEY INNER JOIN LIBRARY_SUBJECT_OFFERED AS lso ON lrmd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY GROUP BY lci.INSTRUCTOR_NAME;	dw
SELECT lms.LIBRARY_MATERIAL_STATUS, ata.TERM_DESCRIPTION, COUNT(DISTINCT lso.COURSE_NUMBER) AS Total_Courses, COUNT(DISTINCT lrc.CATALOG_SYSTEM_NUMBER) AS Total_Materials, COUNT(DISTINCT lso.OFFER_DEPT_CODE), COUNT(DISTINCT lso.OFFER_SCHOOL_NAME), COUNT(DISTINCT lci.INSTRUCTOR_NAME) AS Total_Instructors FROM LIBRARY_MATERIAL_STATUS AS lms JOIN LIBRARY_RESERVE_MATRL_DETAIL AS lrmd ON lms.LIBRARY_MATERIAL_STATUS_KEY = lrmd.LIBRARY_MATERIAL_STATUS_KEY JOIN LIBRARY_SUBJECT_OFFERED AS lso ON lrmd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY JOIN LIBRARY_COURSE_INSTRUCTOR AS lci ON lrmd.LIBRARY_COURSE_INSTRUCTOR_KEY = lci.LIBRARY_COURSE_INSTRUCTOR_KEY JOIN LIBRARY_RESERVE_CATALOG AS lrc ON lrmd.LIBRARY_RESERVE_CATALOG_KEY = lrc.LIBRARY_RESERVE_CATALOG_KEY JOIN ACADEMIC_TERMS_ALL AS ata ON ata.TERM_CODE = lso.TERM_CODE GROUP BY lms.LIBRARY_MATERIAL_STATUS_CODE, lms.LIBRARY_MATERIAL_STATUS, lso.TERM_CODE, ata.TERM_DESCRIPTION;	dw
SELECT DISTINCT su.SPACE_UNIT, sf.FLOOR, b.BUILDING_NAME, b.BUILDING_STREET_ADDRESS, su2.SPACE_USAGE, ( SELECT COUNT(DISTINCT su3.SPACE_UNIT) FROM SPACE_UNIT AS su3 INNER JOIN SPACE_DETAIL AS sd3 ON su3.SPACE_UNIT_KEY = sd3.SPACE_UNIT_KEY WHERE sd3.FLOOR_KEY = sd.FLOOR_KEY AND sd3.BUILDING_KEY = sd.BUILDING_KEY ) FROM SPACE_UNIT AS su INNER JOIN SPACE_DETAIL AS sd ON su.SPACE_UNIT_KEY = sd.SPACE_UNIT_KEY INNER JOIN SPACE_USAGE AS su2 ON su2.SPACE_USAGE_KEY = sd.SPACE_USAGE_KEY INNER JOIN SPACE_FLOOR AS sf ON sd.FLOOR_KEY = sf.FLOOR_KEY INNER JOIN BUILDINGS AS b ON b.BUILDING_KEY = sd.BUILDING_KEY INNER JOIN FCLT_ORGANIZATION AS fo ON fo.FCLT_ORGANIZATION_KEY = su.FCLT_ORGANIZATION_KEY;	dw
