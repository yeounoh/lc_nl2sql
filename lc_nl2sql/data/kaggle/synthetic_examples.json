[
    {
        "question": "What are the distinct fire causes?",
        "query": "SELECT DISTINCT STAT_CAUSE_DESCR FROM Fires"
    },
    {
        "question": "How many fires were caused by lightning?",
        "query": "SELECT COUNT(*) FROM Fires WHERE STAT_CAUSE_DESCR = 'Lightning'"
    },
    {
        "question": "What is the average fire size for fires caused by equipment use?",
        "query": "SELECT AVG(FIRE_SIZE) FROM Fires WHERE STAT_CAUSE_DESCR = 'Equipment Use'"
    },
    {
        "question": "What is the largest fire size recorded?",
        "query": "SELECT MAX(FIRE_SIZE) FROM Fires"
    },
    {
        "question": "What is the smallest fire size recorded?",
        "query": "SELECT MIN(FIRE_SIZE) FROM Fires"
    },
    {
        "question": "How many fires occurred in the year 2005?",
        "query": "SELECT COUNT(*) FROM Fires WHERE FIRE_YEAR = 2005"
    },
    {
        "question": "List all fires that occurred in the state of California.",
        "query": "SELECT * FROM Fires WHERE STATE = 'CA'"
    },
    {
        "question": "What are the different fire size classes?",
        "query": "SELECT DISTINCT FIRE_SIZE_CLASS FROM Fires"
    },
    {
        "question": "How many fires are classified as class G?",
        "query": "SELECT COUNT(*) FROM Fires WHERE FIRE_SIZE_CLASS = 'G'"
    },
    {
        "question": "What is the average fire size for class C fires?",
        "query": "SELECT AVG(FIRE_SIZE) FROM Fires WHERE FIRE_SIZE_CLASS = 'C'"
    },
    {
        "question": "List all fires that occurred in the year 2010 and were caused by lightning.",
        "query": "SELECT * FROM Fires WHERE FIRE_YEAR = 2010 AND STAT_CAUSE_DESCR = 'Lightning'"
    },
    {
        "question": "What is the total fire size for all fires in the year 2015?",
        "query": "SELECT SUM(FIRE_SIZE) FROM Fires WHERE FIRE_YEAR = 2015"
    },
    {
        "question": "List all fires that occurred in the state of Texas and were larger than 100 acres.",
        "query": "SELECT * FROM Fires WHERE STATE = 'TX' AND FIRE_SIZE > 100"
    },
    {
        "question": "What is the average latitude of all fires?",
        "query": "SELECT AVG(LATITUDE) FROM Fires"
    },
    {
        "question": "What is the average longitude of all fires?",
        "query": "SELECT AVG(LONGITUDE) FROM Fires"
    },
    {
        "question": "List all fires that occurred within a specific latitude and longitude range.",
        "query": "SELECT * FROM Fires WHERE LATITUDE BETWEEN 30 AND 40 AND LONGITUDE BETWEEN -100 AND -90"
    },
    {
        "question": "What are the different owner descriptions?",
        "query": "SELECT DISTINCT OWNER_DESCR FROM Fires"
    },
    {
        "question": "How many fires were on NPS land?",
        "query": "SELECT COUNT(*) FROM Fires WHERE OWNER_DESCR = 'NPS'"
    },
    {
        "question": "What is the average fire size on USFS land?",
        "query": "SELECT AVG(FIRE_SIZE) FROM Fires WHERE OWNER_DESCR = 'USFS'"
    },
    {
        "question": "List all fires that occurred on BIA land and were caused by campfire.",
        "query": "SELECT * FROM Fires WHERE OWNER_DESCR = 'BIA' AND STAT_CAUSE_DESCR = 'Campfire'"
    },
    {
        "question": "What are the different counties where fires occurred?",
        "query": "SELECT DISTINCT COUNTY FROM Fires"
    },
    {
        "question": "How many fires occurred in Los Angeles County?",
        "query": "SELECT COUNT(*) FROM Fires WHERE COUNTY = 'Los Angeles'"
    },
    {
        "question": "What is the total fire size for all fires in Riverside County?",
        "query": "SELECT SUM(FIRE_SIZE) FROM Fires WHERE COUNTY = 'Riverside'"
    },
    {
        "question": "List all fires that occurred in San Diego County and were caused by debris burning.",
        "query": "SELECT * FROM Fires WHERE COUNTY = 'San Diego' AND STAT_CAUSE_DESCR = 'Debris Burning'"
    },
    {
        "question": "What are the different FIPS codes?",
        "query": "SELECT DISTINCT FIPS_CODE FROM Fires"
    },
    {
        "question": "How many fires occurred in FIPS code 063?",
        "query": "SELECT COUNT(*) FROM Fires WHERE FIPS_CODE = '063'"
    },
    {
        "question": "What is the average fire size for fires in FIPS code 111?",
        "query": "SELECT AVG(FIRE_SIZE) FROM Fires WHERE FIPS_CODE = '111'"
    },
    {
        "question": "List all fires that occurred in FIPS code 037 and were caused by powerline.",
        "query": "SELECT * FROM Fires WHERE FIPS_CODE = '037' AND STAT_CAUSE_DESCR = 'Powerline'"
    },
    {
        "question": "What are the different FIPS names?",
        "query": "SELECT DISTINCT FIPS_NAME FROM Fires"
    },
    {
        "question": "How many fires occurred in the FIPS area named 'Alpine'?",
        "query": "SELECT COUNT(*) FROM Fires WHERE FIPS_NAME = 'Alpine'"
    },
    {
        "question": "What is the total fire size for all fires in the FIPS area named 'Amador'?",
        "query": "SELECT SUM(FIRE_SIZE) FROM Fires WHERE FIPS_NAME = 'Amador'"
    },
    {
        "question": "List all fires that occurred in the FIPS area named 'Butte' and were caused by miscellaneous.",
        "query": "SELECT * FROM Fires WHERE FIPS_NAME = 'Butte' AND STAT_CAUSE_DESCR = 'Miscellaneous'"
    },
    {
        "question": "Find the earliest discovery date of a fire.",
        "query": "SELECT MIN(DISCOVERY_DATE) FROM Fires"
    },
    {
        "question": "Find the latest containment date of a fire.",
        "query": "SELECT MAX(CONT_DATE) FROM Fires"
    },
    {
        "question": "Find the average discovery day of year (DOY).",
        "query": "SELECT AVG(DISCOVERY_DOY) FROM Fires"
    },
    {
        "question": "Find the number of fires discovered in the morning (before 12:00 PM).",
        "query": "SELECT COUNT(*) FROM Fires WHERE DISCOVERY_TIME < '1200'"
    },
    {
        "question": "Find the average fire size for fires discovered at night (after 6:00 PM).",
        "query": "SELECT AVG(FIRE_SIZE) FROM Fires WHERE DISCOVERY_TIME > '1800'"
    },
    {
        "question": "Find the states with the highest number of fires.",
        "query": "SELECT STATE, COUNT(*) AS FireCount FROM Fires GROUP BY STATE ORDER BY FireCount DESC LIMIT 1"
    },
    {
        "question": "Find the fire cause with the largest average fire size.",
        "query": "SELECT STAT_CAUSE_DESCR, AVG(FIRE_SIZE) AS AvgFireSize FROM Fires GROUP BY STAT_CAUSE_DESCR ORDER BY AvgFireSize DESC LIMIT 1"
    },
    {
        "question": "Find the year with the highest total fire size.",
        "query": "SELECT FIRE_YEAR, SUM(FIRE_SIZE) AS TotalFireSize FROM Fires GROUP BY FIRE_YEAR ORDER BY TotalFireSize DESC LIMIT 1"
    },
    {
        "question": "Find the average fire size for each fire size class.",
        "query": "SELECT FIRE_SIZE_CLASS, AVG(FIRE_SIZE) FROM Fires GROUP BY FIRE_SIZE_CLASS"
    },
    {
        "question": "Find the number of fires for each owner description.",
        "query": "SELECT OWNER_DESCR, COUNT(*) FROM Fires GROUP BY OWNER_DESCR"
    },
    {
        "question": "List the states and the number of fires in each state, ordered by the number of fires in descending order.",
        "query": "SELECT STATE, COUNT(*) AS FireCount FROM Fires GROUP BY STATE ORDER BY FireCount DESC"
    },
    {
        "question": "Find the average latitude and longitude of fires for each fire cause.",
        "query": "SELECT STAT_CAUSE_DESCR, AVG(LATITUDE), AVG(LONGITUDE) FROM Fires GROUP BY STAT_CAUSE_DESCR"
    },
    {
        "question": "Find the fire cause with the highest number of fires in each state.",
        "query": "SELECT STATE, STAT_CAUSE_DESCR, COUNT(*) AS FireCount FROM Fires GROUP BY STATE, STAT_CAUSE_DESCR ORDER BY FireCount DESC"
    },
    {
        "question": "Find the average fire size for each fire cause in each year.",
        "query": "SELECT FIRE_YEAR, STAT_CAUSE_DESCR, AVG(FIRE_SIZE) FROM Fires GROUP BY FIRE_YEAR, STAT_CAUSE_DESCR"
    },
    {
        "question": "List the fires that were contained on the same day they were discovered.",
        "query": "SELECT * FROM Fires WHERE DISCOVERY_DATE = CONT_DATE"
    },
    {
        "question": "List the fires where the containment time is earlier than the discovery time.",
        "query": "SELECT * FROM Fires WHERE CONT_TIME < DISCOVERY_TIME"
    },
    {
        "question": "Find the fires that lasted more than a week (7 days).",
        "query": "SELECT * FROM Fires WHERE CONT_DATE - DISCOVERY_DATE > 7"
    },
    {
        "question": "Find the fires where containment took longer than a day",
        "query": "SELECT * FROM Fires WHERE CONT_DOY > DISCOVERY_DOY + 1"
    },
    {
        "question": "Find the number of fires per state in a specific year",
        "query": "SELECT STATE, COUNT(*) FROM Fires WHERE FIRE_YEAR = 2003 GROUP BY STATE"
    },
    {
        "question": "Find the average fire size per state for a specific cause.",
        "query": "SELECT STATE, AVG(FIRE_SIZE) FROM Fires WHERE STAT_CAUSE_DESCR = 'Lightning' GROUP BY STATE"
    },
    {
        "question": "Find the top 5 counties with the largest average fire size.",
        "query": "SELECT COUNTY, AVG(FIRE_SIZE) AS AvgFireSize FROM Fires GROUP BY COUNTY ORDER BY AvgFireSize DESC LIMIT 5"
    },
    {
        "question": "Find the top 10 years with the most fires caused by human activities (excluding lightning).",
        "query": "SELECT FIRE_YEAR, COUNT(*) AS FireCount FROM Fires WHERE STAT_CAUSE_DESCR != 'Lightning' GROUP BY FIRE_YEAR ORDER BY FireCount DESC LIMIT 10"
    },
    {
        "question": "Find the average fire size for each fire size class in each state.",
        "query": "SELECT STATE, FIRE_SIZE_CLASS, AVG(FIRE_SIZE) FROM Fires GROUP BY STATE, FIRE_SIZE_CLASS"
    },
    {
        "question": "Find the number of fires for each owner type in each state.",
        "query": "SELECT STATE, OWNER_DESCR, COUNT(*) FROM Fires GROUP BY STATE, OWNER_DESCR"
    },
    {
        "question": "Find the total fire size for each fire cause in each FIPS area.",
        "query": "SELECT FIPS_NAME, STAT_CAUSE_DESCR, SUM(FIRE_SIZE) FROM Fires GROUP BY FIPS_NAME, STAT_CAUSE_DESCR"
    },
    {
        "question": "Find the average longitude and latitude for each fire cause in each year.",
        "query": "SELECT FIRE_YEAR, STAT_CAUSE_DESCR, AVG(LONGITUDE), AVG(LATITUDE) FROM Fires GROUP BY FIRE_YEAR, STAT_CAUSE_DESCR"
    },
    {
        "question": "Find the number of fires that started and were contained on the same day, grouped by state.",
        "query": "SELECT STATE, COUNT(*) FROM Fires WHERE DISCOVERY_DATE = CONT_DATE GROUP BY STATE"
    },
    {
        "question": "Find the number of fires caused by each cause, where the fire size is greater than the average fire size for that cause.",
        "query": "SELECT STAT_CAUSE_DESCR, COUNT(*) FROM Fires WHERE FIRE_SIZE > (SELECT AVG(FIRE_SIZE) FROM Fires) GROUP BY STAT_CAUSE_DESCR"
    },
    {
        "question": "Find the states where the average fire size is greater than the overall average fire size.",
        "query": "SELECT STATE FROM Fires GROUP BY STATE HAVING AVG(FIRE_SIZE) > (SELECT AVG(FIRE_SIZE) FROM Fires)"
    },
    {
        "question": "Find the years where the total fire size is greater than the average total fire size across all years.",
        "query": "SELECT FIRE_YEAR FROM Fires GROUP BY FIRE_YEAR HAVING SUM(FIRE_SIZE) > (SELECT AVG(FIRE_SIZE) FROM Fires)"
    },
    {
        "question": "Find the fire causes where the number of fires is greater than the average number of fires across all causes.",
        "query": "SELECT STAT_CAUSE_DESCR FROM Fires GROUP BY STAT_CAUSE_DESCR HAVING COUNT(*) > (SELECT AVG(FIRE_SIZE) FROM Fires)"
    },
    {
        "question": "What are the different causes of fires and how many fires occurred due to each cause?",
        "query": "SELECT STAT_CAUSE_DESCR, COUNT(*) FROM Fires GROUP BY STAT_CAUSE_DESCR"
    },
    {
        "question": "What is the average fire size for each fire size class in the year 2005?",
        "query": "SELECT FIRE_SIZE_CLASS, AVG(FIRE_SIZE) FROM Fires WHERE FIRE_YEAR = 2005 GROUP BY FIRE_SIZE_CLASS"
    },
    {
        "question": "What are the names of all the tracks?",
        "query": "SELECT name FROM tracks;"
    },
    {
        "question": "What is the name and composer of the track with the longest duration?",
        "query": "SELECT name, composer FROM tracks ORDER BY milliseconds DESC LIMIT 1;"
    },
    {
        "question": "How many tracks are there in the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT COUNT(*) FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'For Those About To Rock We Salute You');"
    },
    {
        "question": "What is the total cost of all tracks in the 'Rock' genre?",
        "query": "SELECT SUM(unitprice) FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Rock');"
    },
    {
        "question": "List the albums by artists whose names start with 'A'.",
        "query": "SELECT T2.title FROM artists AS T1 INNER JOIN albums AS T2 ON T1.artistid = T2.artistid WHERE T1.name LIKE 'A%';"
    },
    {
        "question": "What is the average unit price of tracks in the 'Alternative & Punk' genre?",
        "query": "SELECT AVG(unitprice) FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Alternative & Punk');"
    },
    {
        "question": "Which album has the most tracks?",
        "query": "SELECT title FROM albums WHERE albumid = (SELECT albumid FROM tracks GROUP BY albumid ORDER BY COUNT(*) DESC LIMIT 1);"
    },
    {
        "question": "List the names of all customers who live in the USA.",
        "query": "SELECT FirstName, LastName FROM customers WHERE country = 'USA';"
    },
    {
        "question": "What is the total amount spent by each customer?",
        "query": "SELECT customerid, SUM(total) FROM invoices GROUP BY customerid;"
    },
    {
        "question": "Which customer has made the most purchases?",
        "query": "SELECT customerid FROM invoices GROUP BY customerid ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all employees and their respective titles.",
        "query": "SELECT FirstName, LastName, title FROM employees;"
    },
    {
        "question": "Which employee is responsible for the most customers?",
        "query": "SELECT SupportRepId FROM customers GROUP BY SupportRepId ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all playlists and the number of tracks in each playlist.",
        "query": "SELECT T1.Name, COUNT(*) FROM playlists AS T1 INNER JOIN playlist_tracks AS T2 ON T1.PlaylistId = T2.PlaylistId GROUP BY T1.Name;"
    },
    {
        "question": "What are the names of the tracks in the playlist 'Music'?",
        "query": "SELECT T3.name FROM playlists AS T1 INNER JOIN playlist_tracks AS T2 ON T1.PlaylistId = T2.PlaylistId INNER JOIN tracks AS T3 ON T2.TrackId = T3.TrackId WHERE T1.Name = 'Music';"
    },
    {
        "question": "List the names of all media types and their associated file extensions.",
        "query": "SELECT Name, extension FROM media_types;"
    },
    {
        "question": "What is the name and composer of the track with the shortest milliseconds?",
        "query": "SELECT name, composer FROM tracks ORDER BY milliseconds ASC LIMIT 1;"
    },
    {
        "question": "What are the names of the tracks that are longer than the average track length?",
        "query": "SELECT name FROM tracks WHERE milliseconds > (SELECT AVG(milliseconds) FROM tracks);"
    },
    {
        "question": "What is the total number of tracks composed by Johann Sebastian Bach?",
        "query": "SELECT COUNT(*) FROM tracks WHERE composer = 'Johann Sebastian Bach';"
    },
    {
        "question": "List the names of the tracks in the 'Rock' genre, ordered alphabetically.",
        "query": "SELECT name FROM tracks WHERE genreId = (SELECT genreId FROM genres WHERE name = 'Rock') ORDER BY name ASC;"
    },
    {
        "question": "What is the average unit price of tracks in the 'Jazz' genre?",
        "query": "SELECT AVG(unitprice) FROM tracks WHERE genreId = (SELECT genreId FROM genres WHERE name = 'Jazz');"
    },
    {
        "question": "What are the names of the top 5 most expensive tracks?",
        "query": "SELECT name FROM tracks ORDER BY unitprice DESC LIMIT 5;"
    },
    {
        "question": "List the names and composers of all tracks on the album 'Let There Be Rock'.",
        "query": "SELECT tracks.name, tracks.composer FROM tracks INNER JOIN albums ON tracks.albumId = albums.albumId WHERE albums.title = 'Let There Be Rock';"
    },
    {
        "question": "How many tracks are there in total in the database?",
        "query": "SELECT COUNT(*) FROM tracks;"
    },
    {
        "question": "List the names of all genres and the number of tracks in each genre.",
        "query": "SELECT genres.name, COUNT(tracks.trackId) FROM genres LEFT JOIN tracks ON genres.genreId = tracks.genreId GROUP BY genres.name;"
    },
    {
        "question": "What is the name of the genre with the fewest tracks?",
        "query": "SELECT genres.name FROM genres LEFT JOIN tracks ON genres.genreId = tracks.genreId GROUP BY genres.name ORDER BY COUNT(tracks.trackId) ASC LIMIT 1;"
    },
    {
        "question": "What is the average length (in milliseconds) of tracks in each genre?",
        "query": "SELECT genres.name, AVG(tracks.milliseconds) FROM genres LEFT JOIN tracks ON genres.genreId = tracks.genreId GROUP BY genres.name;"
    },
    {
        "question": "Find the names of all tracks that have a composer.",
        "query": "SELECT name FROM tracks WHERE composer IS NOT NULL;"
    },
    {
        "question": "What is the title of the album with the longest total track length?",
        "query": "SELECT albums.title FROM albums INNER JOIN tracks ON albums.albumId = tracks.albumId GROUP BY albums.albumId ORDER BY SUM(tracks.milliseconds) DESC LIMIT 1;"
    },
    {
        "question": "What is the total number of tracks in each playlist?",
        "query": "SELECT playlists.name, COUNT(playlist_tracks.track_id) FROM playlists INNER JOIN playlist_tracks ON playlists.id = playlist_tracks.playlist_id GROUP BY playlists.name;"
    },
    {
        "question": "What is the name of the playlist with the most tracks?",
        "query": "SELECT playlists.name FROM playlists INNER JOIN playlist_tracks ON playlists.id = playlist_tracks.playlist_id GROUP BY playlists.name ORDER BY COUNT(playlist_tracks.track_id) DESC LIMIT 1;"
    },
    {
        "question": "What are the names of the tracks that are in the playlist 'Brazilian Music'?",
        "query": "SELECT tracks.name FROM tracks INNER JOIN playlist_tracks ON tracks.id = playlist_tracks.track_id INNER JOIN playlists ON playlists.id = playlist_tracks.playlist_id WHERE playlists.name = 'Brazilian Music';"
    },
    {
        "question": "What is the total cost of all the tracks in the 'TV Shows' playlist?",
        "query": "SELECT SUM(tracks.unitprice) FROM tracks INNER JOIN playlist_tracks ON tracks.id = playlist_tracks.track_id INNER JOIN playlists ON playlists.id = playlist_tracks.playlist_id WHERE playlists.name = 'TV Shows';"
    },
    {
        "question": "List the name of the artists and the number of tracks they have composed, ordered from most composed to least.",
        "query": "SELECT composer, COUNT(*) AS num_tracks FROM tracks WHERE composer IS NOT NULL GROUP BY composer ORDER BY num_tracks DESC;"
    },
    {
        "question": "What are the names of the tracks that belong to the '90\u2019s Music' playlist and cost more than $0.99?",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN playlist_tracks AS T2 ON T1.id = T2.track_id INNER JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = '90\u2019s Music' AND T1.unitprice > 0.99;"
    },
    {
        "question": "Which playlist has the highest average track length (in milliseconds)?",
        "query": "SELECT T3.name FROM tracks AS T1 INNER JOIN playlist_tracks AS T2 ON T1.id = T2.track_id INNER JOIN playlists AS T3 ON T2.playlist_id = T3.id GROUP BY T3.name ORDER BY AVG(T1.milliseconds) DESC LIMIT 1;"
    },
    {
        "question": "What are the names of all the tracks on the album 'Let It Be'?",
        "query": "SELECT name FROM tracks WHERE album = 'Let It Be'"
    },
    {
        "question": "What is the total length of all the tracks on the album 'Abbey Road'?",
        "query": "SELECT SUM(milliseconds) FROM tracks WHERE album = 'Abbey Road'"
    },
    {
        "question": "List the albums released after 1970.",
        "query": "SELECT title FROM albums WHERE strftime('%Y', release_date) > '1970'"
    },
    {
        "question": "What is the average length of tracks on the 'White Album'?",
        "query": "SELECT AVG(milliseconds) FROM tracks WHERE album = 'White Album'"
    },
    {
        "question": "List the tracks composed by Lennon and McCartney.",
        "query": "SELECT name FROM tracks WHERE composer = 'Lennon-McCartney'"
    },
    {
        "question": "Which album has the longest track, and what is the name of that track?",
        "query": "SELECT albums.title, tracks.name FROM tracks INNER JOIN albums ON tracks.album = albums.title ORDER BY milliseconds DESC LIMIT 1"
    },
    {
        "question": "How many tracks are there on each album?",
        "query": "SELECT album, COUNT(*) FROM tracks GROUP BY album"
    },
    {
        "question": "List the albums and their release dates in chronological order.",
        "query": "SELECT title, release_date FROM albums ORDER BY release_date"
    },
    {
        "question": "What is the shortest track on the album 'Revolver'?",
        "query": "SELECT name FROM tracks WHERE album = 'Revolver' ORDER BY milliseconds ASC LIMIT 1"
    },
    {
        "question": "What are the names of the tracks on 'Sgt. Pepper\\'s Lonely Hearts Club Band' that are longer than 5 minutes?",
        "query": "SELECT name FROM tracks WHERE album = 'Sgt. Pepper\\'s Lonely Hearts Club Band' AND milliseconds > 300000"
    },
    {
        "question": "List the albums that have tracks composed by George Harrison.",
        "query": "SELECT DISTINCT album FROM tracks WHERE composer = 'George Harrison'"
    },
    {
        "question": "What is the total number of tracks in the database?",
        "query": "SELECT COUNT(*) FROM tracks"
    },
    {
        "question": "Find the album with the highest average track length.",
        "query": "SELECT album FROM tracks GROUP BY album ORDER BY AVG(milliseconds) DESC LIMIT 1"
    },
    {
        "question": "List the tracks on 'Abbey Road' in order of their appearance on the album (assuming track number corresponds to order).",
        "query": "SELECT name FROM tracks WHERE album = 'Abbey Road' ORDER BY track_number"
    },
    {
        "question": "How many albums were released in each decade?",
        "query": "SELECT strftime('%Y', release_date) / 10 * 10 AS decade, COUNT(*) FROM albums GROUP BY decade"
    },
    {
        "question": "What is the average milliseconds length of all tracks?",
        "query": "SELECT AVG(milliseconds) FROM tracks;"
    },
    {
        "question": "What is the name of the longest track?",
        "query": "SELECT name FROM tracks ORDER BY milliseconds DESC LIMIT 1;"
    },
    {
        "question": "What are the names of the tracks that are longer than 5 minutes (300000 milliseconds)?",
        "query": "SELECT name FROM tracks WHERE milliseconds > 300000;"
    },
    {
        "question": "What is the total length of all tracks in the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT SUM(T1.milliseconds) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T2.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "List the titles of the albums released after 2000.",
        "query": "SELECT title FROM albums WHERE strftime('%Y', SUBSTR(releasedate, 1, 4)) > '2000';"
    },
    {
        "question": "What is the name of the album with the shortest track?",
        "query": "SELECT T2.Title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.AlbumId = T2.AlbumId ORDER BY T1.Milliseconds ASC LIMIT 1;"
    },
    {
        "question": "List the names of all tracks in the 'Rock' genre.",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid INNER JOIN genres AS T3 ON T2.genreid = T3.genreid WHERE T3.name = 'Rock';"
    },
    {
        "question": "What is the total number of tracks for each genre?",
        "query": "SELECT T3.name, COUNT(T1.trackid) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid INNER JOIN genres AS T3 ON T2.genreid = T3.genreid GROUP BY T3.name;"
    },
    {
        "question": "What is the name and milliseconds of the track with the shortest duration?",
        "query": "SELECT name, milliseconds FROM tracks ORDER BY milliseconds ASC LIMIT 1;"
    },
    {
        "question": "What is the total price of all the tracks on the album 'Let There Be Rock'?",
        "query": "SELECT SUM(unitprice) FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'Let There Be Rock');"
    },
    {
        "question": "List the albums by AC/DC along with their total track count.",
        "query": "SELECT T2.title, COUNT(T1.trackid) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T2.artistid = (SELECT artistid FROM artists WHERE name = 'AC/DC') GROUP BY T2.title;"
    },
    {
        "question": "What is the average unit price of tracks in the Rock genre?",
        "query": "SELECT AVG(T1.unitprice) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid INNER JOIN genres AS T3 ON T2.genreid = T3.genreid WHERE T3.name = 'Rock';"
    },
    {
        "question": "What is the name of the most expensive track?",
        "query": "SELECT name FROM tracks ORDER BY unitprice DESC LIMIT 1;"
    },
    {
        "question": "What are the names of all tracks in the album with AlbumId 1?",
        "query": "SELECT name FROM tracks WHERE albumid = 1;"
    },
    {
        "question": "What is the name of the artist who has the most albums?",
        "query": "SELECT name FROM artists WHERE artistid = (SELECT artistid FROM albums GROUP BY artistid ORDER BY COUNT(*) DESC LIMIT 1);"
    },
    {
        "question": "List the names of all tracks and their corresponding album titles.",
        "query": "SELECT T1.name, T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid;"
    },
    {
        "question": "What are the names of the tracks that belong to the genre 'Metal'?",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T2.genreid = (SELECT genreid FROM genres WHERE name = 'Metal');"
    },
    {
        "question": "How many tracks are there for each genre?",
        "query": "SELECT T2.name, COUNT(T1.trackid) FROM tracks AS T1 INNER JOIN albums AS T3 ON T1.albumid = T3.albumid INNER JOIN genres AS T2 ON T3.genreid = T2.genreid GROUP BY T2.name;"
    },
    {
        "question": "What are the titles of the albums that have tracks priced higher than $0.99?",
        "query": "SELECT title FROM albums WHERE albumid IN (SELECT albumid FROM tracks WHERE unitprice > 0.99);"
    },
    {
        "question": "What is the average duration of tracks in the 'Rock' genre?",
        "query": "SELECT AVG(milliseconds) FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Rock');"
    },
    {
        "question": "List the titles of albums released after 2010.",
        "query": "SELECT title FROM albums WHERE strftime('%Y', releasedate) > '2010';"
    },
    {
        "question": "What is the total cost of all tracks purchased by the customer with the email 'luisg@embraer.com.br'?",
        "query": "SELECT SUM(unitprice) FROM invoice_items WHERE invoiceid IN (SELECT invoiceid FROM invoices WHERE customerid = (SELECT customerid FROM customers WHERE email = 'luisg@embraer.com.br'));"
    },
    {
        "question": "List the names of customers who have purchased tracks from the 'Alternative & Punk' genre.",
        "query": "SELECT T3.firstname, T3.lastname FROM genres AS T1 INNER JOIN tracks AS T2 ON T1.genreid = T2.genreid INNER JOIN invoice_items AS T3 ON T2.trackid = T3.trackid WHERE T1.name = 'Alternative & Punk' GROUP BY T3.customerid;"
    },
    {
        "question": "What is the total revenue generated from sales in the USA?",
        "query": "SELECT SUM(total) FROM invoices WHERE billingcountry = 'USA';"
    },
    {
        "question": "List the names of all playlists that contain the track 'Dazed and Confused'.",
        "query": "SELECT T2.name FROM playlist_track AS T1 INNER JOIN playlists AS T2 ON T1.playlistid = T2.playlistid WHERE T1.trackid = (SELECT trackid FROM tracks WHERE name = 'Dazed and Confused');"
    },
    {
        "question": "What is the average track density for all tracks?",
        "query": "SELECT AVG(density) FROM track"
    },
    {
        "question": "Which albums have a genre of 'Rock'?",
        "query": "SELECT title FROM album WHERE genre = 'Rock'"
    },
    {
        "question": "List all tracks from the album 'Californication'.",
        "query": "SELECT T2.name FROM album AS T1 INNER JOIN track AS T2 ON T1.albumid = T2.albumid WHERE T1.title = 'Californication'"
    },
    {
        "question": "What is the name of the artist who composed the track 'Otherside'?",
        "query": "SELECT T2.name FROM track AS T1 INNER JOIN artist AS T2 ON T1.artistid = T2.artistid WHERE T1.name = 'Otherside'"
    },
    {
        "question": "List the titles of all albums released after 2000.",
        "query": "SELECT title FROM album WHERE year > 2000"
    },
    {
        "question": "What is the total length of all tracks on the album 'Stadium Arcadium'?",
        "query": "SELECT SUM(milliseconds) FROM track AS T1 INNER JOIN album AS T2 ON T1.albumid = T2.albumid WHERE T2.title = 'Stadium Arcadium'"
    },
    {
        "question": "Which artist has composed the most tracks?",
        "query": "SELECT T2.name FROM track AS T1 INNER JOIN artist AS T2 ON T1.artistid = T2.artistid GROUP BY T2.artistid ORDER BY COUNT(T1.trackid) DESC LIMIT 1"
    },
    {
        "question": "List all tracks with a density greater than 0.8.",
        "query": "SELECT name FROM track WHERE density > 0.8"
    },
    {
        "question": "What is the title of the shortest track?",
        "query": "SELECT name FROM track ORDER BY milliseconds ASC LIMIT 1"
    },
    {
        "question": "Which album has the highest average track density?",
        "query": "SELECT T2.title FROM track AS T1 INNER JOIN album AS T2 ON T1.albumid = T2.albumid GROUP BY T2.albumid ORDER BY AVG(T1.density) DESC LIMIT 1"
    },
    {
        "question": "What are the names of all the tables in the Chinook database?",
        "query": "SELECT name FROM sqlite_master WHERE type='table';"
    },
    {
        "question": "How many customers are there in the Chinook database?",
        "query": "SELECT COUNT(*) FROM Customer;"
    },
    {
        "question": "What is the name and email address of the customer with CustomerId 1?",
        "query": "SELECT FirstName, LastName, Email FROM Customer WHERE CustomerId = 1;"
    },
    {
        "question": "What are the names of all the invoices for customer with CustomerId 5?",
        "query": "SELECT InvoiceId FROM Invoice WHERE CustomerId = 5;"
    },
    {
        "question": "What is the total amount spent by customer with CustomerId 10?",
        "query": "SELECT SUM(Total) FROM Invoice WHERE CustomerId = 10;"
    },
    {
        "question": "List all customers from Brazil.",
        "query": "SELECT * FROM Customer WHERE Country = 'Brazil';"
    },
    {
        "question": "What is the billing country for invoice with InvoiceId 100?",
        "query": "SELECT BillingCountry FROM Invoice WHERE InvoiceId = 100;"
    },
    {
        "question": "How many invoices were issued in 2010?",
        "query": "SELECT COUNT(*) FROM Invoice WHERE strftime('%Y', InvoiceDate) = '2010';"
    },
    {
        "question": "List the names of all tracks in the album 'Let There Be Rock'.",
        "query": "SELECT T1.Name FROM Track AS T1 INNER JOIN Album AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.Title = 'Let There Be Rock';"
    },
    {
        "question": "What is the name of the artist who recorded the track with TrackId 100?",
        "query": "SELECT T2.Name FROM Track AS T1 INNER JOIN Album AS T3 ON T1.AlbumId = T3.AlbumId INNER JOIN Artist AS T2 ON T3.ArtistId = T2.ArtistId WHERE T1.TrackId = 100;"
    },
    {
        "question": "What are the names of the tracks in the playlist 'Music'.",
        "query": "SELECT T3.Name FROM Playlist AS T1 INNER JOIN PlaylistTrack AS T2 ON T1.PlaylistId = T2.PlaylistId INNER JOIN Track AS T3 ON T2.TrackId = T3.TrackId WHERE T1.Name = 'Music';"
    },
    {
        "question": "How many tracks are in the '90s Music' playlist?",
        "query": "SELECT COUNT(*) FROM PlaylistTrack AS T1 INNER JOIN Playlist AS T2 ON T1.PlaylistId = T2.PlaylistId WHERE T2.Name = '90s Music';"
    },
    {
        "question": "List the names of all the playlists that contain the track with TrackId 50.",
        "query": "SELECT T2.Name FROM PlaylistTrack AS T1 INNER JOIN Playlist AS T2 ON T1.PlaylistId = T2.PlaylistId WHERE T1.TrackId = 50;"
    },
    {
        "question": "What is the total length (in milliseconds) of all tracks in the 'Brazilian Music' playlist?",
        "query": "SELECT SUM(T3.Milliseconds) FROM Playlist AS T1 INNER JOIN PlaylistTrack AS T2 ON T1.PlaylistId = T2.PlaylistId INNER JOIN Track AS T3 ON T2.TrackId = T3.TrackId WHERE T1.Name = 'Brazilian Music';"
    },
    {
        "question": "List the names of all the albums by AC/DC.",
        "query": "SELECT T1.Title FROM Album AS T1 INNER JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = 'AC/DC';"
    },
    {
        "question": "What is the total number of tracks sold by AC/DC?",
        "query": "SELECT SUM(T2.Quantity) FROM InvoiceLine AS T2 INNER JOIN Track as T3 ON T2.TrackId = T3.TrackId INNER JOIN Album AS T1 ON T3.AlbumId = T1.AlbumId INNER JOIN Artist AS T4 ON T1.ArtistId = T4.ArtistId WHERE T4.Name = 'AC/DC';"
    },
    {
        "question": "What are the names of all the available playlists?",
        "query": "SELECT name FROM playlists;"
    },
    {
        "question": "How many tracks are there in the 'Grunge' playlist?",
        "query": "SELECT COUNT(*) FROM playlist_tracks WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Grunge');"
    },
    {
        "question": "What is the total length of the 'Classical' playlist in milliseconds?",
        "query": "SELECT SUM(milliseconds) FROM tracks WHERE track_id IN (SELECT track_id FROM playlist_tracks WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Classical'));"
    },
    {
        "question": "List the names of all tracks in the 'Rock' playlist, ordered alphabetically.",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id WHERE T1.playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Rock') ORDER BY T2.name;"
    },
    {
        "question": "What is the average bitrate of tracks in the 'Jazz' playlist?",
        "query": "SELECT AVG(bytes) FROM tracks WHERE track_id IN (SELECT track_id FROM playlist_tracks WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Jazz'));"
    },
    {
        "question": "Find the name of the playlist with the longest total track length.",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN playlists AS T2 ON T1.playlist_id = T2.playlist_id INNER JOIN tracks AS T3 ON T1.track_id = T3.track_id GROUP BY T2.name ORDER BY SUM(T3.milliseconds) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all playlists that contain tracks composed by 'AC/DC'.",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN playlist_tracks AS T3 ON T1.track_id = T3.track_id INNER JOIN playlists AS T2 ON T3.playlist_id = T2.playlist_id WHERE T1.composer = 'AC/DC' GROUP BY T2.name;"
    },
    {
        "question": "Which playlist has the most tracks?",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN playlists AS T2 ON T1.playlist_id = T2.playlist_id GROUP BY T1.playlist_id ORDER BY COUNT(T1.track_id) DESC LIMIT 1;"
    },
    {
        "question": "What is the title of the shortest track in the database?",
        "query": "SELECT name FROM tracks ORDER BY milliseconds ASC LIMIT 1;"
    },
    {
        "question": "What are the names and descriptions of all tracks?",
        "query": "SELECT name, description FROM tracks;"
    },
    {
        "question": "Find the title and duration of the longest track.",
        "query": "SELECT title, duration FROM tracks ORDER BY duration DESC LIMIT 1;"
    },
    {
        "question": "List all tracks that are longer than 5 minutes (300 seconds).",
        "query": "SELECT title FROM tracks WHERE duration > 300;"
    },
    {
        "question": "What is the average duration of tracks in the album 'Californication'?",
        "query": "SELECT AVG(T2.duration) FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T1.title = 'Californication';"
    },
    {
        "question": "List the titles of all albums released after the year 2000.",
        "query": "SELECT title FROM albums WHERE released > 2000;"
    },
    {
        "question": "Find the name of the artist who composed the track 'Californication'.",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN artists AS T2 ON T1.composer_id = T2.id WHERE T1.title = 'Californication';"
    },
    {
        "question": "List all tracks composed by John Frusciante.",
        "query": "SELECT T1.title FROM tracks AS T1 INNER JOIN artists AS T2 ON T1.composer_id = T2.id WHERE T2.name = 'John Frusciante';"
    },
    {
        "question": "How many tracks are on the album 'Stadium Arcadium'?",
        "query": "SELECT COUNT(*) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.album_id = T2.id WHERE T2.title = 'Stadium Arcadium';"
    },
    {
        "question": "What is the total duration of all tracks on the album 'By the Way'?",
        "query": "SELECT SUM(T1.duration) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.album_id = T2.id WHERE T2.title = 'By the Way';"
    },
    {
        "question": "List the names of all artists who have composed tracks for the Red Hot Chili Peppers.",
        "query": "SELECT T2.name FROM artists AS T1 INNER JOIN tracks AS T2 ON T1.id = T2.composer_id WHERE T1.name = 'Red Hot Chili Peppers';"
    },
    {
        "question": "How many columns does the sqlite_master table have?",
        "query": "SELECT COUNT(*) FROM pragma_table_info('sqlite_master');"
    },
    {
        "question": "What are the names and types of the columns in the sqlite_master table?",
        "query": "PRAGMA table_info(sqlite_master);"
    },
    {
        "question": "Show the SQL schema for the sqlite_temp_master table.",
        "query": "SELECT sql FROM sqlite_master WHERE name='sqlite_temp_master';"
    },
    {
        "question": "Are there any indexes on the sqlite_master table?",
        "query": "SELECT name FROM sqlite_master WHERE type='index' AND tbl_name='sqlite_master';"
    },
    {
        "question": "List all the tables created by the user.",
        "query": "SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';"
    },
    {
        "question": "Find all tables that contain the word 'temp' in their name.",
        "query": "SELECT name FROM sqlite_master WHERE type='table' AND name LIKE '%temp%';"
    },
    {
        "question": "Show the creation statement for the table named 'my_table' (replace 'my_table' with a real table name if you have one).",
        "query": "SELECT sql FROM sqlite_master WHERE type='table' AND name='my_table';"
    },
    {
        "question": "List all views in the database.",
        "query": "SELECT name FROM sqlite_master WHERE type='view';"
    },
    {
        "question": "List all triggers in the database.",
        "query": "SELECT name FROM sqlite_master WHERE type='trigger';"
    },
    {
        "question": "What are the titles of the albums released in 2011?",
        "query": "SELECT title FROM albums WHERE strftime('%Y', release_date) = '2011';"
    },
    {
        "question": "List the names of all customers and their countries.",
        "query": "SELECT first_name, last_name, country FROM customers;"
    },
    {
        "question": "Which artist has the most albums?",
        "query": "SELECT artist_name FROM artists GROUP BY artist_name ORDER BY COUNT(artist_id) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all tracks on the album 'For Those About To Rock We Salute You'.",
        "query": "SELECT t.name FROM tracks t JOIN albums a ON t.album_id = a.album_id WHERE a.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "What is the total number of tracks sold?",
        "query": "SELECT SUM(quantity) FROM invoice_items;"
    },
    {
        "question": "Which customer has purchased the most tracks?",
        "query": "SELECT c.first_name, c.last_name FROM customers c JOIN invoices i ON c.customer_id = i.customer_id JOIN invoice_items ii ON i.invoice_id = ii.invoice_id GROUP BY c.customer_id ORDER BY SUM(ii.quantity) DESC LIMIT 1;"
    },
    {
        "question": "What are the names of all tracks in the Chinook database?",
        "query": "SELECT Name FROM tracks;"
    },
    {
        "question": "List all albums and their corresponding artists.",
        "query": "SELECT al.Title, ar.Name FROM albums AS al JOIN artists AS ar ON al.ArtistId = ar.ArtistId;"
    },
    {
        "question": "Which customers have spent the most money in the Chinook store?",
        "query": "SELECT c.FirstName, c.LastName, SUM(i.Total) AS TotalSpent FROM customers AS c JOIN invoices AS i ON c.CustomerId = i.CustomerId GROUP BY c.CustomerId ORDER BY TotalSpent DESC LIMIT 5;"
    },
    {
        "question": "List all playlists and the number of tracks they contain.",
        "query": "SELECT p.Name, COUNT(pt.TrackId) FROM playlists AS p JOIN playlist_track AS pt ON p.PlaylistId = pt.PlaylistId GROUP BY p.PlaylistId;"
    },
    {
        "question": "What are the top 5 most popular genres in terms of number of tracks?",
        "query": "SELECT g.Name, COUNT(t.TrackId) AS TrackCount FROM genres AS g JOIN tracks AS t ON g.GenreId = t.GenreId GROUP BY g.GenreId ORDER BY TrackCount DESC LIMIT 5;"
    },
    {
        "question": "List all employees and their support representatives.",
        "query": "SELECT e.FirstName, e.LastName, s.FirstName, s.LastName FROM employees AS e LEFT JOIN employees AS s ON e.ReportsTo = s.EmployeeId;"
    },
    {
        "question": "Which countries have the most customers?",
        "query": "SELECT Country, COUNT(*) AS CustomerCount FROM customers GROUP BY Country ORDER BY CustomerCount DESC;"
    },
    {
        "question": "What is the average price of a track in the Chinook store?",
        "query": "SELECT AVG(UnitPrice) FROM tracks;"
    },
    {
        "question": "How many tracks are there on the album 'Abbey Road'?",
        "query": "SELECT COUNT(*) FROM tracks WHERE album = 'Abbey Road'"
    },
    {
        "question": "What is the total duration of all tracks on the 'White Album'?",
        "query": "SELECT SUM(milliseconds) FROM tracks WHERE album = 'White Album'"
    },
    {
        "question": "List the names of all albums released after 1968.",
        "query": "SELECT title FROM albums WHERE year > 1968"
    },
    {
        "question": "What is the average duration of tracks on the album 'Sgt. Pepper's Lonely Hearts Club Band'?",
        "query": "SELECT AVG(milliseconds) FROM tracks WHERE album = 'Sgt. Pepper\\'s Lonely Hearts Club Band'"
    },
    {
        "question": "List the titles of albums with a total track duration greater than 2500000 milliseconds.",
        "query": "SELECT title FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.title = T2.album GROUP BY T1.title HAVING SUM(T2.milliseconds) > 2500000"
    },
    {
        "question": "What is the shortest track on the 'Revolver' album?",
        "query": "SELECT MIN(milliseconds) FROM tracks WHERE album = 'Revolver'"
    },
    {
        "question": "What is the name of the longest track on each album?",
        "query": "SELECT album, name FROM tracks GROUP BY album HAVING milliseconds = MAX(milliseconds)"
    },
    {
        "question": "List all the countries where Chinook has customers.",
        "query": "SELECT DISTINCT Country FROM Customer;"
    },
    {
        "question": "Which customer has spent the most money?",
        "query": "SELECT c.FirstName, c.LastName FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId GROUP BY c.CustomerId ORDER BY SUM(i.Total) DESC LIMIT 1;"
    },
    {
        "question": "List all the tracks purchased by the customer with CustomerId 5.",
        "query": "SELECT t.Name FROM Track t JOIN InvoiceLine il ON t.TrackId = il.TrackId JOIN Invoice i ON il.InvoiceId = i.InvoiceId WHERE i.CustomerId = 5;"
    },
    {
        "question": "What is the most popular genre?",
        "query": "SELECT g.Name FROM Genre g JOIN Track t ON g.GenreId = t.GenreId JOIN InvoiceLine il ON t.TrackId = il.TrackId GROUP BY g.GenreId ORDER BY COUNT(il.TrackId) DESC LIMIT 1;"
    },
    {
        "question": "List the top 5 most purchased tracks.",
        "query": "SELECT t.Name FROM Track t JOIN InvoiceLine il ON t.TrackId = il.TrackId GROUP BY t.TrackId ORDER BY COUNT(il.TrackId) DESC LIMIT 5;"
    },
    {
        "question": "Which employee has supported the most customers?",
        "query": "SELECT e.FirstName, e.LastName FROM Employee e JOIN Customer c ON e.EmployeeId = c.SupportRepId GROUP BY e.EmployeeId ORDER BY COUNT(c.CustomerId) DESC LIMIT 1;"
    },
    {
        "question": "List all the playlists created by each customer.",
        "query": "SELECT c.FirstName, c.LastName, p.Name FROM Customer c JOIN Playlist p ON c.CustomerId = p.CustomerId;"
    },
    {
        "question": "How many tracks are in each playlist?",
        "query": "SELECT p.Name, COUNT(pt.TrackId) AS TrackCount FROM Playlist p JOIN PlaylistTrack pt ON p.PlaylistId = pt.PlaylistId GROUP BY p.PlaylistId;"
    },
    {
        "question": "What is the total duration of each playlist in milliseconds?",
        "query": "SELECT p.Name, SUM(t.Milliseconds) AS TotalDuration FROM Playlist p JOIN PlaylistTrack pt ON p.PlaylistId = pt.PlaylistId JOIN Track t ON pt.TrackId = t.TrackId GROUP BY p.PlaylistId;"
    },
    {
        "question": "List the albums of the artist 'AC/DC'.",
        "query": "SELECT a.Title FROM Album a JOIN Artist ar ON a.ArtistId = ar.ArtistId WHERE ar.Name = 'AC/DC';"
    },
    {
        "question": "What is the average track length of each album?",
        "query": "SELECT a.Title, AVG(t.Milliseconds) AS AverageTrackLength FROM Album a JOIN Track t ON a.AlbumId = t.AlbumId GROUP BY a.AlbumId;"
    },
    {
        "question": "What is the data type of the 'name' column in the sqlite_master table?",
        "query": "SELECT type FROM pragma_table_info('sqlite_master') WHERE name = 'name';"
    },
    {
        "question": "Show the SQL schema for the sqlite_master table.",
        "query": "SELECT sql FROM sqlite_master WHERE type='table' AND name='sqlite_master';"
    },
    {
        "question": "What are the names of the indexes in the database?",
        "query": "SELECT name FROM sqlite_master WHERE type='index';"
    },
    {
        "question": "What triggers are defined on the sqlite_master table?",
        "query": "SELECT name FROM sqlite_master WHERE type='trigger' AND tbl_name='sqlite_master';"
    },
    {
        "question": "Show the SQL for the trigger named 'trig_sqlite_master_update'.",
        "query": "SELECT sql FROM sqlite_master WHERE type='trigger' AND name='trig_sqlite_master_update';"
    },
    {
        "question": "What is the name of the customer with CustomerId 1?",
        "query": "SELECT FirstName, LastName FROM Customer WHERE CustomerId = 1;"
    },
    {
        "question": "What are the names of all the customers in the USA?",
        "query": "SELECT FirstName, LastName FROM Customer WHERE Country = 'USA';"
    },
    {
        "question": "What are the names and email addresses of all the customers who have a SupportRepId?",
        "query": "SELECT FirstName, LastName, Email FROM Customer WHERE SupportRepId IS NOT NULL;"
    },
    {
        "question": "List all the tracks purchased by the customer with CustomerId 1.",
        "query": "SELECT t.Name FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId JOIN InvoiceLine il ON i.InvoiceId = il.InvoiceId JOIN Track t ON il.TrackId = t.TrackId WHERE c.CustomerId = 1;"
    },
    {
        "question": "Which artist has the most tracks in the database?",
        "query": "SELECT ar.Name FROM Artist ar JOIN Album al ON ar.ArtistId = al.ArtistId JOIN Track t ON al.AlbumId = t.AlbumId GROUP BY ar.ArtistId ORDER BY COUNT(t.TrackId) DESC LIMIT 1;"
    },
    {
        "question": "What are the names of all the playlists created by the customer with CustomerId 1?",
        "query": "SELECT Name FROM Playlist WHERE CustomerId = 1;"
    },
    {
        "question": "What is the total length of the playlist '90\u2019s Music' in milliseconds?",
        "query": "SELECT SUM(t.Milliseconds) FROM PlaylistTrack pt JOIN Track t ON pt.TrackId = t.TrackId JOIN Playlist p ON pt.PlaylistId = p.PlaylistId WHERE p.Name = '90\u2019s Music';"
    },
    {
        "question": "What are the names of the top 5 most popular genres based on the number of tracks?",
        "query": "SELECT g.Name FROM Genre g JOIN Track t ON g.GenreId = t.GenreId GROUP BY g.GenreId ORDER BY COUNT(t.TrackId) DESC LIMIT 5;"
    },
    {
        "question": "List all the albums by the artist 'AC/DC'.",
        "query": "SELECT al.Title FROM Album al JOIN Artist ar ON al.ArtistId = ar.ArtistId WHERE ar.Name = 'AC/DC';"
    },
    {
        "question": "What is the average price of a track?",
        "query": "SELECT AVG(UnitPrice) FROM Track;"
    },
    {
        "question": "How many invoices were generated in 2009?",
        "query": "SELECT COUNT(*) FROM Invoice WHERE InvoiceDate LIKE '2009%';"
    },
    {
        "question": "What is the name of the track with the longest duration?",
        "query": "SELECT Name FROM Track ORDER BY Milliseconds DESC LIMIT 1;"
    },
    {
        "question": "List the names of all employees and their titles.",
        "query": "SELECT FirstName, LastName, Title FROM Employee;"
    },
    {
        "question": "List the names of all customers who have purchased tracks from the genre 'Rock'.",
        "query": "SELECT DISTINCT c.FirstName, c.LastName FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId JOIN InvoiceLine il ON i.InvoiceId = il.InvoiceId JOIN Track t ON il.TrackId = t.TrackId JOIN Genre g ON t.GenreId = g.GenreId WHERE g.Name = 'Rock';"
    },
    {
        "question": "What are the names of the tracks that cost more than $0.99?",
        "query": "SELECT name FROM tracks WHERE unitprice > 0.99;"
    },
    {
        "question": "List the albums by artists whose name starts with 'AC'?",
        "query": "SELECT T2.title FROM artists AS T1 INNER JOIN albums AS T2 ON T1.artistid = T2.artistid WHERE T1.name LIKE 'AC%';"
    },
    {
        "question": "What are the names of the tracks in the album with the shortest title?",
        "query": "SELECT name FROM tracks WHERE albumid = (SELECT albumid FROM albums ORDER BY LENGTH(title) LIMIT 1);"
    },
    {
        "question": "List the names of all artists and the number of albums they have released.",
        "query": "SELECT T1.name, COUNT(T2.albumid) FROM artists AS T1 LEFT JOIN albums AS T2 ON T1.artistid = T2.artistid GROUP BY T1.name;"
    },
    {
        "question": "What is the average unit price of tracks composed by Angus Young?",
        "query": "SELECT AVG(unitprice) FROM tracks WHERE composer = 'Angus Young';"
    },
    {
        "question": "List the names of all albums and the number of tracks they contain.",
        "query": "SELECT T2.title, COUNT(T1.trackid) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid GROUP BY T2.title;"
    },
    {
        "question": "What is the total cost of all tracks in the database?",
        "query": "SELECT SUM(unitprice) FROM tracks;"
    },
    {
        "question": "List the names of albums with more than 10 tracks.",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid GROUP BY T2.title HAVING COUNT(T1.trackid) > 10;"
    },
    {
        "question": "What is the name of the shortest track composed by 'Aerosmith'?",
        "query": "SELECT name FROM tracks WHERE composer = 'Aerosmith' ORDER BY milliseconds ASC LIMIT 1;"
    },
    {
        "question": "What are the column names and data types of the 'employees' table?",
        "query": "PRAGMA table_info(employees);"
    },
    {
        "question": "Find the first name, last name, and email of all employees in the 'employees' table.",
        "query": "SELECT first_name, last_name, email FROM employees;"
    },
    {
        "question": "List all unique job IDs from the 'employees' table.",
        "query": "SELECT DISTINCT job_id FROM employees;"
    },
    {
        "question": "How many employees are in each department?",
        "query": "SELECT department_id, COUNT(*) FROM employees GROUP BY department_id;"
    },
    {
        "question": "Find the department name and the number of employees in each department, ordered by the number of employees in descending order.",
        "query": "SELECT d.department_name, COUNT(e.employee_id) AS num_employees FROM employees e JOIN departments d ON e.department_id = d.department_id GROUP BY d.department_name ORDER BY num_employees DESC;"
    },
    {
        "question": "What is the highest salary in the company?",
        "query": "SELECT MAX(salary) FROM employees;"
    },
    {
        "question": "Which employee(s) has the highest salary?",
        "query": "SELECT first_name, last_name FROM employees WHERE salary = (SELECT MAX(salary) FROM employees);"
    },
    {
        "question": "Find the average salary for each job title.",
        "query": "SELECT job_id, AVG(salary) FROM employees GROUP BY job_id;"
    },
    {
        "question": "List the names of all employees who work in the 'Sales' department.",
        "query": "SELECT e.first_name, e.last_name FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE d.department_name = 'Sales';"
    },
    {
        "question": "Show the first name, last name, and salary of all employees whose salary is greater than $10,000.",
        "query": "SELECT first_name, last_name, salary FROM employees WHERE salary > 10000;"
    },
    {
        "question": "List all employees who were hired in the year 2000.",
        "query": "SELECT first_name, last_name FROM employees WHERE strftime('%Y', hire_date) = '2000';"
    },
    {
        "question": "Find the names of all departments located in the 'United States'.",
        "query": "SELECT department_name FROM departments WHERE location_id IN (SELECT location_id FROM locations WHERE country_id = 'US');"
    },
    {
        "question": "Show the department name and location city for all departments.",
        "query": "SELECT d.department_name, l.city FROM departments d JOIN locations l ON d.location_id = l.location_id;"
    },
    {
        "question": "List the job ID and title for all jobs.",
        "query": "SELECT job_id, job_title FROM jobs;"
    },
    {
        "question": "Find the number of jobs that have a minimum salary greater than $5,000.",
        "query": "SELECT COUNT(*) FROM jobs WHERE min_salary > 5000;"
    },
    {
        "question": "List all countries and their regions.",
        "query": "SELECT country_name, region_id FROM countries;"
    },
    {
        "question": "How many countries are in each region?",
        "query": "SELECT region_id, COUNT(*) FROM countries GROUP BY region_id;"
    },
    {
        "question": "List the names of all regions.",
        "query": "SELECT region_name FROM regions;"
    },
    {
        "question": "What is the composer of the track 'For Those About To Rock (We Salute You)'?",
        "query": "SELECT composer FROM tracks WHERE name = 'For Those About To Rock (We Salute You)';"
    },
    {
        "question": "What is the total length of all the tracks in the album 'Let There Be Rock'?",
        "query": "SELECT SUM(milliseconds) FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'Let There Be Rock');"
    },
    {
        "question": "What are the names of the albums by AC/DC that have an average track length greater than 4 minutes?",
        "query": "SELECT title FROM albums WHERE artistid = (SELECT artistid FROM artists WHERE name = 'AC/DC') GROUP BY albumid HAVING AVG(milliseconds) > 240000;"
    },
    {
        "question": "What are the names and unit prices of all the tracks purchased by the customer with the email 'luisrojas@yahoo.cl'?",
        "query": "SELECT T2.name, T1.unitprice FROM invoice_items AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid WHERE T1.invoiceid IN (SELECT invoiceid FROM invoices WHERE customerid = (SELECT customerid FROM customers WHERE email = 'luisrojas@yahoo.cl'));"
    },
    {
        "question": "How many invoices were generated in 2010?",
        "query": "SELECT COUNT(*) FROM invoices WHERE STRFTIME('%Y', invoicedate) = '2010';"
    },
    {
        "question": "List the names of the customers and the total amount they have spent on music.",
        "query": "SELECT T2.firstname, T2.lastname, SUM(T1.total) FROM invoices AS T1 INNER JOIN customers AS T2 ON T1.customerid = T2.customerid GROUP BY T1.customerid;"
    },
    {
        "question": "List the names of the artists and the number of albums they have released.",
        "query": "SELECT T1.name, COUNT(T2.albumid) FROM artists AS T1 INNER JOIN albums AS T2 ON T1.artistid = T2.artistid GROUP BY T1.artistid;"
    },
    {
        "question": "What are the names of the tracks that belong to the 'Rock' genre?",
        "query": "SELECT name FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Rock');"
    },
    {
        "question": "List the names of the employees and their respective titles.",
        "query": "SELECT firstname, lastname, title FROM employees;"
    },
    {
        "question": "What is the total number of customers in each country?",
        "query": "SELECT country, COUNT(*) FROM customers GROUP BY country;"
    },
    {
        "question": "What are the names of all customers?",
        "query": "SELECT CustomerName FROM Customers"
    },
    {
        "question": "List all orders placed by customer 'Ernst Handel'.",
        "query": "SELECT * FROM Orders WHERE CustomerID = (SELECT CustomerID FROM Customers WHERE CustomerName = 'Ernst Handel')"
    },
    {
        "question": "What is the total value of orders shipped to 'Germany'?",
        "query": "SELECT SUM(Price * Quantity) FROM OrderDetails INNER JOIN Products ON OrderDetails.ProductID = Products.ProductID INNER JOIN Orders ON OrderDetails.OrderID = Orders.OrderID INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID WHERE ShipCountry = 'Germany'"
    },
    {
        "question": "Which products have been ordered by 'Alfreds Futterkiste'?",
        "query": "SELECT ProductName FROM Products WHERE ProductID IN (SELECT ProductID FROM OrderDetails WHERE OrderID IN (SELECT OrderID FROM Orders WHERE CustomerID = (SELECT CustomerID FROM Customers WHERE CustomerName = 'Alfreds Futterkiste')))"
    },
    {
        "question": "How many different customers are there?",
        "query": "SELECT COUNT(DISTINCT CustomerID) FROM Customers"
    },
    {
        "question": "List the customer names and their contact titles for all customers in the city of 'Berlin'.",
        "query": "SELECT CustomerName, ContactTitle FROM Customers WHERE City = 'Berlin'"
    },
    {
        "question": "What is the average price of products supplied by 'Exotic Liquids'?",
        "query": "SELECT AVG(Price) FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Exotic Liquids')"
    },
    {
        "question": "List all products with a price greater than $20.",
        "query": "SELECT ProductName FROM Products WHERE Price > 20"
    },
    {
        "question": "What is the name of the supplier for 'Camembert Pierrot'?",
        "query": "SELECT SupplierName FROM Suppliers WHERE SupplierID = (SELECT SupplierID FROM Products WHERE ProductName = 'Camembert Pierrot')"
    },
    {
        "question": "List all orders shipped in 1997.",
        "query": "SELECT OrderID FROM Orders WHERE strftime('%Y', OrderDate) = '1997'"
    },
    {
        "question": "Which employees handled orders shipped to 'Brazil'?",
        "query": "SELECT FirstName, LastName FROM Employees WHERE EmployeeID IN (SELECT EmployeeID FROM Orders WHERE ShipCountry = 'Brazil')"
    },
    {
        "question": "Find the total quantity of 'Chai' ordered.",
        "query": "SELECT SUM(Quantity) FROM OrderDetails WHERE ProductID = (SELECT ProductID FROM Products WHERE ProductName = 'Chai')"
    },
    {
        "question": "How many tracks are there in the 'Rock' genre?",
        "query": "SELECT COUNT(*) FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Rock');"
    },
    {
        "question": "What is the total duration of all tracks in the database?",
        "query": "SELECT SUM(milliseconds) FROM tracks;"
    },
    {
        "question": "What are the names of the artists whose tracks are in the 'Alternative & Punk' genre?",
        "query": "SELECT T3.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid INNER JOIN artists AS T3 ON T2.artistid = T3.artistid WHERE T1.genreid = (SELECT genreid FROM genres WHERE name = 'Alternative & Punk');"
    },
    {
        "question": "What is the name of the track with the smallest file size?",
        "query": "SELECT name FROM tracks ORDER BY bytes ASC LIMIT 1;"
    },
    {
        "question": "What are the titles of the albums by AC/DC?",
        "query": "SELECT title FROM albums WHERE artistid = (SELECT artistid FROM artists WHERE name = 'AC/DC');"
    },
    {
        "question": "What is the average price of tracks in the 'Rock' genre?",
        "query": "SELECT AVG(unitprice) FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Rock');"
    },
    {
        "question": "What is the title of the album with the highest unit price?",
        "query": "SELECT title FROM albums ORDER BY unitprice DESC LIMIT 1;"
    },
    {
        "question": "What is the total cost of all tracks purchased by the customer with the email address 'luisrojas@yahoo.cl'?",
        "query": "SELECT SUM(unitprice) FROM invoice_items WHERE invoiceid IN (SELECT invoiceid FROM invoices WHERE customerid = (SELECT customerid FROM customers WHERE email = 'luisrojas@yahoo.cl'));"
    },
    {
        "question": "List the names of customers who have purchased tracks from the album 'Let There Be Rock'.",
        "query": "SELECT T3.firstname, T3.lastname FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid INNER JOIN invoice_items AS T4 ON T2.trackid = T4.trackid INNER JOIN invoices AS T5 ON T4.invoiceid = T5.invoiceid INNER JOIN customers AS T3 ON T5.customerid = T3.customerid WHERE T1.title = 'Let There Be Rock';"
    },
    {
        "question": "Which album has the highest average track price?",
        "query": "SELECT T1.title FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid INNER JOIN invoice_items AS T3 ON T2.trackid = T3.trackid GROUP BY T1.title ORDER BY AVG(T3.unitprice) DESC LIMIT 1;"
    },
    {
        "question": "What is the name of the artist who composed the track 'Dazed and Confused'?",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN artists AS T2 ON T1.composer = T2.name WHERE T1.name = 'Dazed and Confused';"
    },
    {
        "question": "What is the shortest track (in milliseconds)?",
        "query": "SELECT MIN(milliseconds) FROM tracks;"
    },
    {
        "question": "What is the name of the genre with the highest number of tracks?",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid GROUP BY T2.name ORDER BY COUNT(T1.trackid) DESC LIMIT 1;"
    },
    {
        "question": "List the names and composers of all tracks in the 'Classical' genre.",
        "query": "SELECT T1.name, T1.composer FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Classical';"
    },
    {
        "question": "What is the total cost of all tracks purchased by customer with customerid 1?",
        "query": "SELECT SUM(T3.unitprice) FROM customers AS T1 INNER JOIN invoices AS T2 ON T1.customerid = T2.customerid INNER JOIN invoicelines AS T3 ON T2.invoiceid = T3.invoiceid WHERE T1.customerid = 1;"
    },
    {
        "question": "What is the average price of tracks in the 'Jazz' genre?",
        "query": "SELECT AVG(T1.unitprice) FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Jazz';"
    },
    {
        "question": "Which customer has spent the most money on tracks?",
        "query": "SELECT T1.customerid FROM customers AS T1 INNER JOIN invoices AS T2 ON T1.customerid = T2.customerid INNER JOIN invoicelines AS T3 ON T2.invoiceid = T3.invoiceid GROUP BY T1.customerid ORDER BY SUM(T3.unitprice) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all tracks composed by 'Johann Sebastian Bach'.",
        "query": "SELECT name FROM tracks WHERE composer = 'Johann Sebastian Bach';"
    },
    {
        "question": "List the names of all the media types.",
        "query": "SELECT name FROM mediatypes;"
    },
    {
        "question": "How many tracks are there for each media type?",
        "query": "SELECT T2.name, COUNT(T1.trackid) FROM tracks AS T1 INNER JOIN mediatypes AS T2 ON T1.mediatypeid = T2.mediatypeid GROUP BY T2.name;"
    },
    {
        "question": "List the tracks that are part of the 'Grunge' playlist.",
        "query": "SELECT T3.name FROM playlists AS T1 INNER JOIN playlisttracks AS T2 ON T1.playlistid = T2.playlistid INNER JOIN tracks AS T3 ON T2.trackid = T3.trackid WHERE T1.name = 'Grunge';"
    },
    {
        "question": "What are the names of the top 10 most popular genres based on the number of tracks?",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN genres as T2 ON T1.genreid = T2.genreid GROUP BY T2.name ORDER BY COUNT(T1.trackid) DESC LIMIT 10;"
    },
    {
        "question": "List the names of the albums and the number of tracks they contain, ordered by the number of tracks in descending order.",
        "query": "SELECT T2.title, COUNT(T1.trackid) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid GROUP BY T2.title ORDER BY COUNT(T1.trackid) DESC;"
    },
    {
        "question": "What is the average duration of tracks in the album 'Let There Be Rock'?",
        "query": "SELECT AVG(milliseconds) FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'Let There Be Rock');"
    },
    {
        "question": "What is the name of the shortest track in the album 'Big Ones'?",
        "query": "SELECT name FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'Big Ones') ORDER BY milliseconds ASC LIMIT 1;"
    },
    {
        "question": "What are the names of the tracks that cost more than 1 dollar?",
        "query": "SELECT name FROM tracks WHERE unitprice > 1;"
    },
    {
        "question": "List the titles of albums that have tracks longer than 5 minutes (300000 milliseconds).",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T1.milliseconds > 300000;"
    },
    {
        "question": "What is the total cost of all tracks in the 'Alternative & Punk' genre?",
        "query": "SELECT SUM(T1.unitprice) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid INNER JOIN genres AS T3 ON T2.genreid = T3.genreid WHERE T3.name = 'Alternative & Punk';"
    },
    {
        "question": "What is the average duration of tracks composed by Angus Young?",
        "query": "SELECT AVG(milliseconds) FROM tracks WHERE composer = 'Angus Young';"
    },
    {
        "question": "What is the name of the artist who released the album 'Big Ones'?",
        "query": "SELECT name FROM artists WHERE artistid = (SELECT artistid FROM albums WHERE title = 'Big Ones');"
    },
    {
        "question": "How many tracks are there in each album?",
        "query": "SELECT albums.title, COUNT(tracks.trackid) FROM albums INNER JOIN tracks ON albums.albumid = tracks.albumid GROUP BY albums.title;"
    },
    {
        "question": "List the names of all tracks, their composers, and the titles of the albums they belong to.",
        "query": "SELECT tracks.name, tracks.composer, albums.title FROM tracks INNER JOIN albums ON tracks.albumid = albums.albumid;"
    },
    {
        "question": "Show the SQL schema for the table named 'sqlite_master'.",
        "query": "SELECT sql FROM sqlite_master WHERE name = 'sqlite_master';"
    },
    {
        "question": "How many tables are there in the database?",
        "query": "SELECT COUNT(*) FROM sqlite_master WHERE type='table';"
    },
    {
        "question": "List all the indexes in the database and their associated tables.",
        "query": "SELECT name, tbl_name FROM sqlite_master WHERE type='index';"
    },
    {
        "question": "List all the tables that have a primary key defined.",
        "query": "SELECT name FROM sqlite_master WHERE type='table' AND sql LIKE '%PRIMARY KEY%';"
    },
    {
        "question": "Find all tables related to 'users' (case-insensitive search).",
        "query": "SELECT name FROM sqlite_master WHERE type='table' AND name LIKE '%users%' COLLATE NOCASE;"
    },
    {
        "question": "List the creation statements of all tables, excluding the internal SQLite tables.",
        "query": "SELECT sql FROM sqlite_master WHERE type = 'table' AND name NOT LIKE 'sqlite_%';"
    },
    {
        "question": "What is the email address of the customer with ID 1?",
        "query": "SELECT email FROM customers WHERE id = 1"
    },
    {
        "question": "What are the names and email addresses of all customers?",
        "query": "SELECT name, email FROM customers"
    },
    {
        "question": "What are the order IDs for all orders placed by customer with ID 1?",
        "query": "SELECT id FROM orders WHERE customer_id = 1"
    },
    {
        "question": "What is the total amount for the order with ID 1?",
        "query": "SELECT total_amount FROM orders WHERE id = 1"
    },
    {
        "question": "What are the order dates and total amounts for all orders?",
        "query": "SELECT order_date, total_amount FROM orders"
    },
    {
        "question": "What are the names of the products included in order with ID 1?",
        "query": "SELECT T2.name FROM order_items AS T1 INNER JOIN products AS T2 ON T1.product_id = T2.id WHERE T1.order_id = 1"
    },
    {
        "question": "What is the quantity of product with ID 1 included in order with ID 1?",
        "query": "SELECT quantity FROM order_items WHERE order_id = 1 AND product_id = 1"
    },
    {
        "question": "What are the names and prices of all products?",
        "query": "SELECT name, price FROM products"
    },
    {
        "question": "What is the price of the product with ID 1?",
        "query": "SELECT price FROM products WHERE id = 1"
    },
    {
        "question": "List all orders with their corresponding customer names.",
        "query": "SELECT T1.id, T2.name FROM orders AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.id"
    },
    {
        "question": "List all products purchased by customer 'John Doe'.",
        "query": "SELECT T3.name FROM customers AS T1 INNER JOIN orders AS T2 ON T1.id = T2.customer_id INNER JOIN order_items AS T3 ON T2.id = T3.order_id INNER JOIN products AS T4 ON T3.product_id = T4.id WHERE T1.name = 'John Doe'"
    },
    {
        "question": "What is the most expensive product purchased by each customer?",
        "query": "SELECT T2.customer_id, MAX(T4.price) FROM order_items AS T1 INNER JOIN orders AS T2 ON T1.order_id = T2.id INNER JOIN products AS T4 ON T1.product_id = T4.id GROUP BY T2.customer_id"
    },
    {
        "question": "List the customers who have placed orders containing more than 2 different products.",
        "query": "SELECT T2.name FROM orders AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.id WHERE T1.id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(DISTINCT product_id) > 2)"
    },
    {
        "question": "List the albums with the total track length (in milliseconds) for each album.",
        "query": "SELECT T2.title, SUM(T1.milliseconds) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid GROUP BY T2.albumid;"
    },
    {
        "question": "What is the name of the album with the largest number of tracks?",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid GROUP BY T1.albumid ORDER BY COUNT(T1.trackid) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all the artists and their albums.",
        "query": "SELECT T2.name, T1.title FROM albums AS T1 INNER JOIN artists AS T2 ON T1.artistid = T2.artistid;"
    },
    {
        "question": "What is the average duration of tracks in the 'Jazz' genre?",
        "query": "SELECT AVG(milliseconds) FROM tracks WHERE genreId = (SELECT genreId FROM genres WHERE name = 'Jazz');"
    },
    {
        "question": "List the names of all tracks that cost more than $0.99.",
        "query": "SELECT name FROM tracks WHERE unitPrice > 0.99;"
    },
    {
        "question": "What is the total cost of all tracks in the 'Classical' genre?",
        "query": "SELECT SUM(unitPrice) FROM tracks WHERE genreId = (SELECT genreId FROM genres WHERE name = 'Classical');"
    },
    {
        "question": "What is the name of the genre with the highest average track price?",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreId = T2.genreId GROUP BY T1.genreId ORDER BY AVG(T1.unitPrice) DESC LIMIT 1;"
    },
    {
        "question": "What is the average unit price of all tracks?",
        "query": "SELECT AVG(unitprice) FROM tracks;"
    },
    {
        "question": "What are the names of the tracks that belong to the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T2.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "What are the names of the tracks composed by Angus Young?",
        "query": "SELECT name FROM tracks WHERE composer = 'Angus Young';"
    },
    {
        "question": "What is the title of the album with the most tracks?",
        "query": "SELECT title FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid GROUP BY title ORDER BY COUNT(T2.trackid) DESC LIMIT 1;"
    },
    {
        "question": "What is the total length of the album 'Let There Be Rock' in seconds?",
        "query": "SELECT SUM(milliseconds) / 1000 FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'Let There Be Rock');"
    },
    {
        "question": "List the albums by AC/DC ordered by release year.",
        "query": "SELECT title FROM albums WHERE artistid = (SELECT artistid FROM artists WHERE name = 'AC/DC') ORDER BY year;"
    },
    {
        "question": "List all the genres and the number of tracks in each genre.",
        "query": "SELECT T2.name, COUNT(*) FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid GROUP BY T2.name;"
    },
    {
        "question": "What is the total cost to purchase all tracks from the album 'Big Ones'?",
        "query": "SELECT SUM(unitprice) FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'Big Ones');"
    },
    {
        "question": "Find the average rating for movies directed by Christopher Nolan.",
        "query": "SELECT AVG(rating) FROM ratings WHERE movieId IN (SELECT movieId FROM movies WHERE director = 'Christopher Nolan')"
    },
    {
        "question": "List the titles of all movies rated higher than 4.5.",
        "query": "SELECT title FROM movies WHERE movieId IN (SELECT movieId FROM ratings WHERE rating > 4.5)"
    },
    {
        "question": "What is the highest rating received by a movie directed by Quentin Tarantino?",
        "query": "SELECT MAX(rating) FROM ratings WHERE movieId IN (SELECT movieId FROM movies WHERE director = 'Quentin Tarantino')"
    },
    {
        "question": "List all movies released in 2020 along with their ratings.",
        "query": "SELECT T1.title, T2.rating FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movieId = T2.movieId WHERE T1.year = 2020"
    },
    {
        "question": "Find the average rating for movies released after 2015.",
        "query": "SELECT AVG(rating) FROM ratings WHERE movieId IN (SELECT movieId FROM movies WHERE year > 2015)"
    },
    {
        "question": "List the directors of movies with an average rating greater than 4.",
        "query": "SELECT director FROM movies WHERE movieId IN (SELECT movieId FROM ratings GROUP BY movieId HAVING AVG(rating) > 4)"
    },
    {
        "question": "What is the title of the movie with the lowest rating?",
        "query": "SELECT title FROM movies WHERE movieId IN (SELECT movieId FROM ratings ORDER BY rating ASC LIMIT 1)"
    },
    {
        "question": "List the titles and ratings of all movies starring Leonardo DiCaprio.",
        "query": "SELECT T1.title, T2.rating FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movieId = T2.movieId WHERE T1.movieId IN (SELECT movieId FROM stars WHERE star = 'Leonardo DiCaprio')"
    },
    {
        "question": "Find the number of movies rated 5.",
        "query": "SELECT COUNT(*) FROM ratings WHERE rating = 5"
    },
    {
        "question": "List all the stars who have appeared in movies directed by Martin Scorsese.",
        "query": "SELECT star FROM stars WHERE movieId IN (SELECT movieId FROM movies WHERE director = 'Martin Scorsese')"
    },
    {
        "question": "List all tracks that are not part of any playlist.",
        "query": "SELECT name FROM tracks WHERE track_id NOT IN (SELECT track_id FROM playlist_tracks);"
    },
    {
        "question": "List the names of all playlists that contain tracks longer than 5 minutes (300000 milliseconds).",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN playlists AS T2 ON T1.playlist_id = T2.playlist_id INNER JOIN tracks AS T3 ON T1.track_id = T3.track_id WHERE T3.milliseconds > 300000 GROUP BY T2.name;"
    },
    {
        "question": "List the titles of albums with more than 10 tracks.",
        "query": "SELECT title FROM albums WHERE albumid IN (SELECT albumid FROM tracks GROUP BY albumid HAVING COUNT(*) > 10);"
    },
    {
        "question": "Find the names of all tracks that belong to albums released after 2010.",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE STRFTIME('%Y', T2.releasedate) > '2010';"
    },
    {
        "question": "What is the name of the shortest track on the album 'Let There Be Rock'?",
        "query": "SELECT name FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'Let There Be Rock') ORDER BY milliseconds ASC LIMIT 1;"
    },
    {
        "question": "List the names of all tracks that are not in the 'Rock' genre.",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid INNER JOIN genres AS T3 ON T2.genreid = T3.genreid WHERE T3.name != 'Rock';"
    },
    {
        "question": "List the names of all albums and their corresponding artists.",
        "query": "SELECT albums.title, artists.name FROM albums JOIN artists ON albums.artistid = artists.artistid;"
    },
    {
        "question": "What are the titles of the albums sold by the employee with the first name 'Jane'?",
        "query": "SELECT T3.title FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeid = T2.supportrepid INNER JOIN invoices AS T3 ON T2.customerid = T3.customerid WHERE T1.firstname = 'Jane';"
    },
    {
        "question": "How many customers are from Brazil?",
        "query": "SELECT COUNT(*) FROM customers WHERE country = 'Brazil';"
    },
    {
        "question": "What is the total revenue generated from invoices in 2010?",
        "query": "SELECT SUM(total) FROM invoices WHERE STRFTIME('%Y', invoicedate) = '2010';"
    },
    {
        "question": "List the names of customers and the total amount they have spent on invoices.",
        "query": "SELECT customers.firstname, customers.lastname, SUM(invoices.total) FROM customers JOIN invoices ON customers.customerid = invoices.customerid GROUP BY customers.customerid;"
    },
    {
        "question": "What are the names of the tracks in the 'Grunge' playlist?",
        "query": "SELECT tracks.name FROM tracks INNER JOIN playlist_tracks ON tracks.id = playlist_tracks.track_id INNER JOIN playlists ON playlists.id = playlist_tracks.playlist_id WHERE playlists.name = 'Grunge';"
    },
    {
        "question": "What is the total cost of all the tracks in the 'Classical' playlist?",
        "query": "SELECT SUM(tracks.unit_price) FROM tracks INNER JOIN playlist_tracks ON tracks.id = playlist_tracks.track_id INNER JOIN playlists ON playlists.id = playlist_tracks.playlist_id WHERE playlists.name = 'Classical';"
    },
    {
        "question": "Which artists have composed tracks for the 'TV Shows' playlist?",
        "query": "SELECT DISTINCT artists.name FROM artists INNER JOIN albums ON artists.id = albums.artist_id INNER JOIN tracks ON albums.id = tracks.album_id INNER JOIN playlist_tracks ON tracks.id = playlist_tracks.track_id INNER JOIN playlists ON playlists.id = playlist_tracks.playlist_id WHERE playlists.name = 'TV Shows';"
    },
    {
        "question": "What are the names of the albums that contain tracks from the '90s Music' playlist?",
        "query": "SELECT DISTINCT albums.title FROM albums INNER JOIN tracks ON albums.id = tracks.album_id INNER JOIN playlist_tracks ON tracks.id = playlist_tracks.track_id INNER JOIN playlists ON playlists.id = playlist_tracks.playlist_id WHERE playlists.name = '90s Music';"
    },
    {
        "question": "What is the average unit price of tracks by 'AC/DC'?",
        "query": "SELECT AVG(tracks.unit_price) FROM tracks INNER JOIN albums ON tracks.album_id = albums.id INNER JOIN artists ON albums.artist_id = artists.id WHERE artists.name = 'AC/DC';"
    },
    {
        "question": "What is the total number of tracks in each genre?",
        "query": "SELECT genres.name, COUNT(tracks.track_id) FROM tracks INNER JOIN genres ON tracks.genre_id = genres.genre_id GROUP BY genres.name;"
    },
    {
        "question": "List the names of the genres that have more than 10 tracks.",
        "query": "SELECT genres.name FROM tracks INNER JOIN genres ON tracks.genre_id = genres.genre_id GROUP BY genres.name HAVING COUNT(tracks.track_id) > 10;"
    },
    {
        "question": "What is the name and unit price of the most expensive track?",
        "query": "SELECT name, unitprice FROM tracks ORDER BY unitprice DESC LIMIT 1;"
    },
    {
        "question": "Find the name and artist of all tracks in the album 'Let It Be'.",
        "query": "SELECT tracks.name, artists.name FROM tracks INNER JOIN albums ON tracks.albumid = albums.albumid INNER JOIN artists ON albums.artistid = artists.artistid WHERE albums.title = 'Let It Be'"
    },
    {
        "question": "How many tracks are there in the album 'Let It Be'?",
        "query": "SELECT COUNT(*) FROM tracks INNER JOIN albums ON tracks.albumid = albums.albumid WHERE albums.title = 'Let It Be'"
    },
    {
        "question": "List the names of all albums by the artist 'AC/DC'.",
        "query": "SELECT title FROM albums INNER JOIN artists ON albums.artistid = artists.artistid WHERE artists.name = 'AC/DC'"
    },
    {
        "question": "What is the total length of all tracks in the 'Rock' genre?",
        "query": "SELECT SUM(milliseconds) FROM tracks INNER JOIN genres ON tracks.genreid = genres.genreid WHERE genres.name = 'Rock'"
    },
    {
        "question": "Find the name of the longest track.",
        "query": "SELECT name FROM tracks ORDER BY milliseconds DESC LIMIT 1"
    },
    {
        "question": "List the names of all customers from Brazil.",
        "query": "SELECT FirstName, LastName FROM customers WHERE Country = 'Brazil'"
    },
    {
        "question": "What is the total amount spent by the customer with the email 'luisg@embraer.com.br'?",
        "query": "SELECT SUM(Total) FROM invoices WHERE CustomerId = (SELECT CustomerId FROM customers WHERE Email = 'luisg@embraer.com.br')"
    },
    {
        "question": "List the names of all tracks purchased by the customer with CustomerId 1.",
        "query": "SELECT T3.name FROM customers AS T1 INNER JOIN invoices AS T2 ON T1.CustomerId = T2.CustomerId INNER JOIN invoicelines AS T3 ON T2.InvoiceId = T3.InvoiceId INNER JOIN tracks AS T4 ON T3.TrackId = T4.TrackId WHERE T1.CustomerId = 1"
    },
    {
        "question": "Which genre is the most popular (purchased the most)?",
        "query": "SELECT T2.name FROM invoicelines AS T1 INNER JOIN tracks AS T3 ON T1.TrackId = T3.TrackId INNER JOIN genres AS T2 ON T3.GenreId = T2.GenreId GROUP BY T2.name ORDER BY SUM(T1.Quantity) DESC LIMIT 1"
    },
    {
        "question": "Find the names of all playlists that contain the track 'Dazed and Confused'.",
        "query": "SELECT playlists.name FROM playlists INNER JOIN playlisttracks ON playlists.playlistid = playlisttracks.playlistid INNER JOIN tracks ON playlisttracks.trackid = tracks.trackid WHERE tracks.name = 'Dazed and Confused'"
    },
    {
        "question": "How many playlists are there in the database?",
        "query": "SELECT COUNT(*) FROM playlists"
    },
    {
        "question": "List the names of all media types.",
        "query": "SELECT name FROM mediatypes"
    },
    {
        "question": "Find the names of all employees who support customers in the USA.",
        "query": "SELECT FirstName, LastName FROM employees WHERE EmployeeId IN (SELECT SupportRepId FROM customers WHERE country = 'USA')"
    },
    {
        "question": "What is the name and composer of the track with ID 1?",
        "query": "SELECT name, composer FROM tracks WHERE trackid = 1;"
    },
    {
        "question": "What is the total length of all tracks in the album 'Let There Be Rock'?",
        "query": "SELECT SUM(milliseconds) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T2.title = 'Let There Be Rock';"
    },
    {
        "question": "Which albums have tracks longer than 6 minutes (360000 milliseconds)?",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T1.milliseconds > 360000 GROUP BY T2.title;"
    },
    {
        "question": "What is the average length of tracks in the 'Rock' genre?",
        "query": "SELECT AVG(T1.milliseconds) FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Rock';"
    },
    {
        "question": "List the titles of albums released after 1980.",
        "query": "SELECT title FROM albums WHERE strftime('%Y', releasedate) > '1980';"
    },
    {
        "question": "List the names and unit prices of all tracks in the 'Metal' genre.",
        "query": "SELECT T1.name, T1.unitprice FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Metal';"
    },
    {
        "question": "List all customers from Canada.",
        "query": "SELECT * FROM Customer WHERE Country = 'Canada';"
    },
    {
        "question": "List all invoices for customer with CustomerId 5.",
        "query": "SELECT * FROM Invoice WHERE CustomerId = 5;"
    },
    {
        "question": "What is the total revenue generated by the Chinook store?",
        "query": "SELECT SUM(Total) FROM Invoice;"
    },
    {
        "question": "List all tracks in the album 'For Those About To Rock We Salute You'.",
        "query": "SELECT T1.Name FROM Track AS T1 INNER JOIN Album AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.Title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "List the names of all playlists created by the customer with CustomerId 10.",
        "query": "SELECT Name FROM Playlist WHERE CustomerId = 10;"
    },
    {
        "question": "List all genres and their associated track counts.",
        "query": "SELECT GenreId, Name, TrackCount FROM Genre;"
    },
    {
        "question": "Who is the manager of the Sales Support Agent?",
        "query": "SELECT T2.FirstName, T2.LastName FROM Employee AS T1 INNER JOIN Employee AS T2 ON T1.ReportsTo = T2.EmployeeId WHERE T1.Title = 'Sales Support Agent';"
    },
    {
        "question": "List all customers who have purchased tracks in the Metal genre.",
        "query": "SELECT DISTINCT T3.FirstName, T3.LastName FROM Track AS T1 INNER JOIN InvoiceLine AS T2 ON T1.TrackId = T2.TrackId INNER JOIN Invoice AS T3 ON T2.InvoiceId = T3.InvoiceId INNER JOIN Genre AS T4 ON T1.GenreId = T4.GenreId WHERE T4.Name = 'Metal';"
    },
    {
        "question": "What are the names of the tracks in the playlist 'Brazilian Music'?",
        "query": "SELECT T2.Name FROM PlaylistTrack AS T1 INNER JOIN Track AS T2 ON T1.TrackId = T2.TrackId INNER JOIN Playlist AS T3 ON T1.PlaylistId = T3.PlaylistId WHERE T3.Name = 'Brazilian Music';"
    },
    {
        "question": "Which album has the longest average track length?",
        "query": "SELECT AlbumId, Title from Album ORDER BY AverageTrackLength DESC LIMIT 1;"
    },
    {
        "question": "List the names of all the playlists and the number of tracks in each playlist.",
        "query": "SELECT playlists.name, COUNT(playlist_tracks.trackid) FROM playlists INNER JOIN playlist_tracks ON playlists.playlistid = playlist_tracks.playlistid GROUP BY playlists.name;"
    },
    {
        "question": "What are the names of the tracks that are not included in any playlist?",
        "query": "SELECT name FROM tracks WHERE trackid NOT IN (SELECT trackid FROM playlist_tracks);"
    },
    {
        "question": "What is the total cost of all the tracks in the 'Classical' genre?",
        "query": "SELECT SUM(unitprice) FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Classical');"
    },
    {
        "question": "List the names of the artists and the number of albums they have.",
        "query": "SELECT artists.name, COUNT(albums.albumid) FROM artists INNER JOIN albums ON artists.artistid = albums.artistid GROUP BY artists.name;"
    },
    {
        "question": "List the names of the customers and their countries.",
        "query": "SELECT firstname, lastname, country FROM customers;"
    },
    {
        "question": "What are the names of the tracks purchased by the customer 'Helena Hol\u00fd'?",
        "query": "SELECT T3.name FROM customers AS T1 INNER JOIN invoices AS T2 ON T1.customerid = T2.customerid INNER JOIN invoice_items AS T3 ON T2.invoiceid = T3.invoiceid INNER JOIN tracks as T4 ON T3.trackid = T4.trackid WHERE T1.firstname = 'Helena' AND T1.lastname = 'Hol\u00fd';"
    },
    {
        "question": "What is the total revenue generated from the 'Rock' genre?",
        "query": "SELECT SUM(T2.unitprice) FROM tracks AS T1 INNER JOIN invoice_items AS T2 ON T1.trackid = T2.trackid WHERE T1.genreid = (SELECT genreid FROM genres WHERE name = 'Rock');"
    },
    {
        "question": "What is the name of the employee who supports the most customers?",
        "query": "SELECT T2.firstname, T2.lastname FROM customers AS T1 INNER JOIN employees AS T2 ON T1.supportrepid = T2.employeeid GROUP BY T2.employeeid ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all the genres and the number of tracks in each genre.",
        "query": "SELECT genres.name, COUNT(tracks.trackid) FROM genres INNER JOIN tracks ON genres.genreid = tracks.genreid GROUP BY genres.name;"
    },
    {
        "question": "Find the name and genre of all tracks longer than 3 minutes.",
        "query": "SELECT name, genre FROM tracks WHERE milliseconds > 180000"
    },
    {
        "question": "List the names of all albums released after 2010, sorted by title.",
        "query": "SELECT title FROM albums WHERE strftime('%Y', ReleaseDate) > '2010' ORDER BY title"
    },
    {
        "question": "Which artist has the most albums in the database?",
        "query": "SELECT ArtistId FROM albums GROUP BY ArtistId ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "Find the total sales value for all tracks in the 'Pop' genre.",
        "query": "SELECT SUM(UnitPrice * Quantity) FROM invoice_items WHERE TrackId IN (SELECT TrackId FROM tracks WHERE genre = 'Pop')"
    },
    {
        "question": "List the names of customers who have purchased tracks from the 'Jazz' genre.",
        "query": "SELECT T3.FirstName, T3.LastName FROM tracks AS T1 INNER JOIN invoice_items AS T2 ON T1.TrackId = T2.TrackId INNER JOIN invoices AS T4 ON T2.InvoiceId = T4.InvoiceId INNER JOIN customers AS T3 ON T4.CustomerId = T3.CustomerId WHERE T1.Genre = 'Jazz'"
    },
    {
        "question": "Which album has the highest unit price?",
        "query": "SELECT title FROM albums ORDER BY UnitPrice DESC LIMIT 1"
    },
    {
        "question": "Find the names of all playlists that contain the track 'Enter Sandman'.",
        "query": "SELECT T2.Name FROM playlist_track AS T1 INNER JOIN playlists AS T2 ON T1.PlaylistId = T2.PlaylistId INNER JOIN tracks AS T3 ON T1.TrackId = T3.TrackId WHERE T3.Name = 'Enter Sandman'"
    },
    {
        "question": "List the names of all customers and their respective countries.",
        "query": "SELECT FirstName, LastName, Country FROM customers"
    },
    {
        "question": "What is the name of the artist who composed the track with the longest duration?",
        "query": "SELECT T2.Name FROM tracks AS T1 INNER JOIN artists AS T2 ON T1.ArtistId = T2.ArtistId ORDER BY T1.Milliseconds DESC LIMIT 1"
    },
    {
        "question": "List the titles of all albums by the artist 'AC/DC'.",
        "query": "SELECT T1.Title FROM albums AS T1 INNER JOIN artists AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = 'AC/DC'"
    },
    {
        "question": "How many customers are from the USA?",
        "query": "SELECT COUNT(*) FROM customers WHERE Country = 'USA'"
    },
    {
        "question": "What is the total value of all invoices in the database?",
        "query": "SELECT SUM(Total) FROM invoices"
    },
    {
        "question": "What are the names of the tracks that belong to the album 'Let There Be Rock'?",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T2.title = 'Let There Be Rock';"
    },
    {
        "question": "List the titles of albums released after 2000.",
        "query": "SELECT title FROM albums WHERE strftime('%Y', released) > '2000';"
    },
    {
        "question": "What is the total cost of all tracks purchased by the customer with the email 'luisrojas@yahoo.cl'?",
        "query": "SELECT SUM(T2.unitprice) FROM customers AS T1 INNER JOIN invoice_items AS T2 ON T1.customerid = T2.customerid WHERE T1.email = 'luisrojas@yahoo.cl';"
    },
    {
        "question": "List the names of all customers who live in Brazil.",
        "query": "SELECT firstname, lastname FROM customers WHERE country = 'Brazil';"
    },
    {
        "question": "What is the total number of invoices generated in 2010?",
        "query": "SELECT COUNT(*) FROM invoices WHERE strftime('%Y', invoicedate) = '2010';"
    },
    {
        "question": "List the names of all employees along with their respective department names.",
        "query": "SELECT employees.name, departments.name FROM employees INNER JOIN departments ON employees.department_id = departments.id;"
    },
    {
        "question": "Find the name and salary of the employee with the highest salary.",
        "query": "SELECT name, salary FROM employees ORDER BY salary DESC LIMIT 1;"
    },
    {
        "question": "What is the average salary of employees in the 'Sales' department?",
        "query": "SELECT AVG(salary) FROM employees WHERE department_id = (SELECT id FROM departments WHERE name = 'Sales');"
    },
    {
        "question": "List the names of departments that have no employees assigned to them.",
        "query": "SELECT name FROM departments WHERE id NOT IN (SELECT department_id FROM employees);"
    },
    {
        "question": "Find the names of all employees who earn more than the average salary of their department.",
        "query": "SELECT name FROM employees AS T1 INNER JOIN (SELECT department_id, AVG(salary) AS avg_salary FROM employees GROUP BY department_id) AS T2 ON T1.department_id = T2.department_id WHERE T1.salary > T2.avg_salary;"
    },
    {
        "question": "List the names of employees and their salaries in descending order of salary.",
        "query": "SELECT name, salary FROM employees ORDER BY salary DESC;"
    },
    {
        "question": "Which department has the highest total salary expenditure?",
        "query": "SELECT T2.name FROM employees AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.id GROUP BY T2.name ORDER BY SUM(T1.salary) DESC LIMIT 1;"
    },
    {
        "question": "List the names of employees who work in the same department as 'John Doe'.",
        "query": "SELECT name FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE name = 'John Doe') AND name != 'John Doe';"
    },
    {
        "question": "List the names of the albums and the artists who created them, ordered alphabetically by artist name.",
        "query": "SELECT albums.title, artists.name FROM albums JOIN artists ON albums.artistid = artists.artistid ORDER BY artists.name;"
    },
    {
        "question": "What is the total number of tracks purchased by each customer?",
        "query": "SELECT customers.firstname, customers.lastname, COUNT(invoicelines.trackid) AS total_tracks_purchased FROM customers JOIN invoices ON customers.customerid = invoices.customerid JOIN invoicelines ON invoices.invoiceid = invoicelines.invoiceid GROUP BY customers.customerid;"
    },
    {
        "question": "What is the average unit price of tracks in the 'Rock' genre?",
        "query": "SELECT AVG(tracks.unitprice) FROM tracks JOIN genres ON tracks.genreid = genres.genreid WHERE genres.name = 'Rock';"
    },
    {
        "question": "List the names and email addresses of customers who have purchased tracks from the 'Alternative & Punk' genre.",
        "query": "SELECT DISTINCT customers.firstname, customers.lastname, customers.email FROM customers JOIN invoices ON customers.customerid = invoices.customerid JOIN invoicelines ON invoices.invoiceid = invoicelines.invoiceid JOIN tracks ON invoicelines.trackid = tracks.trackid JOIN genres ON tracks.genreid = genres.genreid WHERE genres.name = 'Alternative & Punk';"
    },
    {
        "question": "What is the total revenue generated from each genre?",
        "query": "SELECT genres.name, SUM(invoicelines.unitprice * invoicelines.quantity) AS total_revenue FROM genres JOIN tracks ON genres.genreid = tracks.genreid JOIN invoicelines ON tracks.trackid = invoicelines.trackid GROUP BY genres.name;"
    },
    {
        "question": "List the names of customers who have made the highest total purchase amount.",
        "query": "SELECT customers.firstname, customers.lastname FROM customers JOIN invoices ON customers.customerid = invoices.customerid GROUP BY customers.customerid ORDER BY SUM(invoices.total) DESC LIMIT 1;"
    },
    {
        "question": "What is the name of the album with the longest track?",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid ORDER BY T1.milliseconds DESC LIMIT 1;"
    },
    {
        "question": "How many tracks are there in the album 'Let There Be Rock'?",
        "query": "SELECT COUNT(*) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T2.title = 'Let There Be Rock';"
    },
    {
        "question": "What are the titles of the albums that have tracks longer than 6 minutes?",
        "query": "SELECT DISTINCT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T1.milliseconds > 360000;"
    },
    {
        "question": "What are the names of the tracks that cost more than $1?",
        "query": "SELECT name FROM tracks WHERE unitprice > 1.0;"
    },
    {
        "question": "What are the names of the albums by 'Iron Maiden'?",
        "query": "SELECT title FROM albums INNER JOIN artists ON albums.artistid = artists.artistid WHERE artists.name = 'Iron Maiden';"
    },
    {
        "question": "What is the total number of tracks on the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT COUNT(*) FROM tracks INNER JOIN albums ON tracks.albumid = albums.albumid WHERE albums.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "What are the names of the tracks on the album with the highest unit price?",
        "query": "SELECT tracks.name FROM tracks INNER JOIN albums ON tracks.albumid = albums.albumid ORDER BY albums.unitprice DESC LIMIT 1;"
    },
    {
        "question": "List the names of customers who live in the USA.",
        "query": "SELECT firstname, lastname FROM customers WHERE country = 'USA';"
    },
    {
        "question": "What is the email address of the customer with the highest support rep id?",
        "query": "SELECT email FROM customers ORDER BY supportrepid DESC LIMIT 1;"
    },
    {
        "question": "List all the invoices from the year 2010.",
        "query": "SELECT * FROM Invoice WHERE InvoiceDate LIKE '2010%';"
    },
    {
        "question": "Which artist has the most tracks?",
        "query": "SELECT Artist.Name FROM Artist JOIN Album ON Artist.ArtistId = Album.ArtistId JOIN Track ON Album.AlbumId = Track.AlbumId GROUP BY Artist.Name ORDER BY COUNT(Track.TrackId) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all rock albums.",
        "query": "SELECT Album.Title FROM Album JOIN Genre ON Album.GenreId = Genre.GenreId WHERE Genre.Name = 'Rock';"
    },
    {
        "question": "What is the average length of a track in milliseconds?",
        "query": "SELECT AVG(Milliseconds) FROM Track;"
    },
    {
        "question": "List all the customers who live in the USA.",
        "query": "SELECT * FROM Customer WHERE Country = 'USA';"
    },
    {
        "question": "List all the tracks from the album 'For Those About To Rock We Salute You'.",
        "query": "SELECT Track.Name FROM Track JOIN Album ON Track.AlbumId = Album.AlbumId WHERE Album.Title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "List all the invoices with a billing address in Brazil.",
        "query": "SELECT * FROM Invoice WHERE BillingCountry = 'Brazil';"
    },
    {
        "question": "What is the total revenue generated by sales of the album 'Let There Be Rock'?",
        "query": "SELECT SUM(il.UnitPrice * il.Quantity) FROM InvoiceLine AS il JOIN Track AS t ON il.TrackId = t.TrackId JOIN Album AS a ON t.AlbumId = a.AlbumId WHERE a.Title = 'Let There Be Rock';"
    },
    {
        "question": "List the names of all the playlists that contain the track 'Back In Black'.",
        "query": "SELECT p.Name FROM Playlist AS p JOIN PlaylistTrack AS pt ON p.PlaylistId = pt.PlaylistId JOIN Track AS t ON pt.TrackId = t.TrackId WHERE t.Name = 'Back In Black';"
    },
    {
        "question": "Find the titles of the playlists that contain the track 'Enter Sandman'.",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN playlists AS T2 ON T1.playlist_id = T2.playlist_id WHERE T1.track_id = (SELECT track_id FROM tracks WHERE name = 'Enter Sandman');"
    },
    {
        "question": "What is the name of the longest track in the database, and what playlist is it in?",
        "query": "SELECT T1.name, T3.name FROM tracks AS T1 INNER JOIN playlist_tracks AS T2 ON T1.track_id = T2.track_id INNER JOIN playlists AS T3 ON T2.playlist_id = T3.playlist_id ORDER BY T1.milliseconds DESC LIMIT 1;"
    },
    {
        "question": "List the names of all playlists that have more than 10 tracks.",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN playlists AS T2 ON T1.playlist_id = T2.playlist_id GROUP BY T1.playlist_id HAVING COUNT(*) > 10;"
    },
    {
        "question": "What is the total length of the album 'For Those About To Rock We Salute You' in milliseconds?",
        "query": "SELECT SUM(milliseconds) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T2.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "How many tracks are there in the album 'Big Ones'?",
        "query": "SELECT COUNT(*) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T2.title = 'Big Ones';"
    },
    {
        "question": "What is the average bytes of the tracks composed by Angus Young?",
        "query": "SELECT AVG(bytes) FROM tracks WHERE composer = 'Angus Young';"
    },
    {
        "question": "What are the names of the tracks that cost more than 0.99 dollars and are longer than 300000 milliseconds?",
        "query": "SELECT name FROM tracks WHERE unitprice > 0.99 AND milliseconds > 300000;"
    },
    {
        "question": "What is the contact name for the customer 'Alfreds Futterkiste'?",
        "query": "SELECT ContactName FROM Customers WHERE CustomerName = 'Alfreds Futterkiste'"
    },
    {
        "question": "List all orders placed by the customer with CustomerID 'ALFKI'.",
        "query": "SELECT * FROM Orders WHERE CustomerID = 'ALFKI'"
    },
    {
        "question": "What are the names of the products supplied by the supplier 'Exotic Liquids'?",
        "query": "SELECT ProductName FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Exotic Liquids')"
    },
    {
        "question": "List all orders shipped via 'Speedy Express'.",
        "query": "SELECT * FROM Orders WHERE ShipperID = (SELECT ShipperID FROM Shippers WHERE ShipperName = 'Speedy Express')"
    },
    {
        "question": "Which supplier provides the product 'Chai'?",
        "query": "SELECT SupplierName FROM Suppliers WHERE SupplierID = (SELECT SupplierID FROM Products WHERE ProductName = 'Chai')"
    },
    {
        "question": "How many different products are supplied by each supplier?",
        "query": "SELECT SupplierName, COUNT(ProductID) FROM Products AS T1 INNER JOIN Suppliers as T2 ON T1.SupplierID = T2.SupplierID GROUP BY SupplierName"
    },
    {
        "question": "What is the average price of products supplied by 'Pavlova, Ltd.'?",
        "query": "SELECT AVG(Price) FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Pavlova, Ltd.')"
    },
    {
        "question": "List all customer names and their corresponding order IDs.",
        "query": "SELECT Customers.CustomerName, Orders.OrderID FROM Customers INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID"
    },
    {
        "question": "List all products and their quantities ordered in 'OrderID 10248'.",
        "query": "SELECT Products.ProductName, OrderDetails.Quantity FROM OrderDetails INNER JOIN Products ON OrderDetails.ProductID = Products.ProductID WHERE OrderDetails.OrderID = 10248"
    },
    {
        "question": "Which customers have placed orders that were shipped via 'United Package'?",
        "query": "SELECT CustomerName FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Orders WHERE ShipperID = (SELECT ShipperID FROM Shippers WHERE ShipperName = 'United Package'))"
    },
    {
        "question": "What are the names of products that have been ordered by customers from 'Germany'?",
        "query": "SELECT ProductName FROM Products WHERE ProductID IN (SELECT ProductID FROM OrderDetails WHERE OrderID IN (SELECT OrderID FROM Orders WHERE ShipCountry = 'Germany'))"
    },
    {
        "question": "List the order dates and shipped dates for all orders shipped to 'Brazil'.",
        "query": "SELECT OrderDate, ShippedDate FROM Orders WHERE ShipCountry = 'Brazil'"
    },
    {
        "question": "What is the total quantity of 'Tofu' ordered?",
        "query": "SELECT SUM(Quantity) FROM OrderDetails WHERE ProductID = (SELECT ProductID FROM Products WHERE ProductName = 'Tofu')"
    },
    {
        "question": "What are the names of all playlists created by the user with UserID 1?",
        "query": "SELECT Name FROM Playlists WHERE UserID = 1"
    },
    {
        "question": "Find the titles of all tracks in the playlist named 'Rock Classics'.",
        "query": "SELECT T2.Title FROM PlaylistTracks AS T1 INNER JOIN Tracks AS T2 ON T1.TrackID = T2.TrackID INNER JOIN Playlists AS T3 ON T1.PlaylistID = T3.PlaylistID WHERE T3.Name = 'Rock Classics'"
    },
    {
        "question": "List the names of all users who have created a playlist containing the track with TrackID 5.",
        "query": "SELECT T3.Name FROM PlaylistTracks AS T1 INNER JOIN Tracks AS T2 ON T1.TrackID = T2.TrackID INNER JOIN Playlists AS T3 ON T1.PlaylistID = T3.PlaylistID INNER JOIN Users AS T4 ON T3.UserID = T4.UserID WHERE T2.TrackID = 5"
    },
    {
        "question": "What is the total duration of all tracks in the 'Workout Mix' playlist?",
        "query": "SELECT SUM(T2.Milliseconds) FROM PlaylistTracks AS T1 INNER JOIN Tracks AS T2 ON T1.TrackID = T2.TrackID INNER JOIN Playlists AS T3 ON T1.PlaylistID = T3.PlaylistID WHERE T3.Name = 'Workout Mix'"
    },
    {
        "question": "How many playlists does the user 'JohnDoe' have?",
        "query": "SELECT COUNT(*) FROM Playlists AS T1 INNER JOIN Users AS T2 ON T1.UserID = T2.UserID WHERE T2.Name = 'JohnDoe'"
    },
    {
        "question": "Find the name of the user who created the playlist with the longest total duration.",
        "query": "SELECT T3.Name FROM PlaylistTracks AS T1 INNER JOIN Tracks AS T2 ON T1.TrackID = T2.TrackID INNER JOIN Playlists AS T3 ON T1.PlaylistID = T3.PlaylistID INNER JOIN Users AS T4 ON T3.UserID = T4.UserID GROUP BY T1.PlaylistID ORDER BY SUM(T2.Milliseconds) DESC LIMIT 1"
    },
    {
        "question": "List the titles of all tracks that are not included in any playlist.",
        "query": "SELECT Title FROM Tracks EXCEPT SELECT T2.Title FROM PlaylistTracks AS T1 INNER JOIN Tracks AS T2 ON T1.TrackID = T2.TrackID"
    },
    {
        "question": "What is the average duration of tracks in the database?",
        "query": "SELECT AVG(Milliseconds) FROM Tracks"
    },
    {
        "question": "Which user has created the most playlists?",
        "query": "SELECT Name FROM Playlists INNER JOIN Users ON Playlists.UserID = Users.UserID GROUP BY UserID ORDER BY COUNT(PlaylistID) DESC LIMIT 1"
    },
    {
        "question": "How many tracks are there for each composer?",
        "query": "SELECT composer, COUNT(*) FROM tracks GROUP BY composer;"
    },
    {
        "question": "Find the first name, last name, and email of all employees in the Sales department.",
        "query": "SELECT first_name, last_name, email FROM employees WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Sales');"
    },
    {
        "question": "List the department name and the number of employees in each department.",
        "query": "SELECT d.department_name, COUNT(e.employee_id) AS num_employees FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name;"
    },
    {
        "question": "List the employees who earn more than the average salary in their department.",
        "query": "SELECT e.first_name, e.last_name FROM employees e WHERE e.salary > (SELECT AVG(salary) FROM employees WHERE department_id = e.department_id);"
    },
    {
        "question": "List the names of all the departments and their locations, including those without any employees.",
        "query": "SELECT d.department_name, l.city, l.state_province FROM departments d JOIN locations l ON d.location_id = l.location_id;"
    },
    {
        "question": "Find the job title and average salary for each job.",
        "query": "SELECT job_title, AVG(salary) AS average_salary FROM employees e JOIN jobs j ON e.job_id = j.job_id GROUP BY job_title;"
    },
    {
        "question": "List the names of employees and their managers.",
        "query": "SELECT e.first_name AS employee_name, m.first_name AS manager_name FROM employees e LEFT JOIN employees m ON e.manager_id = m.employee_id;"
    },
    {
        "question": "What is the total salary paid to all employees in the 'Sales' department?",
        "query": "SELECT SUM(salary) FROM employees WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Sales');"
    },
    {
        "question": "Find the names of employees who are managers.",
        "query": "SELECT first_name, last_name FROM employees WHERE employee_id IN (SELECT manager_id FROM employees WHERE manager_id IS NOT NULL);"
    },
    {
        "question": "Find the employee with the highest salary in the 'IT' department.",
        "query": "SELECT first_name, last_name FROM employees WHERE salary = (SELECT MAX(salary) FROM employees WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'IT'));"
    },
    {
        "question": "What are the different job titles in the company and their minimum salaries?",
        "query": "SELECT job_title, MIN(salary) FROM jobs j JOIN employees e ON j.job_id = e.job_id GROUP BY job_title;"
    },
    {
        "question": "What are the names of all customers who have placed orders?",
        "query": "SELECT c.customer_name FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id"
    },
    {
        "question": "Find the order IDs and order dates for all orders placed by the customer named 'Cardinal'",
        "query": "SELECT order_id, order_date FROM orders WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_name = 'Cardinal')"
    },
    {
        "question": "List the product names and quantities ordered for all orders placed in 2024.",
        "query": "SELECT p.product_name, oi.quantity FROM order_items oi INNER JOIN products p ON oi.product_id = p.product_id INNER JOIN orders o ON oi.order_id = o.order_id WHERE strftime('%Y', o.order_date) = '2024'"
    },
    {
        "question": "What is the total revenue generated from orders placed in January 2024?",
        "query": "SELECT SUM(oi.quantity * p.price) FROM order_items oi INNER JOIN products p ON oi.product_id = p.product_id INNER JOIN orders o ON oi.order_id = o.order_id WHERE strftime('%Y-%m', o.order_date) = '2024-01'"
    },
    {
        "question": "Which product was ordered the most in terms of quantity across all orders?",
        "query": "SELECT product_name FROM products WHERE product_id = (SELECT product_id FROM order_items GROUP BY product_id ORDER BY SUM(quantity) DESC LIMIT 1)"
    },
    {
        "question": "List the customer names and their total spending across all orders.",
        "query": "SELECT c.customer_name, SUM(oi.quantity * p.price) as total_spending FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id GROUP BY c.customer_name"
    },
    {
        "question": "Find the names of customers who have ordered 'Laptop'.",
        "query": "SELECT c.customer_name FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id WHERE oi.product_id = (SELECT product_id FROM products WHERE product_name = 'Laptop')"
    },
    {
        "question": "What is the average quantity of products ordered per order?",
        "query": "SELECT AVG(quantity) FROM order_items"
    },
    {
        "question": "List the order IDs and the number of distinct products in each order.",
        "query": "SELECT order_id, COUNT(DISTINCT product_id) FROM order_items GROUP BY order_id"
    },
    {
        "question": "Find the names of products that have never been ordered.",
        "query": "SELECT product_name FROM products EXCEPT SELECT p.product_name FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id"
    },
    {
        "question": "List the product names and their corresponding prices.",
        "query": "SELECT product_name, price FROM Products"
    },
    {
        "question": "Find the order IDs and order dates for all orders placed by the customer named 'Cardinal'.",
        "query": "SELECT order_id, order_date FROM Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Cardinal')"
    },
    {
        "question": "What is the total revenue generated from all orders?",
        "query": "SELECT SUM(p.price * oi.quantity) FROM OrderItems AS oi INNER JOIN Products AS p ON oi.product_id = p.product_id"
    },
    {
        "question": "Which products have been ordered by customer 'Cardinal'?",
        "query": "SELECT p.product_name FROM Products AS p INNER JOIN OrderItems AS oi ON p.product_id = oi.product_id INNER JOIN Orders AS o ON oi.order_id = o.order_id WHERE o.customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Cardinal')"
    },
    {
        "question": "What is the average price of all products?",
        "query": "SELECT AVG(price) FROM Products"
    },
    {
        "question": "List the customer names and the total amount they have spent on orders.",
        "query": "SELECT c.customer_name, SUM(oi.quantity * p.price) FROM Customers AS c INNER JOIN Orders AS o ON c.customer_id = o.customer_id INNER JOIN OrderItems AS oi ON o.order_id = oi.order_id INNER JOIN Products AS p ON oi.product_id = p.product_id GROUP BY c.customer_name"
    },
    {
        "question": "Which customer has placed the most expensive order?",
        "query": "SELECT c.customer_name FROM Customers AS c INNER JOIN Orders AS o ON c.customer_id = o.customer_id WHERE o.order_id = (SELECT order_id FROM OrderItems AS oi INNER JOIN Products AS p ON oi.product_id = p.product_id ORDER BY oi.quantity * p.price DESC LIMIT 1)"
    },
    {
        "question": "List all orders with their corresponding customer names and total order amounts.",
        "query": "SELECT o.order_id, c.customer_name, SUM(oi.quantity * p.price) AS total_amount FROM Orders AS o INNER JOIN Customers AS c ON o.customer_id = c.customer_id INNER JOIN OrderItems AS oi ON o.order_id = oi.order_id INNER JOIN Products AS p ON oi.product_id = p.product_id GROUP BY o.order_id, c.customer_name"
    },
    {
        "question": "What is the total duration of all tracks on the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT SUM(milliseconds) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.album_id = T2.album_id WHERE T2.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "List the names of all artists and their corresponding album titles.",
        "query": "SELECT T2.name, T1.title FROM albums AS T1 INNER JOIN artists AS T2 ON T1.artist_id = T2.artist_id;"
    },
    {
        "question": "How many tracks are there in each genre?",
        "query": "SELECT T1.name, COUNT(T2.track_id) FROM genres AS T1 INNER JOIN tracks AS T2 ON T1.genre_id = T2.genre_id GROUP BY T1.name;"
    },
    {
        "question": "What are the names of all the customers?",
        "query": "SELECT Name FROM Customers"
    },
    {
        "question": "What is the address of the customer named 'David Lee'?",
        "query": "SELECT Address FROM Customers WHERE Name = 'David Lee'"
    },
    {
        "question": "What are the names of all products with a price greater than $20?",
        "query": "SELECT Name FROM Products WHERE Price > 20"
    },
    {
        "question": "List the order IDs and order dates for all orders placed by the customer with ID 1.",
        "query": "SELECT OrderID, OrderDate FROM Orders WHERE CustomerID = 1"
    },
    {
        "question": "What products were included in order with ID 2?",
        "query": "SELECT T2.Name FROM OrderItems AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.OrderID = 2"
    },
    {
        "question": "Which customers have placed orders for the product 'Laptop'?",
        "query": "SELECT T3.Name FROM Products AS T1 INNER JOIN OrderItems AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Orders AS T4 ON T2.OrderID = T4.OrderID INNER JOIN Customers as T3 ON T4.CustomerID = T3.CustomerID WHERE T1.Name = 'Laptop'"
    },
    {
        "question": "List the names of customers who have placed orders in 2023.",
        "query": "SELECT T2.Name FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T1.OrderDate) = '2023'"
    },
    {
        "question": "What are the names of the tracks that cost more than $1.00?",
        "query": "SELECT name FROM tracks WHERE unitprice > 1.00;"
    },
    {
        "question": "What are the names of the tracks composed by 'AC/DC'?",
        "query": "SELECT name FROM tracks WHERE composer = 'AC/DC';"
    },
    {
        "question": "What is the name of the album with the most tracks?",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid GROUP BY T2.title ORDER BY COUNT(T1.trackid) DESC LIMIT 1;"
    },
    {
        "question": "Which products have been ordered by customer 'John Doe'?",
        "query": "SELECT p.name FROM products p INNER JOIN order_items oi ON p.id = oi.product_id INNER JOIN orders o ON oi.order_id = o.id INNER JOIN customers c ON o.customer_id = c.id WHERE c.name = 'John Doe'"
    },
    {
        "question": "What is the total revenue generated from each product?",
        "query": "SELECT p.name, SUM(oi.quantity * p.price) AS total_revenue FROM products p INNER JOIN order_items oi ON p.id = oi.product_id GROUP BY p.name"
    },
    {
        "question": "What is the average quantity of products ordered in each order?",
        "query": "SELECT o.id, AVG(oi.quantity) AS average_quantity FROM orders o INNER JOIN order_items oi ON o.id = oi.order_id GROUP BY o.id"
    },
    {
        "question": "Which customers have placed orders with a total value greater than $100?",
        "query": "SELECT c.name FROM customers c INNER JOIN orders o ON c.id = o.customer_id INNER JOIN order_items oi ON o.id = oi.order_id INNER JOIN products p ON oi.product_id = p.id GROUP BY c.name HAVING SUM(oi.quantity * p.price) > 100"
    },
    {
        "question": "List the order IDs and the total number of items in each order.",
        "query": "SELECT order_id, SUM(quantity) AS total_items FROM order_items GROUP BY order_id"
    },
    {
        "question": "Find the most expensive product.",
        "query": "SELECT name FROM products ORDER BY price DESC LIMIT 1"
    },
    {
        "question": "List the names of customers who have ordered 'Laptop'.",
        "query": "SELECT c.name FROM customers c INNER JOIN orders o ON c.id = o.customer_id INNER JOIN order_items oi ON o.id = oi.order_id INNER JOIN products p ON oi.product_id = p.id WHERE p.name = 'Laptop'"
    },
    {
        "question": "What is the total quantity of each product sold?",
        "query": "SELECT p.name, SUM(oi.quantity) AS total_quantity FROM products p INNER JOIN order_items oi ON p.id = oi.product_id GROUP BY p.name"
    },
    {
        "question": "List the orders placed in the last week.",
        "query": "SELECT * FROM orders WHERE order_date >= date('now', '-7 days')"
    },
    {
        "question": "What is the average milliseconds length of tracks in the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT AVG(milliseconds) FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'For Those About To Rock We Salute You');"
    },
    {
        "question": "What are the titles of the playlists that contain the track 'Dazed and Confused'?",
        "query": "SELECT playlists.name FROM playlists INNER JOIN playlist_track ON playlists.playlistid = playlist_track.playlistid WHERE playlist_track.trackid = (SELECT trackid FROM tracks WHERE name = 'Dazed and Confused');"
    },
    {
        "question": "Which album has the longest total playtime (in milliseconds)?",
        "query": "SELECT title FROM albums WHERE albumid = (SELECT albumid FROM tracks GROUP BY albumid ORDER BY SUM(milliseconds) DESC LIMIT 1);"
    },
    {
        "question": "List the names of customers who have purchased tracks from the genre 'Rock'.",
        "query": "SELECT T3.firstname, T3.lastname FROM tracks AS T1 INNER JOIN invoice_items AS T2 ON T1.trackid = T2.trackid INNER JOIN invoices AS T4 ON T2.invoiceid = T4.invoiceid INNER JOIN customers AS T3 ON T4.customerid = T3.customerid WHERE T1.genreid = (SELECT genreid FROM genres WHERE name = 'Rock');"
    },
    {
        "question": "Which media type has the most tracks?",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN media_types AS T2 ON T1.mediatypeid = T2.mediatypeid GROUP BY T1.mediatypeid ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question": "What is the total sales value of all tracks in the 'Metal' genre?",
        "query": "SELECT SUM(T2.unitprice) FROM genres AS T1 INNER JOIN tracks AS T2 ON T1.genreid = T2.genreid WHERE T1.name = 'Metal';"
    },
    {
        "question": "What are the titles of the albums by 'Iron Maiden'?",
        "query": "SELECT title FROM albums WHERE artist_id = (SELECT artist_id FROM artists WHERE name = 'Iron Maiden');"
    },
    {
        "question": "Which album has the highest total track length (in milliseconds)?",
        "query": "SELECT album_id FROM tracks GROUP BY album_id ORDER BY SUM(milliseconds) DESC LIMIT 1;"
    },
    {
        "question": "List the names of customers who have purchased tracks from the 'Rock' genre.",
        "query": "SELECT T3.first_name, T3.last_name FROM genres AS T1 INNER JOIN tracks AS T2 ON T1.genre_id = T2.genre_id INNER JOIN invoice_items AS T4 ON T2.track_id = T4.track_id INNER JOIN invoices AS T5 ON T4.invoice_id = T5.invoice_id INNER JOIN customers AS T3 ON T5.customer_id = T3.customer_id WHERE T1.name = 'Rock';"
    },
    {
        "question": "What is the total revenue generated from sales of tracks in the 'Metal' genre?",
        "query": "SELECT SUM(T2.unit_price * T2.quantity) FROM tracks AS T1 INNER JOIN invoice_items AS T2 ON T1.track_id = T2.track_id WHERE T1.genre_id = (SELECT genre_id FROM genres WHERE name = 'Metal');"
    },
    {
        "question": "List the names of artists and the number of albums they have released.",
        "query": "SELECT T1.name, COUNT(T2.album_id) FROM artists AS T1 INNER JOIN albums AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.name;"
    },
    {
        "question": "What is the name of the customer who has made the most purchases (in terms of total invoice value)?",
        "query": "SELECT T2.first_name, T2.last_name FROM invoices AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY SUM(T1.total) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all albums released in the year 2000?",
        "query": "SELECT title FROM albums WHERE strftime('%Y', releasedate) = '2000';"
    },
    {
        "question": "Which album has the highest average track length?",
        "query": "SELECT T1.title FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid GROUP BY T1.title ORDER BY AVG(T2.milliseconds) DESC LIMIT 1;"
    },
    {
        "question": "List all the genres available in the Chinook database.",
        "query": "SELECT Name FROM Genre;"
    },
    {
        "question": "What are the names of all the artists in the database?",
        "query": "SELECT Name FROM Artist;"
    },
    {
        "question": "How many albums are there in the Rock genre?",
        "query": "SELECT COUNT(T1.AlbumId) FROM Album AS T1 INNER JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId INNER JOIN Genre AS T3 ON T2.GenreId = T3.GenreId WHERE T3.Name = 'Rock';"
    },
    {
        "question": "What is the total cost of all the tracks in the database?",
        "query": "SELECT SUM(UnitPrice) FROM Track;"
    },
    {
        "question": "Which customer has spent the most money on music?",
        "query": "SELECT T1.CustomerId, T1.FirstName, T1.LastName FROM Customer AS T1 INNER JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId GROUP BY T1.CustomerId ORDER BY SUM(T2.Total) DESC LIMIT 1;"
    },
    {
        "question": "Which album has the longest total track length?",
        "query": "SELECT T1.Title FROM Album AS T1 INNER JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T1.Title ORDER BY SUM(T2.Milliseconds) DESC LIMIT 1;"
    },
    {
        "question": "What are the names of the top 5 most popular genres (by number of tracks)?",
        "query": "SELECT T2.Name FROM Track AS T1 INNER JOIN Genre AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.Name ORDER BY COUNT(T1.TrackId) DESC LIMIT 5;"
    },
    {
        "question": "Which employee is the support representative for the customer with CustomerId 1?",
        "query": "SELECT T2.FirstName, T2.LastName FROM Customer AS T1 INNER JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.CustomerId = 1;"
    },
    {
        "question": "What is the name of the track with track_id 3?",
        "query": "SELECT name FROM tracks WHERE track_id = 3;"
    },
    {
        "question": "What are the names of all the tracks that are longer than 3 minutes?",
        "query": "SELECT name FROM tracks WHERE milliseconds > 180000;"
    },
    {
        "question": "What are the names of the tracks in the 'Rock' genre?",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genre_id = T2.genre_id WHERE T2.name = 'Rock';"
    },
    {
        "question": "What is the total length of all tracks in the 'Rock' genre in milliseconds?",
        "query": "SELECT SUM(T1.milliseconds) FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genre_id = T2.genre_id WHERE T2.name = 'Rock';"
    },
    {
        "question": "Which album has the longest track?",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.album_id = T2.album_id ORDER BY T1.milliseconds DESC LIMIT 1;"
    },
    {
        "question": "What are the names of the artists who have written tracks in the 'Rock' genre?",
        "query": "SELECT T3.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genre_id = T2.genre_id INNER JOIN artists AS T3 ON T1.composer = T3.name WHERE T2.name = 'Rock';"
    },
    {
        "question": "What are the names of the top 5 longest tracks?",
        "query": "SELECT name FROM tracks ORDER BY milliseconds DESC LIMIT 5;"
    },
    {
        "question": "List the names of all tracks, their genre, and their composer.",
        "query": "SELECT T1.name, T2.name, T1.composer FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genre_id = T2.genre_id;"
    },
    {
        "question": "What is the total duration of all tracks in the playlist 'Music'?",
        "query": "SELECT SUM(T1.milliseconds) FROM tracks AS T1 INNER JOIN playlist_track AS T2 ON T1.trackid = T2.trackid WHERE T2.playlistid = (SELECT playlistid FROM playlists WHERE name = 'Music')"
    },
    {
        "question": "List the names of all playlists that contain the track 'For Those About To Rock (We Salute You)'.",
        "query": "SELECT T2.Name FROM tracks AS T1 INNER JOIN playlist_track AS T3 ON T1.trackid = T3.trackid INNER JOIN playlists AS T2 ON T3.playlistid = T2.playlistid WHERE T1.name = 'For Those About To Rock (We Salute You)'"
    },
    {
        "question": "Which playlist has the fewest tracks?",
        "query": "SELECT name FROM playlists ORDER BY (SELECT COUNT(*) FROM playlist_track WHERE playlist_track.playlistid = playlists.playlistid) ASC LIMIT 1"
    },
    {
        "question": "What is the total sales value of all tracks purchased by the customer with the email 'luisrojas@example.com'?",
        "query": "SELECT SUM(T2.quantity * T2.unitprice) FROM customers AS T1 INNER JOIN invoice_items AS T2 ON T1.customerid = T2.invoiceid WHERE T1.email = 'luisrojas@example.com'"
    },
    {
        "question": "List the names of all customers who have purchased tracks in the 'Metal' genre.",
        "query": "SELECT T1.firstname, T1.lastname FROM customers AS T1 INNER JOIN invoices AS T2 ON T1.customerid = T2.customerid INNER JOIN invoice_items AS T3 ON T2.invoiceid = T3.invoiceid INNER JOIN tracks AS T4 ON T3.trackid = T4.trackid INNER JOIN genres as T5 ON T4.genreid = T5.genreid WHERE T5.name = 'Metal'"
    },
    {
        "question": "What are the names of the tracks on the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT name FROM tracks WHERE album_id = (SELECT album_id FROM albums WHERE title = 'For Those About To Rock We Salute You');"
    },
    {
        "question": "List the albums with their total duration in milliseconds.",
        "query": "SELECT T2.title, SUM(T1.milliseconds) as TotalDuration FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.album_id = T2.album_id GROUP BY T2.title;"
    },
    {
        "question": "What are the names of the artists and the number of albums they have?",
        "query": "SELECT T1.name, COUNT(T2.album_id) AS num_albums FROM artists AS T1 INNER JOIN albums AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.name;"
    },
    {
        "question": "What is the contact name and city of the customer with ID 1?",
        "query": "SELECT ContactName, City FROM Customers WHERE CustomerID = 1"
    },
    {
        "question": "List all orders placed by customer with ID 1.",
        "query": "SELECT * FROM Orders WHERE CustomerID = 1"
    },
    {
        "question": "What are the product names and prices of all products?",
        "query": "SELECT ProductName, Price FROM Products"
    },
    {
        "question": "List all products with a price greater than $10.",
        "query": "SELECT * FROM Products WHERE Price > 10"
    },
    {
        "question": "What are the order details for order number 10248?",
        "query": "SELECT * FROM OrderDetails WHERE OrderID = 10248"
    },
    {
        "question": "What is the total amount spent on each product in order 10248?",
        "query": "SELECT ProductID, SUM(Quantity * Price) AS TotalAmount FROM OrderDetails WHERE OrderID = 10248 GROUP BY ProductID"
    },
    {
        "question": "List all customers who have placed orders for product 'Chai'.",
        "query": "SELECT T1.ContactName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN OrderDetails AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T4.ProductName = 'Chai'"
    },
    {
        "question": "List the customer names and the total number of orders they have placed.",
        "query": "SELECT T1.Name, COUNT(T2.OrderID) AS TotalOrders FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Name"
    },
    {
        "question": "What are the names of all the employees in the Chinook database?",
        "query": "SELECT FirstName, LastName FROM Employee;"
    },
    {
        "question": "Who is the Sales Support Agent?",
        "query": "SELECT FirstName, LastName FROM Employee WHERE Title = 'Sales Support Agent';"
    },
    {
        "question": "Which artists have a name starting with 'AC'?",
        "query": "SELECT Name FROM Artist WHERE Name LIKE 'AC%';"
    },
    {
        "question": "What are the names of all the albums by 'Iron Maiden'?",
        "query": "SELECT Title FROM Album WHERE ArtistId = (SELECT ArtistId FROM Artist WHERE Name = 'Iron Maiden');"
    },
    {
        "question": "List all genres and the number of tracks in each genre.",
        "query": "SELECT g.Name, COUNT(t.TrackId) FROM Genre g INNER JOIN Track t ON g.GenreId = t.GenreId GROUP BY g.Name;"
    },
    {
        "question": "What are the top 5 most expensive tracks?",
        "query": "SELECT Name FROM Track ORDER BY UnitPrice DESC LIMIT 5;"
    },
    {
        "question": "What are the names of the tracks in the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT Name FROM Track WHERE AlbumId = (SELECT AlbumId FROM Album WHERE Title = 'For Those About To Rock We Salute You');"
    },
    {
        "question": "What are the names of all the playlists?",
        "query": "SELECT Name FROM Playlist;"
    },
    {
        "question": "What are the tracks in the playlist 'Grunge'?",
        "query": "SELECT t.Name FROM Track t INNER JOIN PlaylistTrack pt ON t.TrackId = pt.TrackId WHERE pt.PlaylistId = (SELECT PlaylistId FROM Playlist WHERE Name = 'Grunge');"
    },
    {
        "question": "What are the different media types available in the store?",
        "query": "SELECT Name FROM MediaType;"
    },
    {
        "question": "List all invoices with their billing countries.",
        "query": "SELECT InvoiceId, BillingCountry FROM Invoice;"
    },
    {
        "question": "What are the total sales for each country?",
        "query": "SELECT BillingCountry, SUM(Total) FROM Invoice GROUP BY BillingCountry;"
    },
    {
        "question": "How many tracks are there in each playlist?",
        "query": "SELECT p.Name, COUNT(pt.TrackId) FROM Playlist p INNER JOIN PlaylistTrack pt ON p.PlaylistId = pt.PlaylistId GROUP BY p.Name;"
    },
    {
        "question": "What is the average unit price of tracks by genre 'Rock'?",
        "query": "SELECT AVG(t.UnitPrice) FROM Track t INNER JOIN Genre g ON t.GenreId = g.GenreId WHERE g.Name = 'Rock';"
    },
    {
        "question": "List all distinct crime types in Greater Manchester.",
        "query": "SELECT DISTINCT Type FROM GreaterManchesterCrime"
    },
    {
        "question": "How many crimes were recorded in 'Manchester 046C'?",
        "query": "SELECT COUNT(*) FROM GreaterManchesterCrime WHERE LSOA = 'Manchester 046C'"
    },
    {
        "question": "What are the locations of 'Vehicle crime' incidents?",
        "query": "SELECT Location FROM GreaterManchesterCrime WHERE Type = 'Vehicle crime'"
    },
    {
        "question": "Find the Crime IDs and timestamps of all 'Burglary' incidents.",
        "query": "SELECT CrimeID, CrimeTS FROM GreaterManchesterCrime WHERE Type = 'Burglary'"
    },
    {
        "question": "How many crimes have an outcome of 'Under investigation'?",
        "query": "SELECT COUNT(*) FROM GreaterManchesterCrime WHERE Outcome = 'Under investigation'"
    },
    {
        "question": "List all crime types and their corresponding outcomes.",
        "query": "SELECT Type, Outcome FROM GreaterManchesterCrime"
    },
    {
        "question": "What are the different LSOAs where 'Drugs' related crimes occurred?",
        "query": "SELECT DISTINCT LSOA FROM GreaterManchesterCrime WHERE Type = 'Drugs'"
    },
    {
        "question": "Find the CrimeTS and Location of 'Shoplifting' incidents in 'Manchester 005B'.",
        "query": "SELECT CrimeTS, Location FROM GreaterManchesterCrime WHERE Type = 'Shoplifting' AND LSOA = 'Manchester 005B'"
    },
    {
        "question": "How many 'Violence and sexual offences' were reported?",
        "query": "SELECT COUNT(*) FROM GreaterManchesterCrime WHERE Type = 'Violence and sexual offences'"
    },
    {
        "question": "List the locations and outcomes of all crimes in 'Stockport 023D'.",
        "query": "SELECT Location, Outcome FROM GreaterManchesterCrime WHERE LSOA = 'Stockport 023D'"
    },
    {
        "question": "What are the CrimeIDs of incidents with the outcome 'Offender given a caution'?",
        "query": "SELECT CrimeID FROM GreaterManchesterCrime WHERE Outcome = 'Offender given a caution'"
    },
    {
        "question": "Find the timestamp and location of the crime with CrimeID 'C3:EF:5F:85:BB:CE'.",
        "query": "SELECT CrimeTS, Location FROM GreaterManchesterCrime WHERE CrimeID = 'C3:EF:5F:85:BB:CE'"
    },
    {
        "question": "How many crimes occurred in 'Wigan 031B'?",
        "query": "SELECT COUNT(*) FROM GreaterManchesterCrime WHERE LSOA = 'Wigan 031B'"
    },
    {
        "question": "List all distinct crime outcomes.",
        "query": "SELECT DISTINCT Outcome FROM GreaterManchesterCrime"
    },
    {
        "question": "What are the locations and types of crimes with an outcome of 'Local resolution'?",
        "query": "SELECT Location, Type FROM GreaterManchesterCrime WHERE Outcome = 'Local resolution'"
    },
    {
        "question": "Find the CrimeID and LSOA of all 'Public order' incidents.",
        "query": "SELECT CrimeID, LSOA FROM GreaterManchesterCrime WHERE Type = 'Public order'"
    },
    {
        "question": "How many crimes occurred on '2018-08-05'?",
        "query": "SELECT COUNT(*) FROM GreaterManchesterCrime WHERE DATE(CrimeTS) = '2018-08-05'"
    },
    {
        "question": "List the LSOA and Type of all crimes with an outcome of 'Unable to prosecute suspect'.",
        "query": "SELECT LSOA, Type FROM GreaterManchesterCrime WHERE Outcome = 'Unable to prosecute suspect'"
    },
    {
        "question": "What are the CrimeIDs and timestamps of crimes that occurred 'On or near Brierfield Avenue'?",
        "query": "SELECT CrimeID, CrimeTS FROM GreaterManchesterCrime WHERE Location = 'On or near Brierfield Avenue'"
    },
    {
        "question": "How many 'Bicycle theft' incidents occurred?",
        "query": "SELECT COUNT(*) FROM GreaterManchesterCrime WHERE Type = 'Bicycle theft'"
    },
    {
        "question": "List the locations and outcomes of 'Other crime' incidents.",
        "query": "SELECT Location, Outcome FROM GreaterManchesterCrime WHERE Type = 'Other crime'"
    },
    {
        "question": "Find the CrimeTS and LSOA of crimes with the outcome 'Offender given a drugs possession warning'.",
        "query": "SELECT CrimeTS, LSOA FROM GreaterManchesterCrime WHERE Outcome = 'Offender given a drugs possession warning'"
    },
    {
        "question": "How many crimes occurred in 'Bolton 004C'?",
        "query": "SELECT COUNT(*) FROM GreaterManchesterCrime WHERE LSOA = 'Bolton 004C'"
    },
    {
        "question": "List all CrimeIDs and Types of crimes that occurred in 'Salford 028H'.",
        "query": "SELECT CrimeID, Type FROM GreaterManchesterCrime WHERE LSOA = 'Salford 028H'"
    },
    {
        "question": "What are the locations and outcomes of 'Possession of weapons' incidents?",
        "query": "SELECT Location, Outcome FROM GreaterManchesterCrime WHERE Type = 'Possession of weapons'"
    },
    {
        "question": "Find the CrimeTS and Type of crimes with the outcome 'Action to be taken by another organisation'.",
        "query": "SELECT CrimeTS, Type FROM GreaterManchesterCrime WHERE Outcome = 'Action to be taken by another organisation'"
    },
    {
        "question": "How many crimes occurred in 'Oldham 001B'?",
        "query": "SELECT COUNT(*) FROM GreaterManchesterCrime WHERE LSOA = 'Oldham 001B'"
    },
    {
        "question": "List the LSOA and outcomes of all 'Theft from the person' incidents.",
        "query": "SELECT LSOA, Outcome FROM GreaterManchesterCrime WHERE Type = 'Theft from the person'"
    },
    {
        "question": "What are the CrimeIDs and locations of crimes that occurred in 'Rochdale 016A'?",
        "query": "SELECT CrimeID, Location FROM GreaterManchesterCrime WHERE LSOA = 'Rochdale 016A'"
    },
    {
        "question": "How many crimes occurred between '2018-08-05' and '2018-08-10'?",
        "query": "SELECT COUNT(*) FROM GreaterManchesterCrime WHERE DATE(CrimeTS) BETWEEN '2018-08-05' AND '2018-08-10'"
    },
    {
        "question": "List the types and outcomes of crimes that occurred 'On or near Corbel Way'.",
        "query": "SELECT Type, Outcome FROM GreaterManchesterCrime WHERE Location = 'On or near Corbel Way'"
    },
    {
        "question": "What are the CrimeIDs and LSOAs of 'Drugs' related crimes with an outcome of 'Awaiting court outcome'?",
        "query": "SELECT CrimeID, LSOA FROM GreaterManchesterCrime WHERE Type = 'Drugs' AND Outcome = 'Awaiting court outcome'"
    },
    {
        "question": "How many 'Public order' incidents occurred in 'Wigan 012D'?",
        "query": "SELECT COUNT(*) FROM GreaterManchesterCrime WHERE Type = 'Public order' AND LSOA = 'Wigan 012D'"
    },
    {
        "question": "List the locations and timestamps of 'Shoplifting' incidents with an outcome of 'Offender given penalty notice'.",
        "query": "SELECT Location, CrimeTS FROM GreaterManchesterCrime WHERE Type = 'Shoplifting' AND Outcome = 'Offender given penalty notice'"
    },
    {
        "question": "What are the CrimeIDs and types of crimes that occurred 'On or near Holly Bank Close'?",
        "query": "SELECT CrimeID, Type FROM GreaterManchesterCrime WHERE Location = 'On or near Holly Bank Close'"
    },
    {
        "question": "How many 'Vehicle crime' incidents occurred in 'Stockport 032B'?",
        "query": "SELECT COUNT(*) FROM GreaterManchesterCrime WHERE Type = 'Vehicle crime' AND LSOA = 'Stockport 032B'"
    },
    {
        "question": "List the LSOAs and outcomes of crimes with the type 'Other crime' and occurred before '2018-08-15'.",
        "query": "SELECT LSOA, Outcome FROM GreaterManchesterCrime WHERE Type = 'Other crime' AND DATE(CrimeTS) < '2018-08-15'"
    },
    {
        "question": "What are the CrimeIDs and locations of 'Bicycle theft' incidents with an outcome of 'Unable to prosecute suspect'?",
        "query": "SELECT CrimeID, Location FROM GreaterManchesterCrime WHERE Type = 'Bicycle theft' AND Outcome = 'Unable to prosecute suspect'"
    },
    {
        "question": "How many 'Burglary' incidents occurred in 'Manchester 005B'?",
        "query": "SELECT COUNT(*) FROM GreaterManchesterCrime WHERE Type = 'Burglary' AND LSOA = 'Manchester 005B'"
    },
    {
        "question": "List the timestamps and outcomes of crimes that occurred 'On or near Napier Street West'.",
        "query": "SELECT CrimeTS, Outcome FROM GreaterManchesterCrime WHERE Location = 'On or near Napier Street West'"
    },
    {
        "question": "What are the CrimeIDs and LSOAs of 'Violence and sexual offences' with an outcome of 'Under investigation'?",
        "query": "SELECT CrimeID, LSOA FROM GreaterManchesterCrime WHERE Type = 'Violence and sexual offences' AND Outcome = 'Under investigation'"
    },
    {
        "question": "How many crimes occurred 'On or near Dudley Street'?",
        "query": "SELECT COUNT(*) FROM GreaterManchesterCrime WHERE Location = 'On or near Dudley Street'"
    },
    {
        "question": "List the locations and types of crimes with an outcome of 'Formal action is not in the public interest'.",
        "query": "SELECT Location, Type FROM GreaterManchesterCrime WHERE Outcome = 'Formal action is not in the public interest'"
    },
    {
        "question": "What are the CrimeIDs and timestamps of crimes that occurred 'On or near Poplars Road'?",
        "query": "SELECT CrimeID, CrimeTS FROM GreaterManchesterCrime WHERE Location = 'On or near Poplars Road'"
    },
    {
        "question": "How many 'Possession of weapons' incidents occurred in 'Rochdale 016A'?",
        "query": "SELECT COUNT(*) FROM GreaterManchesterCrime WHERE Type = 'Possession of weapons' AND LSOA = 'Rochdale 016A'"
    },
    {
        "question": "List the LSOAs and outcomes of 'Drugs' related crimes that occurred after '2018-08-20'.",
        "query": "SELECT LSOA, Outcome FROM GreaterManchesterCrime WHERE Type = 'Drugs' AND DATE(CrimeTS) > '2018-08-20'"
    },
    {
        "question": "What are the CrimeIDs and locations of 'Theft from the person' incidents with an outcome of 'Local resolution'?",
        "query": "SELECT CrimeID, Location FROM GreaterManchesterCrime WHERE Type = 'Theft from the person' AND Outcome = 'Local resolution'"
    },
    {
        "question": "How many 'Shoplifting' incidents occurred in 'Wigan 031B'?",
        "query": "SELECT COUNT(*) FROM GreaterManchesterCrime WHERE Type = 'Shoplifting' AND LSOA = 'Wigan 031B'"
    },
    {
        "question": "List the timestamps and outcomes of crimes that occurred 'On or near Ridgeway Gates'.",
        "query": "SELECT CrimeTS, Outcome FROM GreaterManchesterCrime WHERE Location = 'On or near Ridgeway Gates'"
    },
    {
        "question": "What are the CrimeIDs and types of crimes with an outcome of 'Further investigation is not in the public interest'?",
        "query": "SELECT CrimeID, Type FROM GreaterManchesterCrime WHERE Outcome = 'Further investigation is not in the public interest'"
    },
    {
        "question": "How many 'Other crime' incidents occurred in 'Bolton 004C'?",
        "query": "SELECT COUNT(*) FROM GreaterManchesterCrime WHERE Type = 'Other crime' AND LSOA = 'Bolton 004C'"
    },
    {
        "question": "List the locations and LSOAs of all crimes that occurred on '2018-08-10'.",
        "query": "SELECT Location, LSOA FROM GreaterManchesterCrime WHERE DATE(CrimeTS) = '2018-08-10'"
    },
    {
        "question": "What are the CrimeIDs and outcomes of 'Bicycle theft' incidents that occurred in 'Oldham 001B'?",
        "query": "SELECT CrimeID, Outcome FROM GreaterManchesterCrime WHERE Type = 'Bicycle theft' AND LSOA = 'Oldham 001B'"
    },
    {
        "question": "How many 'Burglary' incidents occurred in 'Salford 028H'?",
        "query": "SELECT COUNT(*) FROM GreaterManchesterCrime WHERE Type = 'Burglary' AND LSOA = 'Salford 028H'"
    },
    {
        "question": "List the types and outcomes of crimes that occurred 'On or near Withins Grove'.",
        "query": "SELECT Type, Outcome FROM GreaterManchesterCrime WHERE Location = 'On or near Withins Grove'"
    },
    {
        "question": "What are the CrimeIDs and timestamps of 'Violence and sexual offences' incidents with an outcome of 'Awaiting court outcome'?",
        "query": "SELECT CrimeID, CrimeTS FROM GreaterManchesterCrime WHERE Type = 'Violence and sexual offences' AND Outcome = 'Awaiting court outcome'"
    },
    {
        "question": "How many crimes occurred 'On or near Barnwood Drive'?",
        "query": "SELECT COUNT(*) FROM GreaterManchesterCrime WHERE Location = 'On or near Barnwood Drive'"
    },
    {
        "question": "What are the different types of crime reported in Wigan 031B?",
        "query": "SELECT DISTINCT Type FROM GreaterManchesterCrime WHERE LSOA = 'Wigan 031B'"
    },
    {
        "question": "List all the crime IDs and their corresponding locations.",
        "query": "SELECT CrimeID, Location FROM GreaterManchesterCrime"
    },
    {
        "question": "How many crimes of each type were reported?",
        "query": "SELECT Type, COUNT(*) AS CrimeCount FROM GreaterManchesterCrime GROUP BY Type"
    },
    {
        "question": "What is the most common crime outcome?",
        "query": "SELECT Outcome FROM GreaterManchesterCrime GROUP BY Outcome ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "List all crimes that occurred on or near Brierfield Avenue, along with their type and outcome.",
        "query": "SELECT CrimeID, Type, Outcome FROM GreaterManchesterCrime WHERE Location = 'On or near Brierfield Avenue'"
    },
    {
        "question": "What are the different crime types and their corresponding outcomes for crimes that occurred before 2018-08-10?",
        "query": "SELECT Type, Outcome FROM GreaterManchesterCrime WHERE CrimeTS < '2018-08-10'"
    },
    {
        "question": "What is the total cost of all tracks in the album 'Let There Be Rock'?",
        "query": "SELECT SUM(T1.unitprice) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T2.title = 'Let There Be Rock';"
    },
    {
        "question": "What is the email address of the customer named 'John Doe'?",
        "query": "SELECT Email FROM Customers WHERE Name = 'John Doe'"
    },
    {
        "question": "What are the names and email addresses of all customers who have placed an order?",
        "query": "SELECT T1.Name, T1.Email FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID"
    },
    {
        "question": "What are the names of customers who have ordered product 'A'?",
        "query": "SELECT T2.Name FROM OrderItems AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.ProductID = 'A'"
    },
    {
        "question": "What is the total quantity of each product ordered?",
        "query": "SELECT ProductID, SUM(Quantity) FROM OrderItems GROUP BY ProductID"
    },
    {
        "question": "What are the names of customers who have placed orders with a total amount greater than $100?",
        "query": "SELECT T1.Name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Name HAVING SUM(T2.Amount) > 100"
    },
    {
        "question": "List the products ordered by the customer with email 'john.doe@example.com'.",
        "query": "SELECT T2.ProductID FROM Customers AS T1 INNER JOIN OrderItems AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Email = 'john.doe@example.com'"
    },
    {
        "question": "What is the average order amount?",
        "query": "SELECT AVG(Amount) FROM Orders"
    },
    {
        "question": "Which customer placed the order with the highest amount, and what was the amount?",
        "query": "SELECT T1.Name, T2.Amount FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY T2.Amount DESC LIMIT 1"
    },
    {
        "question": "List the names of all tracks that belong to the 'Rock' genre.",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.genre_id WHERE T2.name = 'Rock';"
    },
    {
        "question": "What are the names of the artists whose albums were released in the 2000s?",
        "query": "SELECT T1.name FROM artists AS T1 JOIN albums AS T2 ON T1.artist_id = T2.artist_id WHERE strftime('%Y', T2.release_date) BETWEEN '2000' AND '2009';"
    },
    {
        "question": "What is the name of the album with the highest number of tracks?",
        "query": "SELECT title FROM albums WHERE album_id IN (SELECT album_id FROM tracks GROUP BY album_id ORDER BY COUNT(*) DESC LIMIT 1);"
    },
    {
        "question": "What are the titles of the albums by 'AC/DC'?",
        "query": "SELECT title FROM albums WHERE artist_id = (SELECT artist_id FROM artists WHERE name = 'AC/DC');"
    },
    {
        "question": "What is the total duration of all tracks in the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT SUM(milliseconds) FROM tracks WHERE album_id = (SELECT album_id FROM albums WHERE title = 'For Those About To Rock We Salute You');"
    },
    {
        "question": "What is the name of the playlist with the highest total track duration?",
        "query": "SELECT T3.name FROM playlist_track AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id INNER JOIN playlists AS T3 ON T1.playlist_id = T3.playlist_id GROUP BY T3.name ORDER BY SUM(T2.milliseconds) DESC LIMIT 1;"
    },
    {
        "question": "Show the schema for the 'employees' table.",
        "query": "SELECT sql FROM sqlite_master WHERE name='employees';"
    },
    {
        "question": "List all employees and their corresponding departments.",
        "query": "SELECT e.name, d.department_name FROM employees AS e JOIN departments AS d ON e.department_id = d.id;"
    },
    {
        "question": "Find the employee with the highest salary.",
        "query": "SELECT name FROM employees ORDER BY salary DESC LIMIT 1;"
    },
    {
        "question": "List the departments that have more than 5 employees.",
        "query": "SELECT d.department_name FROM departments AS d INNER JOIN employees AS e ON d.id = e.department_id GROUP BY d.department_name HAVING COUNT(e.id) > 5;"
    },
    {
        "question": "Find the names of employees who work in the same department as 'John Smith'.",
        "query": "SELECT e1.name FROM employees AS e1 INNER JOIN employees AS e2 ON e1.department_id = e2.department_id WHERE e2.name = 'John Smith' AND e1.name != 'John Smith';"
    },
    {
        "question": "List the names of all employees who have a salary greater than the average salary of their department.",
        "query": "SELECT e.name FROM employees e WHERE e.salary > (SELECT AVG(salary) FROM employees WHERE department_id = e.department_id);"
    },
    {
        "question": "What is the total salary budget for each department?",
        "query": "SELECT d.department_name, SUM(e.salary) FROM employees AS e INNER JOIN departments AS d ON e.department_id = d.id GROUP BY d.department_name;"
    },
    {
        "question": "Find the department with the lowest average salary.",
        "query": "SELECT department_name FROM departments WHERE id IN (SELECT department_id FROM employees GROUP BY department_id ORDER BY AVG(salary) ASC LIMIT 1);"
    },
    {
        "question": "List the albums by title that have a total track count greater than 20.",
        "query": "SELECT title FROM albums WHERE AlbumId IN (SELECT AlbumId FROM tracks GROUP BY AlbumId HAVING COUNT(*) > 20);"
    },
    {
        "question": "What is the average unit price of tracks composed by 'AC/DC'?",
        "query": "SELECT AVG(unitprice) FROM tracks WHERE composer = 'AC/DC';"
    },
    {
        "question": "Find the titles of albums that contain tracks costing more than $1.00.",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.AlbumId = T2.AlbumId WHERE T1.unitprice > 1.00 GROUP BY T2.title;"
    },
    {
        "question": "List the names of tracks that are not in the 'Rock' genre.",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.GenreId = T2.GenreId WHERE T2.name != 'Rock';"
    },
    {
        "question": "Find the names of all artists and their corresponding album titles.",
        "query": "SELECT T1.name, T3.title FROM artists AS T1 INNER JOIN albums AS T3 ON T1.ArtistId = T3.ArtistId;"
    },
    {
        "question": "What is the contact name and city of the customer with CustomerID 'ALFKI'?",
        "query": "SELECT ContactName, City FROM Customers WHERE CustomerID = 'ALFKI';"
    },
    {
        "question": "What is the name of the category to which the product 'Chai' belongs?",
        "query": "SELECT T2.CategoryName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.ProductName = 'Chai';"
    },
    {
        "question": "Find the names of all customers who have placed orders for the product 'Chai'.",
        "query": "SELECT T2.CustomerName FROM OrderDetails AS T1 INNER JOIN Orders AS T3 ON T1.OrderID = T3.OrderID INNER JOIN Customers AS T2 ON T3.CustomerID = T2.CustomerID INNER JOIN Products AS T4 ON T1.ProductID = T4.ProductID WHERE T4.ProductName = 'Chai';"
    },
    {
        "question": "What is the total quantity of 'Chang' ordered by all customers?",
        "query": "SELECT SUM(Quantity) FROM OrderDetails AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ProductName = 'Chang';"
    },
    {
        "question": "List all orders placed by the customer 'VINET' along with their order dates.",
        "query": "SELECT OrderID, OrderDate FROM Orders WHERE CustomerID = 'VINET';"
    },
    {
        "question": "What are the names of the products in the 'Beverages' category that have been ordered?",
        "query": "SELECT T3.ProductName FROM Categories AS T1 INNER JOIN Products AS T3 ON T1.CategoryID = T3.CategoryID INNER JOIN OrderDetails AS T2 ON T3.ProductID = T2.ProductID WHERE T1.CategoryName = 'Beverages';"
    },
    {
        "question": "Find the total revenue generated from the sales of 'C\u00f4te de Blaye'.",
        "query": "SELECT SUM(T1.Quantity * T2.Price) FROM OrderDetails AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ProductName = 'C\u00f4te de Blaye';"
    },
    {
        "question": "List the names of all the albums in the database.",
        "query": "SELECT Title FROM albums;"
    },
    {
        "question": "Find the name of the artist who composed the track 'Now's The Time'.",
        "query": "SELECT artists.Name FROM artists INNER JOIN albums ON artists.ArtistId = albums.ArtistId INNER JOIN tracks ON albums.AlbumId = tracks.AlbumId WHERE tracks.Name = 'Now''s The Time';"
    },
    {
        "question": "Find the names of the artists whose albums have an average track length greater than 5 minutes (300000 milliseconds).",
        "query": "SELECT T1.Name FROM artists AS T1 INNER JOIN albums AS T2 ON T1.ArtistId = T2.ArtistId INNER JOIN tracks AS T3 ON T2.AlbumId = T3.AlbumId GROUP BY T1.Name HAVING AVG(T3.Milliseconds) > 300000;"
    },
    {
        "question": "List the product IDs and names of all products.",
        "query": "SELECT ProductID, Name FROM Products"
    },
    {
        "question": "What is the total quantity of product 1001 ordered across all orders?",
        "query": "SELECT SUM(Quantity) FROM OrderItems WHERE ProductID = 1001"
    },
    {
        "question": "Which customers have placed orders for product 'Keyboard'?",
        "query": "SELECT T1.Name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN OrderItems AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T4.Name = 'Keyboard'"
    },
    {
        "question": "What is the total revenue generated by each product?",
        "query": "SELECT T2.Name, SUM(T1.Quantity * T2.Price) FROM OrderItems AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID GROUP BY T2.ProductID"
    },
    {
        "question": "Which customer placed the order with OrderID 5? Return customer's name.",
        "query": "SELECT T2.Name FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.OrderID = 5"
    },
    {
        "question": "List the products ordered by customer 'David Lee', along with the quantity of each product.",
        "query": "SELECT T3.Name, T2.Quantity FROM Customers AS T1 INNER JOIN Orders ON T1.CustomerID = Orders.CustomerID INNER JOIN OrderItems AS T2 ON Orders.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.Name = 'David Lee'"
    },
    {
        "question": "List all orders placed in the year 2023, including the customer name and order date.",
        "query": "SELECT T2.Name, T1.OrderDate FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T1.OrderDate) = '2023'"
    },
    {
        "question": "What is the total amount spent by each customer in the Chinook database?",
        "query": "SELECT c.CustomerId, c.FirstName, c.LastName, SUM(i.Total) AS TotalSpent FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId GROUP BY c.CustomerId;"
    },
    {
        "question": "What is the name of the artist who has the most tracks in the Chinook database?",
        "query": "SELECT a.Name FROM Artist a JOIN Album al ON a.ArtistId = al.ArtistId JOIN Track t ON al.AlbumId = t.AlbumId GROUP BY a.ArtistId ORDER BY COUNT(t.TrackId) DESC LIMIT 1;"
    },
    {
        "question": "List all the albums in the Rock genre.",
        "query": "SELECT al.Title FROM Album al JOIN Track t ON al.AlbumId = t.AlbumId JOIN Genre g ON t.GenreId = g.GenreId WHERE g.Name = 'Rock';"
    },
    {
        "question": "List all the playlists and the number of tracks in each playlist.",
        "query": "SELECT p.Name, COUNT(pt.TrackId) AS NumberOfTracks FROM Playlist p JOIN PlaylistTrack pt ON p.PlaylistId = pt.PlaylistId GROUP BY p.PlaylistId;"
    },
    {
        "question": "List the names of all customers who have made a purchase in the year 2010.",
        "query": "SELECT c.FirstName, c.LastName FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId WHERE strftime('%Y', i.InvoiceDate) = '2010';"
    },
    {
        "question": "What is the total revenue generated by sales of tracks in the Pop genre?",
        "query": "SELECT SUM(il.UnitPrice * il.Quantity) FROM InvoiceLine il JOIN Track t ON il.TrackId = t.TrackId JOIN Genre g ON t.GenreId = g.GenreId WHERE g.Name = 'Pop';"
    },
    {
        "question": "List the names of all the playlists that contain the track with TrackId 1.",
        "query": "SELECT p.Name FROM Playlist p JOIN PlaylistTrack pt ON p.PlaylistId = pt.PlaylistId WHERE pt.TrackId = 1;"
    },
    {
        "question": "List the names of artists and the number of albums they have.",
        "query": "SELECT T1.name, COUNT(T2.albumid) FROM artists AS T1 INNER JOIN albums AS T2 ON T1.artistid = T2.artistid GROUP BY T1.name;"
    },
    {
        "question": "How many albums are in the Chinook database?",
        "query": "SELECT COUNT(*) FROM Album;"
    },
    {
        "question": "What is the name of the album with AlbumId 1?",
        "query": "SELECT Title FROM Album WHERE AlbumId = 1;"
    },
    {
        "question": "What is the name of the invoice with InvoiceId 1?",
        "query": "SELECT InvoiceId FROM Invoice WHERE InvoiceId = 1;"
    },
    {
        "question": "How many invoice items are associated with InvoiceId 1?",
        "query": "SELECT COUNT(*) FROM InvoiceLine WHERE InvoiceId = 1;"
    },
    {
        "question": "How many tracks are in the playlist with PlaylistId 1?",
        "query": "SELECT COUNT(*) FROM PlaylistTrack WHERE PlaylistId = 1;"
    },
    {
        "question": "What is the name of the track with TrackId 1?",
        "query": "SELECT Name FROM Track WHERE TrackId = 1;"
    },
    {
        "question": "How many tracks are there in the database?",
        "query": "SELECT COUNT(*) FROM Track;"
    },
    {
        "question": "List the names of all tracks in the album 'For Those About To Rock We Salute You'.",
        "query": "SELECT T2.Name FROM Album AS T1 INNER JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T1.Title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "What is the total amount spent by the customer with CustomerId 1?",
        "query": "SELECT SUM(Total) FROM Invoice WHERE CustomerId = 1;"
    },
    {
        "question": "List the names of all rock songs.",
        "query": "SELECT T3.Name FROM Genre AS T1 INNER JOIN Track AS T3 ON T1.GenreId = T3.GenreId WHERE T1.Name = 'Rock';"
    },
    {
        "question": "List the names of all playlists that contain the track 'Enter Sandman'.",
        "query": "SELECT T1.Name FROM Playlist AS T1 INNER JOIN PlaylistTrack AS T2 ON T1.PlaylistId = T2.PlaylistId INNER JOIN Track AS T3 ON T2.TrackId = T3.TrackId WHERE T3.Name = 'Enter Sandman';"
    },
    {
        "question": "What are the names of the tracks that are in the 'Rock' genre?",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Rock';"
    },
    {
        "question": "What is the total length of all the tracks in the 'Rock' genre in seconds?",
        "query": "SELECT SUM(milliseconds) / 1000 FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Rock';"
    },
    {
        "question": "What is the average unit price of tracks in the 'Metal' genre?",
        "query": "SELECT AVG(unitprice) FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Metal';"
    },
    {
        "question": "What is the name of the genre with the highest average track unit price?",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid GROUP BY T2.name ORDER BY AVG(T1.unitprice) DESC LIMIT 1;"
    },
    {
        "question": "What are the names of all albums released by Metallica?",
        "query": "SELECT AlbumName FROM albums WHERE ArtistId = (SELECT ArtistId FROM artists WHERE ArtistName = 'Metallica')"
    },
    {
        "question": "How many albums has Iron Maiden released?",
        "query": "SELECT COUNT(*) FROM albums WHERE ArtistId = (SELECT ArtistId FROM artists WHERE ArtistName = 'Iron Maiden')"
    },
    {
        "question": "What is the total length of the album 'Powerslave' by Iron Maiden?",
        "query": "SELECT SUM(TrackLength) FROM tracks WHERE AlbumId = (SELECT AlbumId FROM albums WHERE AlbumName = 'Powerslave' AND ArtistId = (SELECT ArtistId FROM artists WHERE ArtistName = 'Iron Maiden'))"
    },
    {
        "question": "List the tracks from the album 'Master of Puppets' in order.",
        "query": "SELECT TrackName FROM tracks WHERE AlbumId = (SELECT AlbumId FROM albums WHERE AlbumName = 'Master of Puppets') ORDER BY TrackNumber"
    },
    {
        "question": "What is the name of the longest track on the album '...And Justice for All' by Metallica?",
        "query": "SELECT TrackName FROM tracks WHERE AlbumId = (SELECT AlbumId FROM albums WHERE AlbumName = '...And Justice for All' AND ArtistId = (SELECT ArtistId FROM artists WHERE ArtistName = 'Metallica')) ORDER BY TrackLength DESC LIMIT 1"
    },
    {
        "question": "Which artist has released the most albums?",
        "query": "SELECT ArtistName FROM artists WHERE ArtistId = (SELECT ArtistId FROM albums GROUP BY ArtistId ORDER BY COUNT(*) DESC LIMIT 1)"
    },
    {
        "question": "What is the average track length for all albums by Megadeth?",
        "query": "SELECT AVG(TrackLength) FROM tracks WHERE AlbumId IN (SELECT AlbumId FROM albums WHERE ArtistId = (SELECT ArtistId FROM artists WHERE ArtistName = 'Megadeth'))"
    },
    {
        "question": "List all albums released in 1986.",
        "query": "SELECT AlbumName FROM albums WHERE ReleaseYear = 1986"
    },
    {
        "question": "Find the names of all artists who have released albums with a total length greater than 70 minutes.",
        "query": "SELECT ArtistName FROM artists WHERE ArtistId IN (SELECT ArtistId FROM albums WHERE AlbumId IN (SELECT AlbumId FROM tracks GROUP BY AlbumId HAVING SUM(TrackLength) > 70))"
    },
    {
        "question": "What is the shortest track on any album released before 1990?",
        "query": "SELECT TrackName FROM tracks WHERE AlbumId IN (SELECT AlbumId FROM albums WHERE ReleaseYear < 1990) ORDER BY TrackLength ASC LIMIT 1"
    },
    {
        "question": "List the albums with their titles and the number of tracks they contain, ordered by the number of tracks in descending order.",
        "query": "SELECT T1.title, COUNT(T2.trackid) FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid GROUP BY T1.title ORDER BY COUNT(T2.trackid) DESC;"
    },
    {
        "question": "What are the titles of the albums that have tracks longer than 5 minutes (300000 milliseconds)?",
        "query": "SELECT T1.title FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid WHERE T2.milliseconds > 300000;"
    },
    {
        "question": "What is the average duration of tracks in the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT AVG(milliseconds) FROM Tracks WHERE albumid = (SELECT albumid FROM Albums WHERE title = 'For Those About To Rock We Salute You');"
    },
    {
        "question": "What is the total cost of all tracks purchased by the customer 'Jane Peacock'?",
        "query": "SELECT SUM(T1.unitprice) FROM InvoiceItems AS T1 INNER JOIN Invoices AS T2 ON T1.invoiceid = T2.invoiceid INNER JOIN Customers AS T3 ON T2.customerid = T3.customerid WHERE T3.firstname = 'Jane' AND T3.lastname = 'Peacock';"
    },
    {
        "question": "List the names of all customers who have purchased tracks from the album 'Let There Be Rock'?",
        "query": "SELECT T3.firstname, T3.lastname FROM Albums AS T1 INNER JOIN Tracks AS T2 ON T1.albumid = T2.albumid INNER JOIN InvoiceItems AS T3 ON T2.trackid = T3.trackid INNER JOIN Invoices AS T4 ON T3.invoiceid = T4.invoiceid INNER JOIN Customers AS T5 ON T4.customerid = T5.customerid WHERE T1.title = 'Let There Be Rock';"
    },
    {
        "question": "What is the total number of tracks sold for each album?",
        "query": "SELECT albums.title, SUM(invoices.quantity) AS total_tracks_sold FROM albums JOIN tracks ON albums.albumid = tracks.albumid JOIN invoice_items ON tracks.trackid = invoice_items.trackid JOIN invoices ON invoice_items.invoiceid = invoices.invoiceid GROUP BY albums.title;"
    },
    {
        "question": "List the names of customers who purchased tracks composed by 'U2'.",
        "query": "SELECT customers.firstname, customers.lastname FROM customers JOIN invoices ON customers.customerid = invoices.customerid JOIN invoice_items ON invoices.invoiceid = invoice_items.invoiceid JOIN tracks ON invoice_items.trackid = tracks.trackid WHERE tracks.composer = 'U2';"
    },
    {
        "question": "What is the total revenue generated from sales of tracks in the 'Rock' genre?",
        "query": "SELECT SUM(invoice_items.unitprice * invoice_items.quantity) FROM invoice_items JOIN tracks ON invoice_items.trackid = tracks.trackid JOIN genres ON tracks.genreid = genres.genreid WHERE genres.name = 'Rock';"
    },
    {
        "question": "List the names of the top 5 most purchased tracks.",
        "query": "SELECT tracks.name FROM tracks JOIN invoice_items ON tracks.trackid = invoice_items.trackid GROUP BY tracks.name ORDER BY SUM(invoice_items.quantity) DESC LIMIT 5;"
    },
    {
        "question": "List the albums released in 1969.",
        "query": "SELECT title FROM albums WHERE year = 1969"
    },
    {
        "question": "List the titles of albums along with the number of tracks on each album.",
        "query": "SELECT T1.title, COUNT(T2.name) FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.title = T2.album GROUP BY T1.title"
    },
    {
        "question": "What is the name of the longest track on the 'Abbey Road' album?",
        "query": "SELECT name FROM tracks WHERE album = 'Abbey Road' ORDER BY duration DESC LIMIT 1"
    },
    {
        "question": "List all tracks that are longer than 5 minutes.",
        "query": "SELECT name FROM tracks WHERE duration > 300"
    },
    {
        "question": "List the names of tracks on albums released before 1968.",
        "query": "SELECT T2.name FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.title = T2.album WHERE T1.year < 1968"
    },
    {
        "question": "List the names of the tracks and their composers, sorted alphabetically by track name.",
        "query": "SELECT name, composer FROM tracks ORDER BY name;"
    },
    {
        "question": "What is the total size (in bytes) of all tracks?",
        "query": "SELECT SUM(bytes) FROM tracks;"
    },
    {
        "question": "List the names and media types of all tracks.",
        "query": "SELECT name, mediatypeid FROM tracks;"
    },
    {
        "question": "List the titles of albums that have tracks longer than 6 minutes.",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T1.milliseconds > 360000;"
    },
    {
        "question": "What is the average track length (in milliseconds) for each album?",
        "query": "SELECT T2.title, AVG(T1.milliseconds) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid GROUP BY T2.title;"
    },
    {
        "question": "What is the average length of tracks in each genre?",
        "query": "SELECT T2.name, AVG(T1.milliseconds) FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid GROUP BY T2.name;"
    },
    {
        "question": "What are the names of the artists who have composed tracks?",
        "query": "SELECT DISTINCT composer FROM tracks WHERE composer IS NOT NULL;"
    },
    {
        "question": "What are the names and unit prices of all tracks costing more than $0.99?",
        "query": "SELECT Name, UnitPrice FROM tracks WHERE UnitPrice > 0.99;"
    },
    {
        "question": "List the names of all customers who have made a purchase in 2010.",
        "query": "SELECT T2.FirstName, T2.LastName FROM invoices AS T1 INNER JOIN customers AS T2 ON T1.CustomerId = T2.CustomerId WHERE STRFTIME('%Y', T1.InvoiceDate) = '2010';"
    },
    {
        "question": "List the names of the top 5 most expensive tracks.",
        "query": "SELECT Name FROM tracks ORDER BY UnitPrice DESC LIMIT 5;"
    },
    {
        "question": "How many invoices were issued in the year 2011?",
        "query": "SELECT COUNT(*) FROM invoices WHERE STRFTIME('%Y', InvoiceDate) = '2011';"
    },
    {
        "question": "What are the names of all playlists created by a customer with the first name 'Helena'?",
        "query": "SELECT T2.Name FROM customers AS T1 INNER JOIN playlists AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = 'Helena';"
    },
    {
        "question": "List all tracks that are shorter than the average track length.",
        "query": "SELECT name FROM tracks WHERE milliseconds < (SELECT AVG(milliseconds) FROM tracks);"
    },
    {
        "question": "What is the total cost of all tracks in the 'Jazz' genre?",
        "query": "SELECT SUM(T1.unitprice) FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Jazz';"
    },
    {
        "question": "List the names and composers of all tracks that have a composer.",
        "query": "SELECT name, composer FROM tracks WHERE composer IS NOT NULL;"
    },
    {
        "question": "List the names of all tracks purchased by the customer with the email 'luisrojas@yahoo.cl'.",
        "query": "SELECT T3.name FROM customers AS T1 INNER JOIN invoices AS T2 ON T1.customerid = T2.customerid INNER JOIN invoicelines AS T3 ON T2.invoiceid = T3.invoiceid INNER JOIN tracks AS T4 ON T3.trackid = T4.trackid WHERE T1.email = 'luisrojas@yahoo.cl';"
    },
    {
        "question": "What is the total amount spent by the customer with customerid 1?",
        "query": "SELECT SUM(total) FROM invoices WHERE customerid = 1;"
    },
    {
        "question": "List the names of all playlists that contain the track 'Now's The Time'.",
        "query": "SELECT T2.name FROM playlisttracks AS T1 INNER JOIN playlists AS T2 ON T1.playlistid = T2.playlistid INNER JOIN tracks AS T3 ON T1.trackid = T3.trackid WHERE T3.name = 'Now''s The Time';"
    },
    {
        "question": "Which media types are used by tracks in the 'Alternative & Punk' genre?",
        "query": "SELECT DISTINCT T3.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid INNER JOIN mediatypes AS T3 ON T1.mediatypeid = T3.mediatypeid WHERE T2.name = 'Alternative & Punk';"
    },
    {
        "question": "What is the average unit price of tracks purchased in the year 2010?",
        "query": "SELECT AVG(T3.unitprice) FROM invoices AS T1 INNER JOIN invoicelines AS T2 ON T1.invoiceid = T2.invoiceid INNER JOIN tracks AS T3 ON T2.trackid = T3.trackid WHERE STRFTIME('%Y', T1.invoicedate) = '2010';"
    },
    {
        "question": "List the names of all artists whose tracks are included in the playlist '90\u2019s Music'.",
        "query": "SELECT T4.name FROM playlisttracks AS T1 INNER JOIN playlists AS T2 ON T1.playlistid = T2.playlistid INNER JOIN tracks AS T3 ON T1.trackid = T3.trackid INNER JOIN albums AS T4 ON T3.albumid = T4.albumid INNER JOIN artists as T5 ON T4.artistid = T5.artistid WHERE T2.name = '90\u2019s Music';"
    },
    {
        "question": "List the names of all tracks that belong to a playlist with the name 'Music'?",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN playlist_track AS T2 ON T1.trackid = T2.trackid INNER JOIN playlists AS T3 ON T2.playlistid = T3.playlistid WHERE T3.name = 'Music';"
    },
    {
        "question": "What is the total cost of all tracks in the 'Grunge' genre?",
        "query": "SELECT SUM(unitprice) FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Grunge');"
    },
    {
        "question": "Which album has the highest average track unit price?",
        "query": "SELECT title FROM albums WHERE albumid = (SELECT albumid FROM tracks GROUP BY albumid ORDER BY AVG(unitprice) DESC LIMIT 1);"
    },
    {
        "question": "List the names of all playlists that contain at least one track composed by 'Angus Young'?",
        "query": "SELECT DISTINCT T3.name FROM tracks AS T1 INNER JOIN playlist_track AS T2 ON T1.trackid = T2.trackid INNER JOIN playlists AS T3 ON T2.playlistid = T3.playlistid WHERE T1.composer = 'Angus Young';"
    },
    {
        "question": "What are the names of the playlists and the number of tracks they contain?",
        "query": "SELECT T2.Name, COUNT(T1.TrackId) FROM playlist_track AS T1 INNER JOIN playlists AS T2 ON T1.PlaylistId = T2.PlaylistId GROUP BY T2.Name;"
    },
    {
        "question": "Which genre has the largest number of tracks?",
        "query": "SELECT name FROM genres WHERE genreid = (SELECT genreid FROM tracks GROUP BY genreid ORDER BY COUNT(*) DESC LIMIT 1);"
    },
    {
        "question": "What is the average length of tracks in the 'Jazz' genre?",
        "query": "SELECT AVG(T1.milliseconds) FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Jazz';"
    },
    {
        "question": "List the genres and the number of tracks in each genre.",
        "query": "SELECT T2.name, COUNT(T1.trackid) FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid GROUP BY T2.name;"
    },
    {
        "question": "List the tracks that belong to the same genre as 'For Those About To Rock (We Salute You)'.",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.genreid = (SELECT genreid FROM tracks WHERE name = 'For Those About To Rock (We Salute You)');"
    },
    {
        "question": "What is the average duration of tracks in the 'Metal' genre?",
        "query": "SELECT AVG(milliseconds) FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Metal');"
    },
    {
        "question": "Which album has the highest average track duration?",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid GROUP BY T1.albumid ORDER BY AVG(T1.milliseconds) DESC LIMIT 1;"
    },
    {
        "question": "What is the name of the album with the most expensive track?",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid ORDER BY T1.unitprice DESC LIMIT 1;"
    },
    {
        "question": "How many tracks are there by the composer 'Angus Young'?",
        "query": "SELECT COUNT(*) FROM tracks WHERE composer = 'Angus Young';"
    },
    {
        "question": "Find the name and genre of all albums released in 1995.",
        "query": "SELECT title, genre FROM albums WHERE release_year = 1995;"
    },
    {
        "question": "What are the names of all the songs on the album 'Jagged Little Pill'?",
        "query": "SELECT song_title FROM songs WHERE album_id = (SELECT album_id FROM albums WHERE title = 'Jagged Little Pill');"
    },
    {
        "question": "List the artists and the titles of their albums released after 2000, ordered by artist name.",
        "query": "SELECT artists.artist_name, albums.title FROM artists INNER JOIN albums ON artists.artist_id = albums.artist_id WHERE albums.release_year > 2000 ORDER BY artists.artist_name;"
    },
    {
        "question": "What is the average duration of songs in the 'Rock' genre?",
        "query": "SELECT AVG(duration) FROM songs WHERE genre = 'Rock';"
    },
    {
        "question": "Which album has the longest song, and what is the title and duration of that song?",
        "query": "SELECT albums.title, songs.song_title, songs.duration FROM albums INNER JOIN songs ON albums.album_id = songs.album_id WHERE songs.duration = (SELECT MAX(duration) FROM songs);"
    },
    {
        "question": "How many albums were released by each artist in the 'Pop' genre?",
        "query": "SELECT artists.artist_name, COUNT(albums.album_id) FROM artists INNER JOIN albums ON artists.artist_id = albums.artist_id WHERE albums.genre = 'Pop' GROUP BY artists.artist_name;"
    },
    {
        "question": "List the names of all artists who have released albums in more than one genre.",
        "query": "SELECT artist_name FROM artists INNER JOIN albums ON artists.artist_id = albums.artist_id GROUP BY artist_name HAVING COUNT(DISTINCT genre) > 1;"
    },
    {
        "question": "Find the title of the album with the shortest average song duration.",
        "query": "SELECT title FROM albums INNER JOIN songs ON albums.album_id = songs.album_id GROUP BY title ORDER BY AVG(duration) ASC LIMIT 1;"
    },
    {
        "question": "List the song titles and durations of all songs longer than 5 minutes, along with the album they belong to.",
        "query": "SELECT songs.song_title, songs.duration, albums.title FROM songs INNER JOIN albums ON songs.album_id = albums.album_id WHERE songs.duration > 300;"
    },
    {
        "question": "List the names of all albums released after the year 2000.",
        "query": "SELECT title FROM albums WHERE strftime('%Y', releasedate) > '2000';"
    },
    {
        "question": "What are the names of the tracks purchased by customers in Germany?",
        "query": "SELECT T3.name FROM customers AS T1 INNER JOIN invoicelines AS T2 ON T1.customerid = T2.invoiceid INNER JOIN tracks AS T3 ON T2.trackid = T3.trackid WHERE T1.country = 'Germany';"
    },
    {
        "question": "What is the total length (in milliseconds) of all tracks in the album 'Let There Be Rock'?",
        "query": "SELECT SUM(T1.milliseconds) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T2.title = 'Let There Be Rock';"
    },
    {
        "question": "Which media type has the highest number of tracks sold?",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN mediatypes AS T2 ON T1.mediatypeid = T2.mediatypeid GROUP BY T2.name ORDER BY COUNT(T1.trackid) DESC LIMIT 1;"
    },
    {
        "question": "List the tracks that belong to a playlist named 'Music'.",
        "query": "SELECT T3.name FROM playlisttrack AS T1 INNER JOIN playlists AS T2 ON T1.playlistid = T2.playlistid INNER JOIN tracks AS T3 ON T1.trackid = T3.trackid WHERE T2.name = 'Music';"
    },
    {
        "question": "How many playlists include the track 'For Those About To Rock (We Salute You)'?",
        "query": "SELECT COUNT(DISTINCT T1.playlistid) FROM playlisttrack AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid WHERE T2.name = 'For Those About To Rock (We Salute You)';"
    },
    {
        "question": "What are the titles of the albums released in 2000?",
        "query": "SELECT title FROM albums WHERE strftime('%Y', release_date) = '2000';"
    },
    {
        "question": "What is the total number of tracks in the 'Rock' genre?",
        "query": "SELECT COUNT(*) FROM tracks WHERE genre_id = (SELECT genre_id FROM genres WHERE name = 'Rock');"
    },
    {
        "question": "What is the total revenue generated from sales of the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT SUM(quantity * T2.unit_price) FROM invoice_items AS T1 INNER JOIN albums AS T2 ON T1.album_id = T2.album_id WHERE T2.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "List the names of all playlists and the number of tracks they contain.",
        "query": "SELECT T2.name, COUNT(T1.track_id) FROM playlist_tracks AS T1 INNER JOIN playlists AS T2 ON T1.playlist_id = T2.playlist_id GROUP BY T2.name;"
    },
    {
        "question": "What are the names of all the rock albums?",
        "query": "SELECT T1.title FROM albums AS T1 INNER JOIN artists AS T2 ON T1.artist_id = T2.artist_id INNER JOIN genres AS T3 ON T1.genre_id = T3.genre_id WHERE T3.name = 'Rock';"
    },
    {
        "question": "Show the schema for the table named 'employees'.",
        "query": "SELECT sql FROM sqlite_master WHERE name = 'employees';"
    },
    {
        "question": "List all employees' names and their corresponding department.",
        "query": "SELECT employee_name, department FROM employees;"
    },
    {
        "question": "Find the names of all employees in the 'Sales' department.",
        "query": "SELECT employee_name FROM employees WHERE department = 'Sales';"
    },
    {
        "question": "What is the average salary of employees in the 'Marketing' department?",
        "query": "SELECT AVG(salary) FROM employees WHERE department = 'Marketing';"
    },
    {
        "question": "List the names of all employees who earn more than $60,000.",
        "query": "SELECT employee_name FROM employees WHERE salary > 60000;"
    },
    {
        "question": "Which department has the highest average salary?",
        "query": "SELECT department FROM employees GROUP BY department ORDER BY AVG(salary) DESC LIMIT 1;"
    },
    {
        "question": "How many employees are there in each department?",
        "query": "SELECT department, COUNT(*) FROM employees GROUP BY department;"
    },
    {
        "question": "Find the names of employees whose names start with 'J'.",
        "query": "SELECT employee_name FROM employees WHERE employee_name LIKE 'J%';"
    },
    {
        "question": "What is the total salary expense for the company?",
        "query": "SELECT SUM(salary) FROM employees;"
    },
    {
        "question": "List the departments and the number of employees in each department, but only for departments with more than 3 employees.",
        "query": "SELECT department, COUNT(*) FROM employees GROUP BY department HAVING COUNT(*) > 3;"
    },
    {
        "question": "Find the employee with the lowest salary in the 'Sales' department.",
        "query": "SELECT employee_name FROM employees WHERE department = 'Sales' ORDER BY salary ASC LIMIT 1;"
    },
    {
        "question": "Find the names of all the distinct departments in the company.",
        "query": "SELECT DISTINCT department FROM employees;"
    },
    {
        "question": "List the playlists that contain the track 'For Those About To Rock (We Salute You)'.",
        "query": "SELECT playlists.name FROM playlists INNER JOIN playlist_tracks ON playlists.id = playlist_tracks.playlist_id INNER JOIN tracks ON playlist_tracks.track_id = tracks.id WHERE tracks.name = 'For Those About To Rock (We Salute You)';"
    },
    {
        "question": "What is the total cost of all the tracks in the 'Grunge' playlist?",
        "query": "SELECT SUM(tracks.unit_price) FROM tracks INNER JOIN playlist_tracks ON tracks.id = playlist_tracks.track_id INNER JOIN playlists ON playlist_tracks.playlist_id = playlists.id WHERE playlists.name = 'Grunge';"
    },
    {
        "question": "List the names of all the artists and the number of albums they have.",
        "query": "SELECT artists.name, COUNT(albums.id) AS number_of_albums FROM artists INNER JOIN albums ON artists.id = albums.artist_id GROUP BY artists.name;"
    },
    {
        "question": "Which customers have placed orders for 'Product A'?",
        "query": "SELECT DISTINCT T1.Name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.ProductName = 'Product A'"
    },
    {
        "question": "What is the average order amount for each product?",
        "query": "SELECT ProductName, AVG(Amount) AS AverageAmount FROM Orders GROUP BY ProductName"
    },
    {
        "question": "List the customers who have spent more than $100 in total.",
        "query": "SELECT CustomerID, SUM(Amount) AS TotalSpent FROM Orders GROUP BY CustomerID HAVING TotalSpent > 100"
    },
    {
        "question": "Which product has the highest average order amount?",
        "query": "SELECT ProductName FROM Orders GROUP BY ProductName ORDER BY AVG(Amount) DESC LIMIT 1"
    },
    {
        "question": "List the names of customers who have ordered 'Product B' but not 'Product A'.",
        "query": "SELECT T1.Name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.ProductName = 'Product B' EXCEPT SELECT T1.Name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.ProductName = 'Product A'"
    },
    {
        "question": "What is the total amount spent on each product by customer 'John'?",
        "query": "SELECT ProductName, SUM(Amount) AS TotalSpent FROM Orders WHERE CustomerID = (SELECT CustomerID FROM Customers WHERE Name = 'John') GROUP BY ProductName"
    },
    {
        "question": "List the products ordered by customers who live in 'City X'.",
        "query": "SELECT DISTINCT T2.ProductName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.City = 'City X'"
    },
    {
        "question": "What is the date of the latest order placed by each customer?",
        "query": "SELECT CustomerID, MAX(OrderDate) AS LatestOrder FROM Orders GROUP BY CustomerID"
    },
    {
        "question": "List the names of all tracks that cost more than $0.99 and are longer than 3 minutes.",
        "query": "SELECT name FROM tracks WHERE unitprice > 0.99 AND milliseconds > 180000;"
    },
    {
        "question": "List the names of the artists and their associated albums.",
        "query": "SELECT T1.name, T2.title FROM artists AS T1 INNER JOIN albums AS T2 ON T1.artistid = T2.artistid;"
    },
    {
        "question": "List the names of all customers who have purchased tracks from the 'Alternative & Punk' genre.",
        "query": "SELECT T1.first_name, T1.last_name FROM customers AS T1 INNER JOIN invoices AS T2 ON T1.customer_id = T2.customer_id INNER JOIN invoice_items AS T3 ON T2.invoice_id = T3.invoice_id INNER JOIN tracks AS T4 ON T3.track_id = T4.track_id WHERE T4.genre_id = (SELECT genre_id FROM genres WHERE name = 'Alternative & Punk');"
    },
    {
        "question": "Find the name and birth date of all employees.",
        "query": "SELECT emp_name, birth_date FROM employees;"
    },
    {
        "question": "List the names of all departments.",
        "query": "SELECT dept_name FROM departments;"
    },
    {
        "question": "What is the salary of the employee named 'John Smith'?",
        "query": "SELECT salary FROM employees WHERE emp_name = 'John Smith';"
    },
    {
        "question": "Which department does 'Alice Johnson' work in?",
        "query": "SELECT dept_name FROM departments WHERE dept_id = (SELECT dept_id FROM employees WHERE emp_name = 'Alice Johnson');"
    },
    {
        "question": "What is the average salary of employees in the 'Research' department?",
        "query": "SELECT AVG(salary) FROM employees WHERE dept_id = (SELECT dept_id FROM departments WHERE dept_name = 'Research');"
    },
    {
        "question": "Find the names of all employees who were born before 1990.",
        "query": "SELECT emp_name FROM employees WHERE birth_date < '1990-01-01';"
    },
    {
        "question": "List the names of all departments and their managers.",
        "query": "SELECT T1.dept_name, T2.emp_name FROM departments AS T1 INNER JOIN employees AS T2 ON T1.mgr_id = T2.emp_id;"
    },
    {
        "question": "What is the name of the manager of the 'Marketing' department?",
        "query": "SELECT T2.emp_name FROM departments AS T1 INNER JOIN employees AS T2 ON T1.mgr_id = T2.emp_id WHERE T1.dept_name = 'Marketing';"
    },
    {
        "question": "List the names and salaries of all employees who earn more than $50,000.",
        "query": "SELECT emp_name, salary FROM employees WHERE salary > 50000;"
    },
    {
        "question": "What is the total salary budget for the 'Sales' department?",
        "query": "SELECT SUM(salary) FROM employees WHERE dept_id = (SELECT dept_id FROM departments WHERE dept_name = 'Sales');"
    },
    {
        "question": "Find the names and birth dates of all employees who work in the same department as 'David Lee'.",
        "query": "SELECT emp_name, birth_date FROM employees WHERE dept_id = (SELECT dept_id FROM employees WHERE emp_name = 'David Lee');"
    },
    {
        "question": "List the department names and the number of employees in each department.",
        "query": "SELECT T1.dept_name, COUNT(T2.emp_id) FROM departments AS T1 INNER JOIN employees AS T2 ON T1.dept_id = T2.dept_id GROUP BY T1.dept_name;"
    },
    {
        "question": "Find the names of employees who have the same birth date as their manager",
        "query": "SELECT T2.emp_name FROM employees AS T1 INNER JOIN employees AS T2 ON T1.emp_id = T2.mgr_id WHERE T1.birth_date = T2.birth_date"
    },
    {
        "question": "Show the definition of the trigger named 'my_trigger' (if it exists).",
        "query": "SELECT sql FROM sqlite_master WHERE type='trigger' AND name='my_trigger';"
    },
    {
        "question": "Show the SQL definition of the view named 'my_view' (if it exists).",
        "query": "SELECT sql FROM sqlite_master WHERE type='view' AND name='my_view';"
    },
    {
        "question": "What are the names of all tables that have a column named 'id'?",
        "query": "SELECT name FROM sqlite_master WHERE type='table' AND sql LIKE '%id%';"
    },
    {
        "question": "Find all tables that use the INTEGER data type.",
        "query": "SELECT name FROM sqlite_master WHERE type='table' AND sql LIKE '%INTEGER%';"
    },
    {
        "question": "What is the total length of all the tracks in the database?",
        "query": "SELECT SUM(Milliseconds) FROM Track;"
    },
    {
        "question": "Who is the supervisor of each employee?",
        "query": "SELECT e.FirstName, e.LastName, s.FirstName, s.LastName FROM Employee e LEFT JOIN Employee s ON e.ReportsTo = s.EmployeeId;"
    },
    {
        "question": "What are the names of all products that cost more than $10?",
        "query": "SELECT name FROM products WHERE price > 10"
    },
    {
        "question": "What is the total value of all orders?",
        "query": "SELECT SUM(total_amount) FROM orders"
    },
    {
        "question": "What is the average order total?",
        "query": "SELECT AVG(total_amount) FROM orders"
    },
    {
        "question": "What are the order IDs and total amounts for all orders placed by customer with ID 1?",
        "query": "SELECT id, total_amount FROM orders WHERE customer_id = 1"
    },
    {
        "question": "What is the total amount spent by customer with ID 1?",
        "query": "SELECT SUM(total_amount) FROM orders WHERE customer_id = 1"
    },
    {
        "question": "What is the name of the customer who placed order 1?",
        "query": "SELECT T2.name FROM orders AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.id WHERE T1.id = 1"
    },
    {
        "question": "List the products ordered by each customer, including customer and product names.",
        "query": "SELECT T1.name, T3.name FROM customers AS T1 INNER JOIN orders AS T2 ON T1.id = T2.customer_id INNER JOIN order_items AS T4 ON T2.id = T4.order_id INNER JOIN products AS T3 ON T4.product_id = T3.id"
    },
    {
        "question": "What is the most expensive product purchased in order 2?",
        "query": "SELECT T2.name FROM order_items AS T1 INNER JOIN products AS T2 ON T1.product_id = T2.id WHERE T1.order_id = 2 ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "question": "Which customer has placed the most orders?",
        "query": "SELECT customer_id FROM orders GROUP BY customer_id ORDER BY COUNT(id) DESC LIMIT 1"
    },
    {
        "question": "What is the total revenue generated from sales of product with ID 3?",
        "query": "SELECT SUM(T1.quantity * T2.price) FROM order_items AS T1 INNER JOIN products AS T2 ON T1.product_id = T2.id WHERE T1.product_id = 3"
    },
    {
        "question": "Which product has been sold the most (in terms of quantity)?",
        "query": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY SUM(quantity) DESC LIMIT 1"
    },
    {
        "question": "What is the name of the artist who performed the track with the longest duration?",
        "query": "SELECT artists.name FROM tracks INNER JOIN albums ON tracks.album_id = albums.album_id INNER JOIN artists ON albums.artist_id = artists.artist_id ORDER BY milliseconds DESC LIMIT 1;"
    },
    {
        "question": "What is the total duration of all tracks in the '90s Music' playlist?",
        "query": "SELECT SUM(milliseconds) FROM tracks INNER JOIN playlist_tracks ON tracks.track_id = playlist_tracks.track_id WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE name = '90s Music');"
    },
    {
        "question": "What is the average duration of tracks in the 'Classical' genre?",
        "query": "SELECT AVG(milliseconds) FROM tracks WHERE genre_id = (SELECT genre_id FROM genres WHERE name = 'Classical');"
    },
    {
        "question": "List all tracks in the 'Brazilian Music' playlist, including their name, album, and artist.",
        "query": "SELECT tracks.name AS TrackName, albums.title AS AlbumTitle, artists.name AS ArtistName FROM tracks INNER JOIN albums ON tracks.album_id = albums.album_id INNER JOIN artists ON albums.artist_id = artists.artist_id INNER JOIN playlist_tracks ON tracks.track_id = playlist_tracks.track_id WHERE playlist_tracks.playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Brazilian Music');"
    },
    {
        "question": "How many genres are there in the database?",
        "query": "SELECT COUNT(*) FROM genres;"
    },
    {
        "question": "What is the name and composer of the track with trackid 350?",
        "query": "SELECT name, composer FROM tracks WHERE trackid = 350;"
    },
    {
        "question": "How many tracks are in the playlist '90\u2019s Hip-Hop'?",
        "query": "SELECT COUNT(*) FROM playlist_tracks WHERE playlistid = (SELECT playlistid FROM playlists WHERE name = '90\u2019s Hip-Hop');"
    },
    {
        "question": "What are the names of the tracks in the playlist 'Grunge'?",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid WHERE T1.playlistid = (SELECT playlistid FROM playlists WHERE name = 'Grunge');"
    },
    {
        "question": "List the artists and the number of tracks they have in the database.",
        "query": "SELECT name, COUNT(trackid) FROM artists INNER JOIN albums ON artists.artistid = albums.artistid INNER JOIN tracks ON albums.albumid = tracks.albumid GROUP BY name;"
    },
    {
        "question": "List the albums by 'Iron Maiden' and their titles.",
        "query": "SELECT title FROM albums WHERE artistid = (SELECT artistid FROM artists WHERE name = 'Iron Maiden');"
    },
    {
        "question": "What are the names and unit prices of the tracks in the 'Brazilian Music' playlist that cost more than $0.99?",
        "query": "SELECT T2.name, T2.unitprice FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid WHERE T1.playlistid = (SELECT playlistid FROM playlists WHERE name = 'Brazilian Music') AND T2.unitprice > 0.99;"
    },
    {
        "question": "List the genres and the average unit price of tracks within each genre.",
        "query": "SELECT genre, AVG(unitprice) FROM genres INNER JOIN tracks ON genres.genreid = tracks.genreid GROUP BY genre;"
    },
    {
        "question": "List the invoices for customer with id 16.",
        "query": "SELECT * FROM invoices WHERE customerid = 16;"
    },
    {
        "question": "What is the address of the customer named 'John Doe'?",
        "query": "SELECT Address FROM Customers WHERE Name = 'John Doe'"
    },
    {
        "question": "List the names and email addresses of all customers who live in 'New York'.",
        "query": "SELECT Name, Email FROM Customers WHERE Address LIKE '%New York%'"
    },
    {
        "question": "What are the product names and prices of all products in the 'Electronics' category?",
        "query": "SELECT ProductName, Price FROM Products WHERE Category = 'Electronics'"
    },
    {
        "question": "What are the product names and quantities of products included in order with OrderID 10?",
        "query": "SELECT T2.ProductName, T1.Quantity FROM OrderItems AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.OrderID = 10"
    },
    {
        "question": "What is the total amount spent by customer with CustomerID 5 (including all their orders)?",
        "query": "SELECT SUM(T1.Quantity * T2.Price) FROM OrderItems AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Orders AS T3 ON T1.OrderID = T3.OrderID WHERE T3.CustomerID = 5"
    },
    {
        "question": "Which customer placed the order with OrderID 25?",
        "query": "SELECT T2.Name FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.OrderID = 25"
    },
    {
        "question": "List the names of products that have been ordered more than 5 times in total (across all orders).",
        "query": "SELECT T2.ProductName FROM OrderItems AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID GROUP BY T2.ProductName HAVING SUM(T1.Quantity) > 5"
    },
    {
        "question": "What is the average price of products in the 'Books' category?",
        "query": "SELECT AVG(Price) FROM Products WHERE Category = 'Books'"
    },
    {
        "question": "List all the invoices with a billing address in the USA.",
        "query": "SELECT * FROM Invoice WHERE BillingCountry = 'USA';"
    },
    {
        "question": "List the names of the playlists and the number of tracks in each playlist.",
        "query": "SELECT p.Name, COUNT(pt.TrackId) AS NumberOfTracks FROM Playlist p LEFT JOIN PlaylistTrack pt ON p.PlaylistId = pt.PlaylistId GROUP BY p.Name;"
    },
    {
        "question": "What are the names of the tracks that are not in any playlist?",
        "query": "SELECT Name FROM Track EXCEPT SELECT t.Name FROM Track t JOIN PlaylistTrack pt ON t.TrackId = pt.TrackId;"
    },
    {
        "question": "What is the total duration of all the tracks in the album 'Let There Be Rock'?",
        "query": "SELECT SUM(Milliseconds) FROM Track WHERE AlbumId = (SELECT AlbumId FROM Album WHERE Title = 'Let There Be Rock');"
    },
    {
        "question": "List the names of the customers and the total number of tracks they have purchased.",
        "query": "SELECT c.FirstName, c.LastName, SUM(il.Quantity) AS TotalTracksPurchased FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId JOIN InvoiceLine il ON i.InvoiceId = il.InvoiceId GROUP BY c.CustomerId;"
    },
    {
        "question": "Which country has the most customers?",
        "query": "SELECT Country, COUNT(*) AS NumberOfCustomers FROM Customer GROUP BY Country ORDER BY NumberOfCustomers DESC LIMIT 1;"
    },
    {
        "question": "What are the names of all customers who live in the city 'New York'?",
        "query": "SELECT customer_name FROM Customers WHERE customer_city = 'New York';"
    },
    {
        "question": "Find the order IDs and order dates for all orders placed by the customer with customer_id 1.",
        "query": "SELECT order_id, order_date FROM Orders WHERE customer_id = 1;"
    },
    {
        "question": "List the product names and unit prices of all products in the 'Electronics' category.",
        "query": "SELECT product_name, unit_price FROM Products WHERE category = 'Electronics';"
    },
    {
        "question": "What is the total quantity of product with product_id 10 ordered in all orders?",
        "query": "SELECT SUM(quantity) FROM Order_Details WHERE product_id = 10;"
    },
    {
        "question": "Which customer placed the order with order_id 5, and what is their city?",
        "query": "SELECT T1.customer_name, T1.customer_city FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_id = 5;"
    },
    {
        "question": "List the names of all products that were included in order 2, along with their quantities and unit prices.",
        "query": "SELECT T1.product_name, T2.quantity, T1.unit_price FROM Products AS T1 INNER JOIN Order_Details AS T2 ON T1.product_id = T2.product_id WHERE T2.order_id = 2;"
    },
    {
        "question": "What is the total revenue generated by each product category?",
        "query": "SELECT T1.category, SUM(T2.quantity * T1.unit_price) AS total_revenue FROM Products AS T1 INNER JOIN Order_Details AS T2 ON T1.product_id = T2.product_id GROUP BY T1.category;"
    },
    {
        "question": "Find the customer name and order date for the order with the highest total value.",
        "query": "SELECT T2.customer_name, T1.order_date FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY (SELECT SUM(OD.quantity * P.unit_price) FROM Order_Details AS OD INNER JOIN Products AS P ON OD.product_id = P.product_id WHERE OD.order_id = T1.order_id) DESC LIMIT 1;"
    },
    {
        "question": "List the customer name, order id, and total amount for all orders, sorted by order date.",
        "query": "SELECT c.customer_name, o.order_id, SUM(od.quantity * p.unit_price) AS total_amount FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id JOIN Order_Details od ON o.order_id = od.order_id JOIN Products p ON od.product_id = p.product_id GROUP BY o.order_id ORDER BY o.order_date;"
    },
    {
        "question": "Which products have never been ordered?",
        "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 INNER JOIN Order_Details AS T2 ON T1.product_id = T2.product_id;"
    },
    {
        "question": "What is the average total cost for trips starting in Chicago?",
        "query": "SELECT AVG(total_cost) FROM Trip WHERE start_terminal = 'Chicago'"
    },
    {
        "question": "How many trips started in New York and ended in Boston?",
        "query": "SELECT COUNT(*) FROM Trip WHERE start_terminal = 'New York' AND end_terminal = 'Boston'"
    },
    {
        "question": "List the start and end terminals for all trips with a total cost greater than $500.",
        "query": "SELECT start_terminal, end_terminal FROM Trip WHERE total_cost > 500"
    },
    {
        "question": "What is the total revenue generated from trips starting in Chicago in 2023?",
        "query": "SELECT SUM(total_cost) FROM Trip WHERE start_terminal = 'Chicago' AND STRftime('%Y', start_date) = '2023'"
    },
    {
        "question": "List the trip IDs and total costs for trips that lasted longer than 10 hours.",
        "query": "SELECT trip_id, total_cost FROM Trip WHERE duration > 10"
    },
    {
        "question": "What is the earliest start date for any trip?",
        "query": "SELECT MIN(start_date) FROM Trip"
    },
    {
        "question": "How many distinct end terminals are there?",
        "query": "SELECT COUNT(DISTINCT end_terminal) FROM Trip"
    },
    {
        "question": "What is the average duration of trips starting in New York?",
        "query": "SELECT AVG(duration) FROM Trip WHERE start_terminal = 'New York'"
    },
    {
        "question": "List all trips that started and ended at the same terminal.",
        "query": "SELECT * FROM Trip WHERE start_terminal = end_terminal"
    },
    {
        "question": "Find the trip with the highest total cost.",
        "query": "SELECT * FROM Trip ORDER BY total_cost DESC LIMIT 1"
    },
    {
        "question": "What are the different start terminals used in the year 2022?",
        "query": "SELECT DISTINCT start_terminal FROM Trip WHERE STRftime('%Y', start_date) = '2022'"
    },
    {
        "question": "How many trips had a duration between 5 and 10 hours?",
        "query": "SELECT COUNT(*) FROM Trip WHERE duration BETWEEN 5 AND 10"
    },
    {
        "question": "List the trip IDs and durations of the 5 longest trips.",
        "query": "SELECT trip_id, duration FROM Trip ORDER BY duration DESC LIMIT 5"
    },
    {
        "question": "What is the total cost of all trips ending in Los Angeles?",
        "query": "SELECT SUM(total_cost) FROM Trip WHERE end_terminal = 'Los Angeles'"
    },
    {
        "question": "List the start terminals and the number of trips originating from each terminal.",
        "query": "SELECT start_terminal, COUNT(*) FROM Trip GROUP BY start_terminal"
    },
    {
        "question": "Which artists have composed tracks for the album 'Let There Be Rock'?",
        "query": "SELECT DISTINCT composer FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'Let There Be Rock');"
    },
    {
        "question": "List the names of customers who have purchased tracks composed by 'Angus Young'.",
        "query": "SELECT T3.firstname, T3.lastname FROM tracks AS T1 INNER JOIN invoice_items AS T2 ON T1.trackid = T2.trackid INNER JOIN invoices AS T4 ON T2.invoiceid = T4.invoiceid INNER JOIN customers AS T3 ON T4.customerid = T3.customerid WHERE T1.composer = 'Angus Young';"
    },
    {
        "question": "List the names of playlists that contain tracks from the album 'Big Ones'.",
        "query": "SELECT T3.name FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid INNER JOIN playlist_tracks AS T4 ON T2.trackid = T4.trackid INNER JOIN playlists AS T3 ON T4.playlistid = T3.playlistid WHERE T1.title = 'Big Ones';"
    },
    {
        "question": "Which customer has spent the most on music?",
        "query": "SELECT customerid, SUM(total) AS total_spent FROM invoices GROUP BY customerid ORDER BY total_spent DESC LIMIT 1;"
    },
    {
        "question": "What is the total quantity of all orders?",
        "query": "SELECT SUM(Quantity) FROM Orders"
    },
    {
        "question": "Find the customer ID and name of the customer who placed order number 1.",
        "query": "SELECT T1.CustomerID, T2.Name FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.OrderID = 1"
    },
    {
        "question": "List the order IDs and quantities of all orders for product number 2.",
        "query": "SELECT OrderID, Quantity FROM Orders WHERE ProductID = 2"
    },
    {
        "question": "What is the average quantity of products ordered across all orders?",
        "query": "SELECT AVG(Quantity) FROM Orders"
    },
    {
        "question": "Find the name of the product in order number 3.",
        "query": "SELECT T2.Name FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.OrderID = 3"
    },
    {
        "question": "List the customer names and the names of the products they have ordered.",
        "query": "SELECT T2.Name, T3.Name FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T1.ProductID = T3.ProductID"
    },
    {
        "question": "What is the total revenue generated from all orders, considering product prices and quantities?",
        "query": "SELECT SUM(T1.Quantity * T2.Price) FROM Orders AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "question": "Which customers have placed orders for more than one different product?",
        "query": "SELECT CustomerID FROM Orders GROUP BY CustomerID HAVING COUNT(DISTINCT ProductID) > 1"
    },
    {
        "question": "What is the total cost of all the tracks in the 'Rock' genre?",
        "query": "SELECT SUM(unitprice * bytes/1000000) FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Rock');"
    },
    {
        "question": "What are the names of the tracks in the playlist 'Grunge'??",
        "query": "SELECT T2.name FROM playlists AS T1 INNER JOIN playlist_tracks AS T3 ON T1.playlistid = T3.playlistid INNER JOIN tracks AS T2 ON T3.trackid = T2.trackid WHERE T1.Name = 'Grunge';"
    },
    {
        "question": "What are the names of all the customers who live in the USA?",
        "query": "SELECT FirstName, LastName FROM Customer WHERE Country = 'USA'"
    },
    {
        "question": "Which customer has spent the most money in the store?",
        "query": "SELECT CustomerId FROM Invoice GROUP BY CustomerId ORDER BY SUM(Total) DESC LIMIT 1"
    },
    {
        "question": "List all the tracks by AC/DC.",
        "query": "SELECT T1.Name FROM Track AS T1 INNER JOIN Album AS T2 ON T1.AlbumId = T2.AlbumId INNER JOIN Artist AS T3 ON T2.ArtistId = T3.ArtistId WHERE T3.Name = 'AC/DC'"
    },
    {
        "question": "What are the names of the top 5 most popular genres?",
        "query": "SELECT Genre.Name FROM Track INNER JOIN Genre ON Track.GenreId = Genre.GenreId GROUP BY Genre.Name ORDER BY COUNT(Track.TrackId) DESC LIMIT 5"
    },
    {
        "question": "What is the average length of a track?",
        "query": "SELECT AVG(Milliseconds) FROM Track"
    },
    {
        "question": "List all the rock music albums and their release year in descending order of popularity.",
        "query": "SELECT T2.Title, T2.ReleaseYear FROM Track AS T1 INNER JOIN Album AS T2 ON T1.AlbumId = T2.AlbumId INNER JOIN Genre AS T3 ON T1.GenreId = T3.GenreId WHERE T3.Name = 'Rock' GROUP BY T2.Title, T2.ReleaseYear ORDER BY COUNT(T1.TrackId) DESC"
    },
    {
        "question": "How many tracks are in the playlist 'Grunge'??",
        "query": "SELECT COUNT(*) FROM PlaylistTrack WHERE PlaylistId = (SELECT PlaylistId FROM Playlist WHERE Name = 'Grunge')"
    },
    {
        "question": "Show all invoices of customer with id 5 along with the billing country and total invoice amount.",
        "query": "SELECT InvoiceId, BillingCountry, Total FROM Invoice WHERE CustomerId = 5"
    },
    {
        "question": "What is the total revenue generated from invoices billed to the USA?",
        "query": "SELECT SUM(Total) FROM Invoice WHERE BillingCountry = 'USA'"
    },
    {
        "question": "List all employees and their titles.",
        "query": "SELECT FirstName, LastName, Title FROM Employee"
    },
    {
        "question": "Who is the sales support agent for the customer with CustomerId 1?",
        "query": "SELECT T2.FirstName, T2.LastName FROM Customer AS T1 INNER JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.CustomerId = 1"
    },
    {
        "question": "List all employees' names and their corresponding department names.",
        "query": "SELECT e.name, d.name FROM employees AS e JOIN departments AS d ON e.department_id = d.id;"
    },
    {
        "question": "List the names of all departments and the number of employees in each department.",
        "query": "SELECT d.name, COUNT(e.id) AS num_employees FROM departments AS d LEFT JOIN employees AS e ON d.id = e.department_id GROUP BY d.name;"
    },
    {
        "question": "List the names of all employees who work in the same department as 'John Smith'.",
        "query": "SELECT name FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE name = 'John Smith') AND name != 'John Smith';"
    },
    {
        "question": "Find the department with the highest average salary.",
        "query": "SELECT d.name FROM departments AS d INNER JOIN employees AS e ON d.id = e.department_id GROUP BY d.name ORDER BY AVG(e.salary) DESC LIMIT 1;"
    },
    {
        "question": "List the names of employees who earn more than the average salary of their department.",
        "query": "SELECT e.name FROM employees AS e INNER JOIN departments AS d ON e.department_id = d.id WHERE e.salary > (SELECT AVG(salary) FROM employees WHERE department_id = e.department_id);"
    },
    {
        "question": "What are the names of all the train lines?",
        "query": "SELECT name FROM train_lines;"
    },
    {
        "question": "What is the capacity of the train with train_id 'IC123'?",
        "query": "SELECT capacity FROM trains WHERE train_id = 'IC123';"
    },
    {
        "question": "List the departure and arrival times for the train operating on train_line 'Line A' on '2024-03-15'.",
        "query": "SELECT departure_time, arrival_time FROM schedules WHERE train_line = 'Line A' AND date = '2024-03-15';"
    },
    {
        "question": "What is the average capacity of all trains?",
        "query": "SELECT AVG(capacity) FROM trains;"
    },
    {
        "question": "How many schedules are there for '2024-03-16'?",
        "query": "SELECT COUNT(*) FROM schedules WHERE date = '2024-03-16';"
    },
    {
        "question": "List the train_id and capacity of all trains with a capacity greater than 500.",
        "query": "SELECT train_id, capacity FROM trains WHERE capacity > 500;"
    },
    {
        "question": "What are the departure and arrival times of the schedule with schedule_id 123?",
        "query": "SELECT departure_time, arrival_time FROM schedules WHERE schedule_id = 123;"
    },
    {
        "question": "Which train lines have schedules on '2024-03-15'?",
        "query": "SELECT DISTINCT train_line FROM schedules WHERE date = '2024-03-15';"
    },
    {
        "question": "List all the train_ids and their corresponding capacities.",
        "query": "SELECT train_id, capacity FROM trains;"
    },
    {
        "question": "Find the schedules for train line 'Line B' with a departure time after '12:00:00'.",
        "query": "SELECT * FROM schedules WHERE train_line = 'Line B' AND departure_time > '12:00:00';"
    },
    {
        "question": "What is the total capacity of all trains on line 'Line C'?",
        "query": "SELECT SUM(T2.capacity) FROM train_lines AS T1 INNER JOIN trains AS T2 ON T1.name = T2.train_line WHERE T1.name = 'Line C';"
    },
    {
        "question": "What are the names and email addresses of all customers whose city is 'New York'?",
        "query": "SELECT name, email FROM customers WHERE city = 'New York'"
    },
    {
        "question": "What are the order IDs and dates for all orders placed by the customer with ID 2?",
        "query": "SELECT id, order_date FROM orders WHERE customer_id = 2"
    },
    {
        "question": "What is the total amount spent by the customer with ID 3 across all their orders?",
        "query": "SELECT SUM(amount) FROM orders WHERE customer_id = 3"
    },
    {
        "question": "What are the names of the products ordered in order ID 10?",
        "query": "SELECT T2.name FROM order_items AS T1 INNER JOIN products AS T2 ON T1.product_id = T2.id WHERE T1.order_id = 10"
    },
    {
        "question": "What is the total quantity of product ID 5 ordered across all orders?",
        "query": "SELECT SUM(quantity) FROM order_items WHERE product_id = 5"
    },
    {
        "question": "List the names of customers who have ordered product 'Laptop'?",
        "query": "SELECT T3.name FROM products AS T1 INNER JOIN order_items AS T2 ON T1.id = T2.product_id INNER JOIN orders AS T3 ON T2.order_id = T3.id INNER JOIN customers AS T4 ON T3.customer_id = T4.id WHERE T1.name = 'Laptop'"
    },
    {
        "question": "What is the average amount spent per order?",
        "query": "SELECT AVG(amount) FROM orders"
    },
    {
        "question": "Which customer placed the order with the highest amount, and what was the order date?",
        "query": "SELECT T2.name, T1.order_date FROM orders AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.id ORDER BY T1.amount DESC LIMIT 1"
    },
    {
        "question": "List the names of products that have never been ordered.",
        "query": "SELECT name FROM products EXCEPT SELECT T2.name FROM order_items AS T1 INNER JOIN products AS T2 ON T1.product_id = T2.id"
    },
    {
        "question": "List the customer names and their average order amount.",
        "query": "SELECT T2.name, AVG(T1.amount) FROM orders AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.id GROUP BY T2.name"
    },
    {
        "question": "What are the names of all playlists?",
        "query": "SELECT Name FROM Playlist"
    },
    {
        "question": "How many tracks are in the playlist 'Music'?",
        "query": "SELECT COUNT(*) FROM PlaylistTrack WHERE PlaylistId = (SELECT PlaylistId FROM Playlist WHERE Name = 'Music')"
    },
    {
        "question": "List the names of all tracks in the playlist 'Movies'.",
        "query": "SELECT Track.Name FROM Track INNER JOIN PlaylistTrack ON Track.TrackId = PlaylistTrack.TrackId WHERE PlaylistId = (SELECT PlaylistId FROM Playlist WHERE Name = 'Movies')"
    },
    {
        "question": "What is the name of the artist who composed the track 'Peach Trees'?",
        "query": "SELECT Artist.Name FROM Artist INNER JOIN Album ON Artist.ArtistId = Album.ArtistId INNER JOIN Track ON Album.AlbumId = Track.AlbumId WHERE Track.Name = 'Peach Trees'"
    },
    {
        "question": "What is the total number of playlists in the database?",
        "query": "SELECT COUNT(*) FROM Playlist"
    },
    {
        "question": "Find the name of the playlist with the longest total duration of tracks.",
        "query": "SELECT Playlist.Name FROM Playlist INNER JOIN PlaylistTrack ON Playlist.PlaylistId = PlaylistTrack.PlaylistId INNER JOIN Track ON PlaylistTrack.TrackId = Track.TrackId GROUP BY Playlist.PlaylistId ORDER BY SUM(Track.Milliseconds) DESC LIMIT 1"
    },
    {
        "question": "List the names of all tracks that are not part of any playlist.",
        "query": "SELECT Name FROM Track EXCEPT SELECT T1.Name FROM Track AS T1 INNER JOIN PlaylistTrack AS T2 ON T1.TrackId = T2.TrackId"
    },
    {
        "question": "Which album has the most tracks included in playlists?",
        "query": "SELECT Album.Title FROM Album INNER JOIN Track ON Album.AlbumId = Track.AlbumId INNER JOIN PlaylistTrack ON Track.TrackId = PlaylistTrack.TrackId GROUP BY Album.AlbumId ORDER BY COUNT(PlaylistTrack.TrackId) DESC LIMIT 1"
    },
    {
        "question": "List the titles of albums released after 1990.",
        "query": "SELECT title FROM albums WHERE strftime('%Y', releasedate) > '1990';"
    },
    {
        "question": "Which album has the highest total sales revenue?",
        "query": "SELECT albumid, SUM(unitprice * quantity) AS total_revenue FROM invoicelines GROUP BY albumid ORDER BY total_revenue DESC LIMIT 1;"
    },
    {
        "question": "List the names and email addresses of customers who have purchased tracks from the 'Rock' genre.",
        "query": "SELECT T3.firstname, T3.lastname, T3.email FROM tracks AS T1 INNER JOIN invoicelines AS T2 ON T1.trackid = T2.trackid INNER JOIN customers AS T3 ON T2.customerid = T3.customerid WHERE T1.genreid = (SELECT genreid FROM genres WHERE name = 'Rock');"
    },
    {
        "question": "List the names of customers who have purchased the track 'Enter Sandman'.",
        "query": "SELECT T2.firstname, T2.lastname FROM tracks AS T1 INNER JOIN invoicelines AS T2 ON T1.trackid = T2.trackid INNER JOIN customers as T3 ON T2.customerid = T3.customerid WHERE T1.name = 'Enter Sandman';"
    },
    {
        "question": "List the albums by AC/DC along with their total track duration.",
        "query": "SELECT T2.title, SUM(T1.milliseconds) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid INNER JOIN artists AS T3 ON T2.artistid = T3.artistid WHERE T3.name = 'AC/DC' GROUP BY T2.title;"
    },
    {
        "question": "What is the average track length for all albums?",
        "query": "SELECT AVG(milliseconds) FROM tracks GROUP BY albumid;"
    },
    {
        "question": "What is the average federal revenue (t_fed_rev) for all school districts in the FINREV_FED_17 dataset?",
        "query": "SELECT AVG(t_fed_rev) FROM FINREV_FED_17"
    },
    {
        "question": "List the school districts and their corresponding NCES IDs from the FINREV_FED_17 table.",
        "query": "SELECT school_district, nces_id FROM FINREV_FED_17"
    },
    {
        "question": "How many school districts are recorded in the FINREV_FED_17 table?",
        "query": "SELECT COUNT(*) FROM FINREV_FED_17"
    },
    {
        "question": "What is the total federal revenue (t_fed_rev) for the 'AXTELL SCH DIST 501' in the FINREV_FED_17 dataset?",
        "query": "SELECT t_fed_rev FROM FINREV_FED_17 WHERE school_district = 'AXTELL SCH DIST 501'"
    },
    {
        "question": "Find the states and their average scale scores in Math for 8th grade in 2017 from the NDECoreExcel_Math_Grade8 dataset.",
        "query": "SELECT state, average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE year = 2017"
    },
    {
        "question": "What is the average scale score for all students in 8th grade Math in 2017 across all states?",
        "query": "SELECT AVG(average_scale_score) FROM NDECoreExcel_Math_Grade8 WHERE year = 2017 AND all_students = 'All students'"
    },
    {
        "question": "List the states and their corresponding number of records in the FINREV_FED_KEY_17 dataset.",
        "query": "SELECT State, `#_Records` FROM FINREV_FED_KEY_17"
    },
    {
        "question": "How many states are listed in the FINREV_FED_KEY_17 table?",
        "query": "SELECT COUNT(*) FROM FINREV_FED_KEY_17"
    },
    {
        "question": "What is the number of records for the state of 'Tennessee' in the FINREV_FED_KEY_17 dataset?",
        "query": "SELECT `#_Records` FROM FINREV_FED_KEY_17 WHERE State = 'Tennessee'"
    },
    {
        "question": "Find the school districts with a federal revenue (t_fed_rev) greater than 1000 in the FINREV_FED_17 dataset.",
        "query": "SELECT school_district FROM FINREV_FED_17 WHERE t_fed_rev > 1000"
    },
    {
        "question": "List the states with an average scale score in 8th grade Math greater than 280 in 2017.",
        "query": "SELECT state FROM NDECoreExcel_Math_Grade8 WHERE year = 2017 AND average_scale_score > 280"
    },
    {
        "question": "Find the states with more than 100 records in the FINREV_FED_KEY_17 dataset.",
        "query": "SELECT State FROM FINREV_FED_KEY_17 WHERE `#_Records` > 100"
    },
    {
        "question": "What is the maximum federal revenue (t_fed_rev) among all school districts in the FINREV_FED_17 dataset?",
        "query": "SELECT MAX(t_fed_rev) FROM FINREV_FED_17"
    },
    {
        "question": "What is the minimum average scale score in 8th grade Math in 2017 across all states?",
        "query": "SELECT MIN(average_scale_score) FROM NDECoreExcel_Math_Grade8 WHERE year = 2017"
    },
    {
        "question": "What is the minimum number of records among all states in the FINREV_FED_KEY_17 dataset?",
        "query": "SELECT MIN(`#_Records`) FROM FINREV_FED_KEY_17"
    },
    {
        "question": "List the school districts and their federal revenue where the revenue is between 500 and 1500.",
        "query": "SELECT school_district, t_fed_rev FROM FINREV_FED_17 WHERE t_fed_rev BETWEEN 500 AND 1500"
    },
    {
        "question": "List the states and their average scale scores where the score is between 270 and 290.",
        "query": "SELECT state, average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE average_scale_score BETWEEN 270 AND 290"
    },
    {
        "question": "Find the states with a number of records between 50 and 150.",
        "query": "SELECT State FROM FINREV_FED_KEY_17 WHERE `#_Records` BETWEEN 50 AND 150"
    },
    {
        "question": "List all school districts in the state of 'Connecticut' along with their federal revenue.",
        "query": "SELECT T1.school_district, T1.t_fed_rev FROM FINREV_FED_17 AS T1 INNER JOIN FINREV_FED_KEY_17 AS T2 ON T1.state_code = T2.State_Code WHERE T2.State = 'Connecticut'"
    },
    {
        "question": "What is the average federal revenue for school districts in 'Tennessee'?",
        "query": "SELECT AVG(T1.t_fed_rev) FROM FINREV_FED_17 AS T1 INNER JOIN FINREV_FED_KEY_17 AS T2 ON T1.state_code = T2.State_Code WHERE T2.State = 'Tennessee'"
    },
    {
        "question": "Find the states and their average 8th grade Math scores where the number of records for the state is greater than 100.",
        "query": "SELECT T2.state, T2.average_scale_score FROM FINREV_FED_KEY_17 AS T1 INNER JOIN NDECoreExcel_Math_Grade8 AS T2 ON T1.State = T2.state WHERE T1.`#_Records` > 100"
    },
    {
        "question": "List the school districts, their federal revenue, and the state they belong to.",
        "query": "SELECT T1.school_district, T1.t_fed_rev, T2.State FROM FINREV_FED_17 AS T1 INNER JOIN FINREV_FED_KEY_17 AS T2 ON T1.state_code = T2.State_Code"
    },
    {
        "question": "What is the average 8th grade Math score for states with more than 500 records?",
        "query": "SELECT AVG(T2.average_scale_score) FROM FINREV_FED_KEY_17 AS T1 INNER JOIN NDECoreExcel_Math_Grade8 AS T2 ON T1.State = T2.state WHERE T1.`#_Records` > 500"
    },
    {
        "question": "List the school districts and their corresponding state where the federal revenue is greater than the average federal revenue for that state.",
        "query": "SELECT T1.school_district, T2.State FROM FINREV_FED_17 AS T1 INNER JOIN FINREV_FED_KEY_17 AS T2 ON T1.state_code = T2.State_Code WHERE T1.t_fed_rev > (SELECT AVG(t_fed_rev) FROM FINREV_FED_17 AS T3 WHERE T3.state_code = T1.state_code)"
    },
    {
        "question": "What are the different years represented in the NDECoreExcel_Math_Grade8 table?",
        "query": "SELECT DISTINCT year FROM NDECoreExcel_Math_Grade8"
    },
    {
        "question": "What are the distinct values of 'all_students' in the NDECoreExcel_Math_Grade8 table?",
        "query": "SELECT DISTINCT all_students FROM NDECoreExcel_Math_Grade8"
    },
    {
        "question": "How many different states are represented in the NDECoreExcel_Math_Grade8 table?",
        "query": "SELECT COUNT(DISTINCT state) FROM NDECoreExcel_Math_Grade8"
    },
    {
        "question": "What are the different state codes present in the FINREV_FED_17 table?",
        "query": "SELECT DISTINCT state_code FROM FINREV_FED_17"
    },
    {
        "question": "What are the different year data values in the FINREV_FED_17 table?",
        "query": "SELECT DISTINCT yr_data FROM FINREV_FED_17"
    },
    {
        "question": "List the states with an average 8th grade math score above 285 in the year 2017.",
        "query": "SELECT state FROM NDECoreExcel_Math_Grade8 WHERE year = 2017 AND average_scale_score > 285"
    },
    {
        "question": "What is the total federal revenue for all school districts in the year 2017?",
        "query": "SELECT SUM(t_fed_rev) FROM FINREV_FED_17 WHERE yr_data = 17"
    },
    {
        "question": "List the school districts with a federal revenue greater than 5000 in the year 2017.",
        "query": "SELECT school_district FROM FINREV_FED_17 WHERE yr_data = 17 AND t_fed_rev > 5000"
    },
    {
        "question": "What is the average federal revenue for school districts in the state with code '29' in the year 2017?",
        "query": "SELECT AVG(t_fed_rev) FROM FINREV_FED_17 WHERE state_code = 29 AND yr_data = 17"
    },
    {
        "question": "List the states with more than 200 records in the FINREV_FED_KEY_17 table.",
        "query": "SELECT State FROM FINREV_FED_KEY_17 WHERE `#_Records` > 200"
    },
    {
        "question": "What is the average number of records across all states in the FINREV_FED_KEY_17 table?",
        "query": "SELECT AVG(`#_Records`) FROM FINREV_FED_KEY_17"
    },
    {
        "question": "List the states and their corresponding number of records where the number of records is less than 100.",
        "query": "SELECT State, `#_Records` FROM FINREV_FED_KEY_17 WHERE `#_Records` < 100"
    },
    {
        "question": "What is the maximum federal revenue among all school districts in the state with code '38'?",
        "query": "SELECT MAX(t_fed_rev) FROM FINREV_FED_17 WHERE state_code = 38"
    },
    {
        "question": "Which state has the highest average scale score in 8th grade math in 2017?",
        "query": "SELECT state FROM NDECoreExcel_Math_Grade8 WHERE year = 2017 ORDER BY average_scale_score DESC LIMIT 1"
    },
    {
        "question": "Which state has the lowest number of records in the FINREV_FED_KEY_17 table?",
        "query": "SELECT State FROM FINREV_FED_KEY_17 ORDER BY `#_Records` ASC LIMIT 1"
    },
    {
        "question": "List the school districts in descending order of their federal revenue.",
        "query": "SELECT school_district FROM FINREV_FED_17 ORDER BY t_fed_rev DESC"
    },
    {
        "question": "List the states in ascending order of their average scale score in 8th grade math in 2017.",
        "query": "SELECT state FROM NDECoreExcel_Math_Grade8 WHERE year = 2017 ORDER BY average_scale_score ASC"
    },
    {
        "question": "List the states in descending order of their number of records in the FINREV_FED_KEY_17 table.",
        "query": "SELECT State FROM FINREV_FED_KEY_17 ORDER BY `#_Records` DESC"
    },
    {
        "question": "What is the number of school districts with federal revenue greater than the average federal revenue across all school districts?",
        "query": "SELECT COUNT(*) FROM FINREV_FED_17 WHERE t_fed_rev > (SELECT AVG(t_fed_rev) FROM FINREV_FED_17)"
    },
    {
        "question": "How many states have an average 8th grade math score greater than 280 in 2017?",
        "query": "SELECT COUNT(*) FROM NDECoreExcel_Math_Grade8 WHERE year = 2017 AND average_scale_score > 280"
    },
    {
        "question": "How many states have a number of records greater than the average number of records across all states?",
        "query": "SELECT COUNT(*) FROM FINREV_FED_KEY_17 WHERE `#_Records` > (SELECT AVG(`#_Records`) FROM FINREV_FED_KEY_17)"
    },
    {
        "question": "List the school districts and their federal revenue where the revenue is within one standard deviation of the average revenue.",
        "query": "SELECT school_district, t_fed_rev FROM FINREV_FED_17 WHERE t_fed_rev BETWEEN (SELECT AVG(t_fed_rev) - STDDEV(t_fed_rev) FROM FINREV_FED_17) AND (SELECT AVG(t_fed_rev) + STDDEV(t_fed_rev) FROM FINREV_FED_17)"
    },
    {
        "question": "List the states and their average 8th grade math scores where the score is within one standard deviation of the average score.",
        "query": "SELECT state, average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE average_scale_score BETWEEN (SELECT AVG(average_scale_score) - STDDEV(average_scale_score) FROM NDECoreExcel_Math_Grade8) AND (SELECT AVG(average_scale_score) + STDDEV(average_scale_score) FROM NDECoreExcel_Math_Grade8)"
    },
    {
        "question": "List the states and their number of records where the number of records is within one standard deviation of the average number of records.",
        "query": "SELECT State, `#_Records` FROM FINREV_FED_KEY_17 WHERE `#_Records` BETWEEN (SELECT AVG(`#_Records`) - STDDEV(`#_Records`) FROM FINREV_FED_KEY_17) AND (SELECT AVG(`#_Records`) + STDDEV(`#_Records`) FROM FINREV_FED_KEY_17)"
    },
    {
        "question": "What is the average federal revenue for school districts in states with an average 8th grade math score above 280 in 2017?",
        "query": "SELECT AVG(T1.t_fed_rev) FROM FINREV_FED_17 AS T1 INNER JOIN FINREV_FED_KEY_17 AS T2 ON T1.state_code = T2.State_Code INNER JOIN NDECoreExcel_Math_Grade8 AS T3 ON T2.State = T3.state WHERE T3.year = 2017 AND T3.average_scale_score > 280"
    },
    {
        "question": "List the school districts, their federal revenue, and the state's average 8th grade math score for states with more than 100 records.",
        "query": "SELECT T1.school_district, T1.t_fed_rev, T3.average_scale_score FROM FINREV_FED_17 AS T1 INNER JOIN FINREV_FED_KEY_17 AS T2 ON T1.state_code = T2.State_Code INNER JOIN NDECoreExcel_Math_Grade8 AS T3 ON T2.State = T3.state WHERE T2.`#_Records` > 100"
    },
    {
        "question": "What is the average number of records for states with school districts having a federal revenue greater than 5000?",
        "query": "SELECT AVG(T2.`#_Records`) FROM FINREV_FED_17 AS T1 INNER JOIN FINREV_FED_KEY_17 AS T2 ON T1.state_code = T2.State_Code WHERE T1.t_fed_rev > 5000"
    },
    {
        "question": "What is the sum of c14 for all records?",
        "query": "SELECT SUM(c14) FROM FINREV_FED_17"
    },
    {
        "question": "What is the average of c25 for all records where yr_data is 17?",
        "query": "SELECT AVG(c25) FROM FINREV_FED_17 WHERE yr_data = 17"
    },
    {
        "question": "Find the maximum t_fed_rev for each state.",
        "query": "SELECT state_code, MAX(t_fed_rev) FROM FINREV_FED_17 GROUP BY state_code"
    },
    {
        "question": "What is the average t_fed_rev for each year?",
        "query": "SELECT yr_data, AVG(t_fed_rev) FROM FINREV_FED_17 GROUP BY yr_data"
    },
    {
        "question": "What is the total t_fed_rev for each state in the year 2017?",
        "query": "SELECT state_code, SUM(t_fed_rev) FROM FINREV_FED_17 WHERE yr_data = 17 GROUP BY state_code"
    },
    {
        "question": "List the states and their average 8th grade math scores for the year 2017, ordered by average score descending.",
        "query": "SELECT state, average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE year = 2017 ORDER BY average_scale_score DESC"
    },
    {
        "question": "List the states and their number of records, ordered by number of records ascending.",
        "query": "SELECT State, `#_Records` FROM FINREV_FED_KEY_17 ORDER BY `#_Records` ASC"
    },
    {
        "question": "List the school districts and their federal revenue, ordered by revenue descending, for the year 2017.",
        "query": "SELECT school_district, t_fed_rev FROM FINREV_FED_17 WHERE yr_data = 17 ORDER BY t_fed_rev DESC"
    },
    {
        "question": "What is the average federal revenue for each state, considering only school districts with a NCES ID starting with '42'?",
        "query": "SELECT state_code, AVG(t_fed_rev) FROM FINREV_FED_17 WHERE nces_id LIKE '42%' GROUP BY state_code"
    },
    {
        "question": "List the school districts with federal revenue greater than 1000 and c14 less than 500.",
        "query": "SELECT school_district FROM FINREV_FED_17 WHERE t_fed_rev > 1000 AND c14 < 500"
    },
    {
        "question": "What is the total federal revenue for school districts with NCES ID starting with '39' or '42'?",
        "query": "SELECT SUM(t_fed_rev) FROM FINREV_FED_17 WHERE nces_id LIKE '39%' OR nces_id LIKE '42%'"
    },
    {
        "question": "List the states with an average 8th grade math score greater than 280 and less than 290 in 2017.",
        "query": "SELECT state FROM NDECoreExcel_Math_Grade8 WHERE year = 2017 AND average_scale_score > 280 AND average_scale_score < 290"
    },
    {
        "question": "What is the number of records for states with names starting with 'C' or 'M'?",
        "query": "SELECT SUM(`#_Records`) FROM FINREV_FED_KEY_17 WHERE State LIKE 'C%' OR State LIKE 'M%'"
    },
    {
        "question": "What is the average scale score for 8th graders in math in Connecticut in 2017?",
        "query": "SELECT average_scale_score FROM NDECoreExcel_Math_Grade8 WHERE year = 2017 AND state = 'Connecticut'"
    },
    {
        "question": "What are the names of all the playlists that contain the track 'Enter Sandman'?",
        "query": "SELECT T2.name FROM playlist_track AS T1 INNER JOIN playlists AS T2 ON T1.playlist_id = T2.playlist_id INNER JOIN tracks AS T3 ON T1.track_id = T3.track_id WHERE T3.name = 'Enter Sandman';"
    },
    {
        "question": "How many tracks are there in the playlist 'Music'?",
        "query": "SELECT COUNT(*) FROM playlist_track WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Music');"
    },
    {
        "question": "Which album has the highest number of tracks?",
        "query": "SELECT title FROM albums WHERE album_id = (SELECT album_id FROM tracks GROUP BY album_id ORDER BY COUNT(*) DESC LIMIT 1);"
    },
    {
        "question": "What are the names of all the customers in the 'USA' who have purchased tracks in the 'Metal' genre?",
        "query": "SELECT T1.first_name, T1.last_name FROM customers AS T1 INNER JOIN invoices AS T2 ON T1.customer_id = T2.customer_id INNER JOIN invoice_items AS T3 ON T2.invoice_id = T3.invoice_id INNER JOIN tracks AS T4 ON T3.track_id = T4.track_id INNER JOIN genres AS T5 ON T4.genre_id = T5.genre_id WHERE T1.country = 'USA' AND T5.name = 'Metal';"
    },
    {
        "question": "List the albums released in the year 1967.",
        "query": "SELECT title FROM albums WHERE strftime('%Y', release_date) = '1967'"
    },
    {
        "question": "What is the average duration of tracks on the album 'Revolver'?",
        "query": "SELECT AVG(milliseconds) FROM tracks WHERE album = 'Revolver'"
    },
    {
        "question": "Find the shortest track on the album 'Sgt. Pepper's Lonely Hearts Club Band'.",
        "query": "SELECT name FROM tracks WHERE album = 'Sgt. Pepper\\'s Lonely Hearts Club Band' ORDER BY milliseconds ASC LIMIT 1"
    },
    {
        "question": "What is the title of the album with the longest track?",
        "query": "SELECT album FROM tracks ORDER BY milliseconds DESC LIMIT 1"
    },
    {
        "question": "List all tracks with duration longer than 5 minutes (300000 milliseconds).",
        "query": "SELECT name FROM tracks WHERE milliseconds > 300000"
    },
    {
        "question": "What is the release date of the album 'Help!'?",
        "query": "SELECT release_date FROM albums WHERE title = 'Help!'"
    },
    {
        "question": "List all tracks on albums released before 1968.",
        "query": "SELECT T2.name FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.title = T2.album WHERE strftime('%Y', T1.release_date) < '1968'"
    },
    {
        "question": "List the names of all albums and their release dates.",
        "query": "SELECT title, release_date FROM albums"
    },
    {
        "question": "Find the longest track on each album.",
        "query": "SELECT name FROM tracks WHERE (album, milliseconds) IN (SELECT album, MAX(milliseconds) FROM tracks GROUP BY album)"
    },
    {
        "question": "What is the total duration of all tracks in the 'Rock' genre?",
        "query": "SELECT SUM(milliseconds) FROM tracks WHERE genre_id = (SELECT genre_id FROM genres WHERE name = 'Rock');"
    },
    {
        "question": "How many songs are there in the '90s Music' playlist?",
        "query": "SELECT COUNT(*) FROM playlist_songs WHERE playlist_id = (SELECT id FROM playlists WHERE name = '90s Music');"
    },
    {
        "question": "List all songs by 'Green Day'.",
        "query": "SELECT title FROM songs WHERE artist = 'Green Day';"
    },
    {
        "question": "What is the average length of songs in the database?",
        "query": "SELECT AVG(length) FROM songs;"
    },
    {
        "question": "Find the playlist with the longest total song length.",
        "query": "SELECT T2.name FROM playlist_songs AS T1 INNER JOIN playlists AS T2 ON T1.playlist_id = T2.id INNER JOIN songs AS T3 ON T1.song_id = T3.id GROUP BY T2.name ORDER BY SUM(T3.length) DESC LIMIT 1;"
    },
    {
        "question": "List the titles and artists of all songs in the 'Workout Jams' playlist.",
        "query": "SELECT T2.title, T2.artist FROM playlist_songs AS T1 INNER JOIN songs AS T2 ON T1.song_id = T2.id WHERE T1.playlist_id = (SELECT id FROM playlists WHERE name = 'Workout Jams');"
    },
    {
        "question": "Which playlist has the most songs?",
        "query": "SELECT T2.name FROM playlist_songs AS T1 INNER JOIN playlists AS T2 ON T1.playlist_id = T2.id GROUP BY T1.playlist_id ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question": "Find the shortest song in the 'Road Trip' playlist.",
        "query": "SELECT T2.title FROM playlist_songs AS T1 INNER JOIN songs AS T2 ON T1.song_id = T2.id WHERE T1.playlist_id = (SELECT id FROM playlists WHERE name = 'Road Trip') ORDER BY T2.length ASC LIMIT 1;"
    },
    {
        "question": "List all playlists that contain songs by 'Michael Jackson'.",
        "query": "SELECT T2.name FROM playlist_songs AS T1 INNER JOIN playlists AS T2 ON T1.playlist_id = T2.id WHERE T1.song_id IN (SELECT id FROM songs WHERE artist = 'Michael Jackson');"
    },
    {
        "question": "What is the total length of all songs in the database?",
        "query": "SELECT SUM(length) FROM songs;"
    },
    {
        "question": "What is the name and milliseconds of the longest track?",
        "query": "SELECT name, milliseconds FROM tracks ORDER BY milliseconds DESC LIMIT 1;"
    },
    {
        "question": "What are the names of the albums composed by Angus Young?",
        "query": "SELECT title FROM albums WHERE composer = 'Angus Young';"
    },
    {
        "question": "List the titles of albums along with the number of tracks they contain.",
        "query": "SELECT T1.title, COUNT(T2.trackid) FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid GROUP BY T1.title;"
    },
    {
        "question": "List the names of tracks along with their corresponding album titles.",
        "query": "SELECT T2.name, T1.title FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid;"
    },
    {
        "question": "What are the names of the tracks in the album 'For Those About To Rock We Salute You' that cost more than $0.99?",
        "query": "SELECT name FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'For Those About To Rock We Salute You') AND unitprice > 0.99;"
    },
    {
        "question": "List the department names and their respective locations.",
        "query": "SELECT dept_name, location FROM departments;"
    },
    {
        "question": "Retrieve the names of employees who work in the 'Sales' department.",
        "query": "SELECT emp_name FROM employees WHERE dept_no = (SELECT dept_no FROM departments WHERE dept_name = 'Sales');"
    },
    {
        "question": "List the names of employees who were born before 1980.",
        "query": "SELECT emp_name FROM employees WHERE birth_date < '1980-01-01';"
    },
    {
        "question": "Find the name of the department where 'Jane Doe' works.",
        "query": "SELECT dept_name FROM departments WHERE dept_no = (SELECT dept_no FROM employees WHERE emp_name = 'Jane Doe');"
    },
    {
        "question": "List the names and salaries of employees who earn more than $50,000 and work in the 'Marketing' department.",
        "query": "SELECT emp_name, salary FROM employees WHERE salary > 50000 AND dept_no = (SELECT dept_no FROM departments WHERE dept_name = 'Marketing');"
    },
    {
        "question": "Find the names of all departments that have employees born after 1985.",
        "query": "SELECT dept_name FROM departments WHERE dept_no IN (SELECT dept_no FROM employees WHERE birth_date > '1985-01-01');"
    },
    {
        "question": "List the names of employees who have the highest salary in their respective departments.",
        "query": "SELECT emp_name FROM employees WHERE (dept_no, salary) IN (SELECT dept_no, MAX(salary) FROM employees GROUP BY dept_no);"
    },
    {
        "question": "What is the name and composer of the track with track_id 1?",
        "query": "SELECT name, composer FROM tracks WHERE track_id = 1;"
    },
    {
        "question": "What is the total sales for each customer (by customer_id)?",
        "query": "SELECT customer_id, SUM(total) FROM invoices GROUP BY customer_id;"
    },
    {
        "question": "List the names and email addresses of all customers in the USA.",
        "query": "SELECT first_name, last_name, email FROM customers WHERE country = 'USA';"
    },
    {
        "question": "What is the name of the track purchased in invoice with invoice_id 1?",
        "query": "SELECT T2.name FROM invoice_items AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id WHERE T1.invoice_id = 1;"
    },
    {
        "question": "List the names of all customers who have purchased track with track_id 2.",
        "query": "SELECT T3.first_name, T3.last_name FROM invoice_items AS T1 INNER JOIN invoices AS T2 ON T1.invoice_id = T2.invoice_id INNER JOIN customers AS T3 ON T2.customer_id = T3.customer_id WHERE T1.track_id = 2;"
    },
    {
        "question": "What is the total revenue generated from the sales of track with track_id 5?",
        "query": "SELECT SUM(T1.unit_price * T1.quantity) FROM invoice_items AS T1 WHERE T1.track_id = 5;"
    },
    {
        "question": "List the names of all tracks in the 'Alternative & Punk' genre, ordered alphabetically.",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Alternative & Punk' ORDER BY T1.name;"
    },
    {
        "question": "What are the names and unit prices of all tracks that cost more than $1?",
        "query": "SELECT name, unitprice FROM tracks WHERE unitprice > 1.0;"
    },
    {
        "question": "List the names of all tracks in the playlist 'Grunge'.",
        "query": "SELECT tracks.name FROM tracks INNER JOIN playlist_tracks ON tracks.trackid = playlist_tracks.trackid INNER JOIN playlists ON playlist_tracks.playlistid = playlists.playlistid WHERE playlists.name = 'Grunge';"
    },
    {
        "question": "What are the names of all albums released by the artist 'Iron Maiden'?",
        "query": "SELECT Title FROM albums WHERE ArtistId = (SELECT ArtistId FROM artists WHERE Name = 'Iron Maiden')"
    },
    {
        "question": "How many tracks are there on the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT COUNT(*) FROM tracks WHERE AlbumId = (SELECT AlbumId FROM albums WHERE Title = 'For Those About To Rock We Salute You')"
    },
    {
        "question": "What is the total length of all tracks on the album 'Let There Be Rock'?",
        "query": "SELECT SUM(Milliseconds) FROM tracks WHERE AlbumId = (SELECT AlbumId FROM albums WHERE Title = 'Let There Be Rock')"
    },
    {
        "question": "Which customer has the highest support rep id?",
        "query": "SELECT FirstName, LastName FROM customers ORDER BY SupportRepId DESC LIMIT 1"
    },
    {
        "question": "What is the name of the artist who recorded the track 'Dazed and Confused'?",
        "query": "SELECT T2.Name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.AlbumId = T2.AlbumId INNER JOIN artists AS T3 ON T2.ArtistId = T3.ArtistId WHERE T1.Name = 'Dazed and Confused'"
    },
    {
        "question": "List all the tracks from the 'Rock' genre.",
        "query": "SELECT T1.Name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name = 'Rock'"
    },
    {
        "question": "What is the average length of tracks in the 'Metal' genre?",
        "query": "SELECT AVG(Milliseconds) FROM tracks WHERE GenreId = (SELECT GenreId FROM genres WHERE Name = 'Metal')"
    },
    {
        "question": "Which customer spent the most money on music?",
        "query": "SELECT T1.FirstName, T1.LastName FROM customers AS T1 INNER JOIN invoices AS T2 ON T1.CustomerId = T2.CustomerId ORDER BY T2.Total DESC LIMIT 1"
    },
    {
        "question": "List the names of all playlists that contain the track 'Paranoid Android'.",
        "query": "SELECT T3.Name FROM tracks AS T1 INNER JOIN playlist_track AS T2 ON T1.TrackId = T2.TrackId INNER JOIN playlists AS T3 ON T2.PlaylistId = T3.PlaylistId WHERE T1.Name = 'Paranoid Android'"
    },
    {
        "question": "What is the total revenue generated from invoices in the USA?",
        "query": "SELECT SUM(Total) FROM invoices WHERE BillingCountry = 'USA'"
    },
    {
        "question": "List the names of all employees who are sales support agents.",
        "query": "SELECT FirstName, LastName FROM employees WHERE Title = 'Sales Support Agent'"
    },
    {
        "question": "Which sales support agent has the most customers?",
        "query": "SELECT T2.FirstName, T2.LastName FROM customers AS T1 INNER JOIN employees AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T2.Title = 'Sales Support Agent' GROUP BY T1.SupportRepId ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "List all the albums in the database, including their artist and genre.",
        "query": "SELECT T1.Title, T3.Name, T4.Name FROM albums AS T1 INNER JOIN artists AS T3 ON T1.ArtistId = T3.ArtistId INNER JOIN tracks as T2 ON T1.AlbumId = T2.AlbumId INNER JOIN genres AS T4 ON T2.GenreId = T4.GenreId GROUP BY T1.AlbumId"
    },
    {
        "question": "What is the total number of customers in the database?",
        "query": "SELECT COUNT(*) FROM Customers;"
    },
    {
        "question": "List the names of all customers along with their cities and countries.",
        "query": "SELECT CustomerName, City, Country FROM Customers;"
    },
    {
        "question": "Find the contact name and address of the customer with CustomerID '1'.",
        "query": "SELECT ContactName, Address FROM Customers WHERE CustomerID = '1';"
    },
    {
        "question": "List all orders placed by the customer with CustomerID '2'.",
        "query": "SELECT * FROM Orders WHERE CustomerID = '2';"
    },
    {
        "question": "What are the OrderIDs and OrderDates for all orders shipped to 'Germany'?",
        "query": "SELECT OrderID, OrderDate FROM Orders WHERE ShipCountry = 'Germany';"
    },
    {
        "question": "List all products with their respective names, unit prices, and quantities in stock.",
        "query": "SELECT ProductName, UnitPrice, UnitsInStock FROM Products;"
    },
    {
        "question": "Find the names of products supplied by supplier '1'.",
        "query": "SELECT ProductName FROM Products WHERE SupplierID = '1';"
    },
    {
        "question": "List all order details, including product name, quantity, and unit price, for OrderID '10248'.",
        "query": "SELECT Products.ProductName, OrderDetails.Quantity, OrderDetails.UnitPrice FROM OrderDetails INNER JOIN Products ON OrderDetails.ProductID = Products.ProductID WHERE OrderDetails.OrderID = '10248';"
    },
    {
        "question": "What is the average unit price of all products?",
        "query": "SELECT AVG(UnitPrice) FROM Products;"
    },
    {
        "question": "Which customers have placed orders for products supplied by supplier '2'?",
        "query": "SELECT DISTINCT Customers.CustomerName FROM Customers INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID INNER JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID INNER JOIN Products ON OrderDetails.ProductID = Products.ProductID WHERE Products.SupplierID = '2';"
    },
    {
        "question": "List the customer names and order dates for all orders placed in the year 1996.",
        "query": "SELECT CustomerName, OrderDate FROM Customers INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID WHERE strftime('%Y', OrderDate) = '1996';"
    },
    {
        "question": "Which countries have customers who have placed orders for 'Chais'?",
        "query": "SELECT DISTINCT ShipCountry FROM Orders INNER JOIN OrderDetails ON Orders.OrderID=OrderDetails.OrderID INNER JOIN Products ON OrderDetails.ProductID = Products.ProductID WHERE ProductName='Chais';"
    },
    {
        "question": "List the suppliers who supply products with a unit price greater than $20.",
        "query": "SELECT SupplierName FROM Suppliers INNER JOIN Products ON Suppliers.SupplierID = Products.SupplierID WHERE UnitPrice > 20;"
    },
    {
        "question": "List the contact names and cities of all suppliers.",
        "query": "SELECT ContactName, City FROM Suppliers"
    },
    {
        "question": "What is the name and price of the most expensive product?",
        "query": "SELECT ProductName, Price FROM Products ORDER BY Price DESC LIMIT 1"
    },
    {
        "question": "Find the names of all customers who have placed orders.",
        "query": "SELECT DISTINCT T2.CustomerName FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID"
    },
    {
        "question": "List the product names and quantities ordered for all order details.",
        "query": "SELECT T2.ProductName, T1.Quantity FROM OrderDetails AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "question": "What is the total value of each order (quantity * price)?",
        "query": "SELECT T1.OrderID, SUM(T1.Quantity * T2.Price) FROM OrderDetails AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.OrderID"
    },
    {
        "question": "Which supplier supplies the product 'Chais'?",
        "query": "SELECT T2.SupplierName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Chais'"
    },
    {
        "question": "List the customer names and order dates for all orders placed in 2023.",
        "query": "SELECT T2.CustomerName, T1.OrderDate FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE strftime('%Y', T1.OrderDate) = '2023'"
    },
    {
        "question": "What are the names of products supplied by suppliers located in 'London'?",
        "query": "SELECT T2.ProductName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.City = 'London'"
    },
    {
        "question": "Find the total quantity of each product ordered.",
        "query": "SELECT T2.ProductName, SUM(T1.Quantity) FROM OrderDetails AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID GROUP BY T2.ProductName"
    },
    {
        "question": "List the names of customers who have ordered 'Chang'.",
        "query": "SELECT T3.CustomerName FROM OrderDetails AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Orders AS T3 ON T1.OrderID = T3.OrderID WHERE T2.ProductName = 'Chang'"
    },
    {
        "question": "What is the average price of products supplied by each supplier?",
        "query": "SELECT T2.SupplierName, AVG(T1.Price) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID GROUP BY T2.SupplierName"
    },
    {
        "question": "Show the definition of the view named 'my_view' (replace 'my_view' with the actual view name if different).",
        "query": "SELECT sql FROM sqlite_master WHERE name='my_view';"
    },
    {
        "question": "Show the definition of the trigger named 'my_trigger' (replace 'my_trigger' with the actual trigger name).",
        "query": "SELECT sql FROM sqlite_master WHERE name='my_trigger';"
    },
    {
        "question": "What are the columns in the table named 'table_name'?",
        "query": "PRAGMA table_info('table_name');"
    },
    {
        "question": "What are the foreign key constraints on the table 'table_name'?",
        "query": "PRAGMA foreign_key_list('table_name');"
    },
    {
        "question": "What is the total duration of all the tracks in the 'Classical' playlist?",
        "query": "SELECT SUM(T2.milliseconds) FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id WHERE T1.playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Classical');"
    },
    {
        "question": "List the names of all tracks in the 'Rock' playlist, along with their composers.",
        "query": "SELECT T3.name, T2.name FROM playlist_tracks AS T1 INNER JOIN tracks AS T3 ON T1.track_id = T3.track_id INNER JOIN artists AS T2 ON T3.composer = T2.artist_id WHERE T1.playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Rock');"
    },
    {
        "question": "What are the titles of the tracks composed by 'AC/DC'?",
        "query": "SELECT name FROM tracks WHERE composer = (SELECT artist_id FROM artists WHERE name = 'AC/DC');"
    },
    {
        "question": "List the names of all playlists that contain tracks from the album 'For Those About To Rock We Salute You'.",
        "query": "SELECT T3.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.album_id = T2.album_id INNER JOIN playlist_tracks AS T4 ON T1.track_id = T4.track_id INNER JOIN playlists AS T3 ON T4.playlist_id = T3.playlist_id WHERE T2.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "What is the average duration of tracks in the 'Heavy Metal Classic' playlist?",
        "query": "SELECT AVG(T2.milliseconds) FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id WHERE T1.playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Heavy Metal Classic');"
    },
    {
        "question": "Find the names of all artists whose tracks are included in the 'TV Shows' playlist.",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN artists AS T2 ON T1.composer = T2.artist_id INNER JOIN playlist_tracks AS T3 ON T1.track_id = T3.track_id WHERE T3.playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'TV Shows');"
    },
    {
        "question": "What are the names of all the stadiums?",
        "query": "SELECT stadium_name FROM stadiums;"
    },
    {
        "question": "Find the capacity of the stadium named 'Wembley Stadium'.",
        "query": "SELECT capacity FROM stadiums WHERE stadium_name = 'Wembley Stadium';"
    },
    {
        "question": "List the names and capacities of all stadiums with a capacity greater than 60,000.",
        "query": "SELECT stadium_name, capacity FROM stadiums WHERE capacity > 60000;"
    },
    {
        "question": "What is the average capacity of all stadiums?",
        "query": "SELECT AVG(capacity) FROM stadiums;"
    },
    {
        "question": "List the names of stadiums located in London.",
        "query": "SELECT stadium_name FROM stadiums WHERE city = 'London';"
    },
    {
        "question": "What is the total capacity of all stadiums in the database?",
        "query": "SELECT SUM(capacity) FROM stadiums;"
    },
    {
        "question": "Find the stadium with the smallest capacity.",
        "query": "SELECT stadium_name, capacity FROM stadiums ORDER BY capacity ASC LIMIT 1;"
    },
    {
        "question": "List the names of all teams.",
        "query": "SELECT team_name FROM teams;"
    },
    {
        "question": "Find the home stadium of the team 'Chelsea'.",
        "query": "SELECT home_stadium FROM teams WHERE team_name = 'Chelsea';"
    },
    {
        "question": "List the names of teams that play in 'Wembley Stadium'.",
        "query": "SELECT team_name FROM teams WHERE home_stadium = 'Wembley Stadium';"
    },
    {
        "question": "What is the name of the team with the highest number of wins?",
        "query": "SELECT team_name FROM teams ORDER BY wins DESC LIMIT 1;"
    },
    {
        "question": "List the teams with more wins than losses.",
        "query": "SELECT team_name FROM teams WHERE wins > losses;"
    },
    {
        "question": "What is the average number of wins for all teams?",
        "query": "SELECT AVG(wins) FROM teams;"
    },
    {
        "question": "List the team names and their corresponding home stadium names.",
        "query": "SELECT T1.team_name, T2.stadium_name FROM teams AS T1 INNER JOIN stadiums AS T2 ON T1.home_stadium = T2.stadium_name;"
    },
    {
        "question": "Find the capacity of the home stadium for 'Manchester United'.",
        "query": "SELECT T2.capacity FROM teams AS T1 INNER JOIN stadiums AS T2 ON T1.home_stadium = T2.stadium_name WHERE T1.team_name = 'Manchester United';"
    },
    {
        "question": "List the teams and their home stadiums located in London.",
        "query": "SELECT T1.team_name, T2.stadium_name FROM teams AS T1 INNER JOIN stadiums AS T2 ON T1.home_stadium = T2.stadium_name WHERE T2.city = 'London';"
    },
    {
        "question": "What is the average capacity of home stadiums for teams with more than 20 wins?",
        "query": "SELECT AVG(T2.capacity) FROM teams AS T1 INNER JOIN stadiums AS T2 ON T1.home_stadium = T2.stadium_name WHERE T1.wins > 20;"
    },
    {
        "question": "List the teams with a home stadium capacity greater than 70,000.",
        "query": "SELECT T1.team_name FROM teams AS T1 INNER JOIN stadiums AS T2 ON T1.home_stadium = T2.stadium_name WHERE T2.capacity > 70000;"
    },
    {
        "question": "List the order IDs and total amounts for all orders placed in 2023.",
        "query": "SELECT OrderID, TotalAmount FROM orders WHERE strftime('%Y', OrderDate) = '2023'"
    },
    {
        "question": "What is the average total amount of orders placed by customers in the 'Gold' tier?",
        "query": "SELECT AVG(T2.TotalAmount) FROM customers AS T1 INNER JOIN orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Tier = 'Gold'"
    },
    {
        "question": "List the names of customers who placed orders in the first quarter of 2024.",
        "query": "SELECT T1.Name FROM customers AS T1 INNER JOIN orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderDate BETWEEN '2024-01-01' AND '2024-03-31'"
    },
    {
        "question": "How many orders were placed for 'Keyboard' in 2023?",
        "query": "SELECT COUNT(*) FROM order_items WHERE ProductName = 'Keyboard' AND OrderID IN (SELECT OrderID FROM orders WHERE strftime('%Y', OrderDate) = '2023')"
    },
    {
        "question": "What is the total revenue generated from 'Mouse' sales?",
        "query": "SELECT SUM(Quantity * Price) FROM order_items WHERE ProductName = 'Mouse'"
    },
    {
        "question": "Find the customer tier and number of orders for each customer.",
        "query": "SELECT T1.Tier, COUNT(T2.OrderID) FROM customers AS T1 LEFT JOIN orders AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Tier"
    },
    {
        "question": "List the names of products that have been ordered more than 5 times.",
        "query": "SELECT ProductName FROM order_items GROUP BY ProductName HAVING SUM(Quantity) > 5"
    },
    {
        "question": "What is the total amount spent by each customer in 2024?",
        "query": "SELECT T1.Name, SUM(T2.TotalAmount) FROM customers AS T1 INNER JOIN orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE strftime('%Y', T2.OrderDate) = '2024' GROUP BY T1.Name"
    },
    {
        "question": "What is the average milliseconds of tracks in the album 'For Those Who Have Heart'?",
        "query": "SELECT AVG(milliseconds) FROM tracks WHERE albumid = ( SELECT albumid FROM albums WHERE title = 'For Those Who Have Heart' );"
    },
    {
        "question": "Which albums have a total track length (in milliseconds) greater than 500000 milliseconds?",
        "query": "SELECT title FROM albums WHERE albumid IN ( SELECT albumid FROM tracks GROUP BY albumid HAVING SUM(milliseconds) > 500000 );"
    },
    {
        "question": "What is the title of the longest track on the album 'Let There Be Rock'?",
        "query": "SELECT name FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'Let There Be Rock') ORDER BY milliseconds DESC LIMIT 1;"
    },
    {
        "question": "List the names of all tracks in the 'Grunge' playlist.",
        "query": "SELECT tracks.name FROM tracks INNER JOIN playlist_tracks ON tracks.trackid = playlist_tracks.trackid WHERE playlist_tracks.playlistid = (SELECT playlistid FROM playlists WHERE name = 'Grunge');"
    },
    {
        "question": "Find the name and composer of the most expensive track.",
        "query": "SELECT name, composer FROM tracks ORDER BY unitprice DESC LIMIT 1;"
    },
    {
        "question": "What is the total cost of all tracks in the 'Music' playlist?",
        "query": "SELECT SUM(tracks.unitprice) FROM tracks INNER JOIN playlist_tracks ON tracks.trackid = playlist_tracks.trackid WHERE playlist_tracks.playlistid = (SELECT playlistid FROM playlists WHERE name = 'Music');"
    },
    {
        "question": "What are the names of all the tracks purchased by the customer with CustomerId 10?",
        "query": "SELECT T3.Name FROM Customer AS T1 INNER JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId INNER JOIN InvoiceLine AS T3 ON T2.InvoiceId = T3.InvoiceId INNER JOIN Track AS T4 ON T3.TrackId = T4.TrackId WHERE T1.CustomerId = 10;"
    },
    {
        "question": "What is the total amount spent by the customer with CustomerId 20?",
        "query": "SELECT SUM(Total) FROM Invoice WHERE CustomerId = 20;"
    },
    {
        "question": "List the names of all the artists whose tracks are in the 'Rock' genre.",
        "query": "SELECT T2.Name FROM Genre AS T1 INNER JOIN Track AS T2 ON T1.GenreId = T2.GenreId INNER JOIN Artist AS T3 ON T2.ArtistId = T3.ArtistId WHERE T1.Name = 'Rock';"
    },
    {
        "question": "What are the names of the top 5 most purchased tracks?",
        "query": "SELECT T2.Name FROM InvoiceLine AS T1 INNER JOIN Track AS T2 ON T1.TrackId = T2.TrackId GROUP BY T2.Name ORDER BY SUM(T1.Quantity) DESC LIMIT 5;"
    },
    {
        "question": "List the names of all the playlists created by the customer with CustomerId 15.",
        "query": "SELECT Name FROM Playlist WHERE CustomerId = 15;"
    },
    {
        "question": "What is the total length (in milliseconds) of all the tracks in the 'Classical' genre?",
        "query": "SELECT SUM(Milliseconds) FROM Track AS T1 INNER JOIN Genre AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name = 'Classical';"
    },
    {
        "question": "What is the total length (in milliseconds) of all the tracks in the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT SUM(milliseconds) FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'For Those About To Rock We Salute You');"
    },
    {
        "question": "List the names of all tracks that cost more than $0.99, ordered by price descending.",
        "query": "SELECT name FROM tracks WHERE unitprice > 0.99 ORDER BY unitprice DESC;"
    },
    {
        "question": "List all the genres and the number of tracks belonging to each genre.",
        "query": "SELECT T2.name, COUNT(T1.trackid) FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid GROUP BY T1.genreid;"
    },
    {
        "question": "What is the title of the album with the shortest average track length?",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid GROUP BY T2.albumid ORDER BY AVG(T1.milliseconds) ASC LIMIT 1;"
    },
    {
        "question": "List the albums with the highest average track duration.",
        "query": "SELECT title FROM albums WHERE albumid IN (SELECT albumid FROM tracks GROUP BY albumid ORDER BY AVG(milliseconds) DESC LIMIT 1);"
    },
    {
        "question": "What is the name of the artist who composed the most expensive track?",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN artists AS T2 ON T1.composer = T2.name ORDER BY T1.unitprice DESC LIMIT 1;"
    },
    {
        "question": "List all the tracks that belong to the 'Alternative & Punk' genre and cost more than the average track price.",
        "query": "SELECT name FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Alternative & Punk') AND unitprice > (SELECT AVG(unitprice) FROM tracks);"
    },
    {
        "question": "What is the average unit price of tracks in each genre?",
        "query": "SELECT T2.name, AVG(T1.unitprice) FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid GROUP BY T2.name;"
    },
    {
        "question": "What is the composer of the track 'For Elise'?",
        "query": "SELECT composer FROM tracks WHERE name = 'For Elise';"
    },
    {
        "question": "What are the names and unit prices of all tracks that cost more than $0.99?",
        "query": "SELECT name, unitprice FROM tracks WHERE unitprice > 0.99;"
    },
    {
        "question": "What are the names of all tracks in the 'Classical' genre?",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Classical';"
    },
    {
        "question": "What are the names of the artists whose tracks are included in the 'Classical' genre?",
        "query": "SELECT T3.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid INNER JOIN albums AS T4 ON T1.albumid = T4.albumid INNER JOIN artists AS T3 ON T4.artistid = T3.artistid WHERE T2.name = 'Classical';"
    },
    {
        "question": "What are the names of all the playlists that include the track 'For Elise'?",
        "query": "SELECT T2.name FROM playlisttracks AS T1 INNER JOIN playlists AS T2 ON T1.playlistid = T2.playlistid INNER JOIN tracks AS T3 ON T1.trackid = T3.trackid WHERE T3.name = 'For Elise';"
    },
    {
        "question": "What are the names of the tracks that are included in the playlist 'Music'?",
        "query": "SELECT T3.name FROM playlisttracks AS T1 INNER JOIN playlists AS T2 ON T1.playlistid = T2.playlistid INNER JOIN tracks AS T3 ON T1.trackid = T3.trackid WHERE T2.name = 'Music';"
    },
    {
        "question": "What is the average track length for the album 'The White Album'?",
        "query": "SELECT AVG(milliseconds) FROM tracks WHERE album = 'The White Album'"
    },
    {
        "question": "How many tracks are in the 'Pop' genre?",
        "query": "SELECT COUNT(*) FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genre = T2.id WHERE T2.name = 'Pop'"
    },
    {
        "question": "List the names of all albums that have tracks longer than 6 minutes.",
        "query": "SELECT album FROM tracks WHERE milliseconds > 360000 GROUP BY album"
    },
    {
        "question": "What is the total length of all tracks on the album 'Sgt. Pepper's Lonely Hearts Club Band'?",
        "query": "SELECT SUM(milliseconds) FROM tracks WHERE album = 'Sgt. Pepper\\'s Lonely Hearts Club Band'"
    },
    {
        "question": "What is the name of the album with the highest unit price?",
        "query": "SELECT title FROM albums ORDER BY price DESC LIMIT 1;"
    },
    {
        "question": "List the albums by AC/DC along with the number of tracks in each album.",
        "query": "SELECT T2.title, COUNT(T1.trackid) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid INNER JOIN artists AS T3 ON T2.artistid = T3.artistid WHERE T3.name = 'AC/DC' GROUP BY T2.title;"
    },
    {
        "question": "What is the name and unit price of the cheapest track in the 'Rock' genre?",
        "query": "SELECT name, unitprice FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Rock' ORDER BY T1.unitprice ASC LIMIT 1;"
    },
    {
        "question": "What is the total revenue generated from sales of the album 'Let There Be Rock'?",
        "query": "SELECT SUM(unitprice * quantity) FROM invoice_items WHERE trackid IN (SELECT trackid FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'Let There Be Rock'));"
    },
    {
        "question": "Which customers have purchased tracks from the album 'Big Ones'?",
        "query": "SELECT DISTINCT T3.FirstName, T3.LastName FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.AlbumId = T2.AlbumId INNER JOIN invoice_items AS T4 ON T2.TrackId = T4.TrackId INNER JOIN invoices AS T5 ON T4.InvoiceId = T5.InvoiceId INNER JOIN customers AS T3 ON T5.CustomerId = T3.CustomerId WHERE T1.Title = 'Big Ones';"
    },
    {
        "question": "List the names of artists whose albums have an average track duration of more than 5 minutes.",
        "query": "SELECT T2.name FROM albums AS T1 INNER JOIN artists AS T2 ON T1.artistid = T2.artistid INNER JOIN tracks AS T3 ON T1.albumid = T3.albumid GROUP BY T2.name HAVING AVG(T3.milliseconds) > 300000;"
    },
    {
        "question": "List all invoices for customer with CustomerId 5 along with invoice date and total.",
        "query": "SELECT InvoiceId, InvoiceDate, Total FROM Invoice WHERE CustomerId = 5;"
    },
    {
        "question": "What are the tracks purchased in invoice with InvoiceId 1?",
        "query": "SELECT t.Name FROM InvoiceLine il JOIN Track t ON il.TrackId = t.TrackId WHERE il.InvoiceId = 1;"
    },
    {
        "question": "List all tracks of the 'Rock' genre.",
        "query": "SELECT t.Name FROM Track t JOIN Genre g ON t.GenreId = g.GenreId WHERE g.Name = 'Rock';"
    },
    {
        "question": "What is the name of the artist who recorded the track with TrackId 1?",
        "query": "SELECT ar.Name FROM Track t JOIN Album al ON t.AlbumId = al.AlbumId JOIN Artist ar ON al.ArtistId = ar.ArtistId WHERE t.TrackId = 1;"
    },
    {
        "question": "List all tracks in the 'Grunge' playlist.",
        "query": "SELECT t.Name FROM Playlist p JOIN PlaylistTrack pt ON p.PlaylistId = pt.PlaylistId JOIN Track t ON pt.TrackId = t.TrackId WHERE p.Name = 'Grunge';"
    },
    {
        "question": "Find the name and price of all tracks that belong to the album 'Let There Be Rock'.",
        "query": "SELECT T.Name, T.UnitPrice FROM tracks AS T INNER JOIN albums AS A ON T.AlbumId = A.AlbumId WHERE A.Title = 'Let There Be Rock'"
    },
    {
        "question": "What is the total amount spent by each customer on purchases from the store?",
        "query": "SELECT c.CustomerId, c.FirstName, c.LastName, SUM(i.Total) AS TotalSpent FROM customers AS c INNER JOIN invoices AS i ON c.CustomerId = i.CustomerId GROUP BY c.CustomerId"
    },
    {
        "question": "List the names of all customers who have purchased tracks from the album 'For Those About To Rock We Salute You'.",
        "query": "SELECT DISTINCT C.FirstName, C.LastName FROM customers AS C INNER JOIN invoices AS I ON C.CustomerId = I.CustomerId INNER JOIN invoice_items AS II ON I.InvoiceId = II.InvoiceId INNER JOIN tracks AS T ON II.TrackId = T.TrackId INNER JOIN albums AS A ON T.AlbumId = A.AlbumId WHERE A.Title = 'For Those About To Rock We Salute You'"
    },
    {
        "question": "How many tracks are there in the album 'Dark Side of the Moon'?",
        "query": "SELECT COUNT(*) FROM tracks AS T INNER JOIN albums AS A ON T.AlbumId = A.AlbumId WHERE A.Title = 'Dark Side of the Moon'"
    },
    {
        "question": "List the names of all playlists that contain the track 'Money'.",
        "query": "SELECT P.Name FROM playlists AS P INNER JOIN playlist_track AS PT ON P.PlaylistId = PT.PlaylistId INNER JOIN tracks AS T ON PT.TrackId = T.TrackId WHERE T.Name = 'Money'"
    },
    {
        "question": "Which customer has made the most purchases (invoices)?",
        "query": "SELECT FirstName, LastName FROM customers GROUP BY CustomerId ORDER BY COUNT(InvoiceId) DESC LIMIT 1"
    },
    {
        "question": "List the names of all tracks in the 'Grunge' genre that cost more than $0.99.",
        "query": "SELECT T.Name FROM tracks AS T INNER JOIN genres AS G ON T.GenreId = G.GenreId WHERE G.Name = 'Grunge' AND T.UnitPrice > 0.99"
    },
    {
        "question": "What is the name and email address of the customer who has spent the most money at the store?",
        "query": "SELECT Customer.FirstName, Customer.LastName, Customer.Email FROM Customer INNER JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId GROUP BY Customer.CustomerId ORDER BY SUM(Invoice.Total) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all the artists and the number of albums they have released.",
        "query": "SELECT Artist.Name, COUNT(Album.AlbumId) FROM Artist LEFT JOIN Album ON Artist.ArtistId = Album.ArtistId GROUP BY Artist.ArtistId;"
    },
    {
        "question": "What are the names of the top 5 most popular genres based on the number of tracks sold?",
        "query": "SELECT Genre.Name FROM Genre INNER JOIN Track ON Genre.GenreId = Track.GenreId INNER JOIN InvoiceLine ON Track.TrackId = InvoiceLine.TrackId GROUP BY Genre.GenreId ORDER BY SUM(InvoiceLine.Quantity) DESC LIMIT 5;"
    },
    {
        "question": "List all the tracks in the album 'For Those About To Rock We Salute You'.",
        "query": "SELECT Track.Name FROM Track INNER JOIN Album ON Track.AlbumId = Album.AlbumId WHERE Album.Title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "What is the total revenue generated by each playlist?",
        "query": "SELECT Playlist.Name, SUM(InvoiceLine.UnitPrice * InvoiceLine.Quantity) FROM Playlist INNER JOIN PlaylistTrack ON Playlist.PlaylistId = PlaylistTrack.PlaylistId INNER JOIN Track ON PlaylistTrack.TrackId = Track.TrackId INNER JOIN InvoiceLine ON Track.TrackId = InvoiceLine.TrackId GROUP BY Playlist.PlaylistId;"
    },
    {
        "question": "What is the average length of tracks in the genre 'Rock'?",
        "query": "SELECT AVG(Milliseconds) FROM Track INNER JOIN Genre ON Track.GenreId = Genre.GenreId WHERE Genre.Name = 'Rock';"
    },
    {
        "question": "Find the names of all customers who have purchased tracks from the artist 'AC/DC'.",
        "query": "SELECT Customer.FirstName, Customer.LastName FROM Customer INNER JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId INNER JOIN InvoiceLine ON Invoice.InvoiceId = InvoiceLine.InvoiceId INNER JOIN Track ON InvoiceLine.TrackId = Track.TrackId INNER JOIN Album ON Track.AlbumId = Album.AlbumId INNER JOIN Artist ON Album.ArtistId = Artist.ArtistId WHERE Artist.Name = 'AC/DC';"
    },
    {
        "question": "What is the total length (in milliseconds) of all tracks in the 'Grunge' playlist?",
        "query": "SELECT SUM(tracks.milliseconds) FROM tracks INNER JOIN playlist_tracks ON tracks.trackid = playlist_tracks.trackid WHERE playlist_tracks.playlistid = (SELECT playlistid FROM playlists WHERE name = 'Grunge');"
    },
    {
        "question": "List the names of all artists and the number of albums they have.",
        "query": "SELECT T2.name, COUNT(T1.albumid) FROM albums AS T1 INNER JOIN artists AS T2 ON T1.artistid = T2.artistid GROUP BY T2.name;"
    },
    {
        "question": "List all the invoices from 2009.",
        "query": "SELECT * FROM Invoice WHERE InvoiceDate LIKE '2009%';"
    },
    {
        "question": "What are the top 5 most popular genres?",
        "query": "SELECT g.Name, COUNT(*) AS TrackCount FROM Genre g JOIN Track t ON g.GenreId = t.GenreId GROUP BY g.Name ORDER BY TrackCount DESC LIMIT 5;"
    },
    {
        "question": "List all the employees and their respective supervisors.",
        "query": "SELECT e.FirstName || ' ' || e.LastName AS EmployeeName, s.FirstName || ' ' || s.LastName AS SupervisorName FROM Employee e LEFT JOIN Employee s ON e.ReportsTo = s.EmployeeId;"
    },
    {
        "question": "What are the names of the tracks that belong to the genre with the highest number of tracks?",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid GROUP BY T2.genreid ORDER BY COUNT(T1.trackid) DESC LIMIT 1;"
    },
    {
        "question": "What are the names of the tracks by 'AC/DC'?",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.album_id = T2.album_id INNER JOIN artists AS T3 ON T2.artist_id = T3.artist_id WHERE T3.name = 'AC/DC';"
    },
    {
        "question": "What is the total length of all the tracks in the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT SUM(T1.milliseconds) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.album_id = T2.album_id WHERE T2.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "What are the names of the albums that have tracks longer than 5 minutes?",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.album_id = T2.album_id WHERE T1.milliseconds > 300000;"
    },
    {
        "question": "What are the names of the artists whose albums have an average track length greater than 4 minutes?",
        "query": "SELECT T3.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.album_id = T2.album_id INNER JOIN artists AS T3 ON T2.artist_id = T3.artist_id GROUP BY T3.name HAVING AVG(T1.milliseconds) > 240000;"
    },
    {
        "question": "What are the names of all the tracks in the 'For Those About To Rock We Salute You' album?",
        "query": "SELECT t.Name FROM Track t JOIN Album a ON t.AlbumId = a.AlbumId WHERE a.Title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "What is the average length of tracks in the Rock genre?",
        "query": "SELECT AVG(Milliseconds) FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Rock');"
    },
    {
        "question": "What is the total revenue generated from sales of tracks in the Rock genre?",
        "query": "SELECT SUM(il.UnitPrice * il.Quantity) FROM InvoiceLine il JOIN Track t ON il.TrackId = t.TrackId WHERE t.GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Rock');"
    },
    {
        "question": "What is the name and unit price of the cheapest track in the database?",
        "query": "SELECT name, unit_price FROM tracks ORDER BY unit_price ASC LIMIT 1;"
    },
    {
        "question": "What are the names of the tracks composed by Ludwig van Beethoven?",
        "query": "SELECT name FROM tracks WHERE composer = 'Ludwig van Beethoven';"
    },
    {
        "question": "What is the genre of the track 'Eine Kleine Nachtmusik'?",
        "query": "SELECT genre FROM tracks WHERE name = 'Eine Kleine Nachtmusik';"
    },
    {
        "question": "What are the names of all the Classical tracks?",
        "query": "SELECT name FROM tracks WHERE genre = 'Classical';"
    },
    {
        "question": "What is the milliseconds length of the track 'F\u00fcr Elise'?",
        "query": "SELECT milliseconds FROM tracks WHERE name = 'F\u00fcr Elise';"
    },
    {
        "question": "What is the name of the album that contains the track 'Dazed and Confused'?",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T1.name = 'Dazed and Confused';"
    },
    {
        "question": "What are the titles of all the albums by the artist 'AC/DC'?",
        "query": "SELECT Title FROM Album WHERE ArtistId = (SELECT ArtistId FROM Artist WHERE Name = 'AC/DC');"
    },
    {
        "question": "Which customer spent the most money?",
        "query": "SELECT Customer.FirstName, Customer.LastName FROM Customer INNER JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId GROUP BY Customer.CustomerId ORDER BY SUM(Invoice.Total) DESC LIMIT 1;"
    },
    {
        "question": "List all the invoices from customers in Brazil.",
        "query": "SELECT * FROM Invoice WHERE CustomerId IN (SELECT CustomerId FROM Customer WHERE Country = 'Brazil');"
    },
    {
        "question": "What is the total revenue generated by sales of the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT SUM(InvoiceLine.UnitPrice * InvoiceLine.Quantity) FROM InvoiceLine INNER JOIN Track ON InvoiceLine.TrackId = Track.TrackId INNER JOIN Album ON Track.AlbumId = Album.AlbumId WHERE Album.Title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "List all the tracks in the playlist 'Grunge'.",
        "query": "SELECT Track.Name FROM Track INNER JOIN PlaylistTrack ON Track.TrackId = PlaylistTrack.TrackId INNER JOIN Playlist ON PlaylistTrack.PlaylistId = Playlist.PlaylistId WHERE Playlist.Name = 'Grunge';"
    },
    {
        "question": "What is the total duration of all the tracks in the 'Classical' genre?",
        "query": "SELECT SUM(milliseconds) FROM tracks WHERE genreId = (SELECT genreId FROM genres WHERE name = 'Classical');"
    },
    {
        "question": "What is the name of the playlist that contains the track 'For Those About To Rock (We Salute You)'?",
        "query": "SELECT playlists.name FROM playlists INNER JOIN playlist_tracks ON playlists.playlistId = playlist_tracks.playlistId WHERE playlist_tracks.trackId = (SELECT trackId FROM tracks WHERE name = 'For Those About To Rock (We Salute You)');"
    },
    {
        "question": "List the names of all the tracks that are not part of any playlist.",
        "query": "SELECT name FROM tracks EXCEPT SELECT T3.name FROM playlists AS T1 INNER JOIN playlist_tracks AS T2 ON T1.playlistId = T2.playlistId INNER JOIN tracks AS T3 ON T2.trackId = T3.trackId;"
    },
    {
        "question": "List the names of all customers in the Chinook database.",
        "query": "SELECT FirstName, LastName FROM Customer;"
    },
    {
        "question": "What is the email address of the customer with CustomerId 1?",
        "query": "SELECT Email FROM Customer WHERE CustomerId = 1;"
    },
    {
        "question": "What is the title of the employee with EmployeeId 1?",
        "query": "SELECT Title FROM Employee WHERE EmployeeId = 1;"
    },
    {
        "question": "List the names of all invoices in the Chinook database.",
        "query": "SELECT InvoiceId FROM Invoice;"
    },
    {
        "question": "What is the billing address of the invoice with InvoiceId 1?",
        "query": "SELECT BillingAddress FROM Invoice WHERE InvoiceId = 1;"
    },
    {
        "question": "List the names of all invoice lines in the Chinook database.",
        "query": "SELECT InvoiceLineId FROM InvoiceLine;"
    },
    {
        "question": "What is the unit price of the invoice line with InvoiceLineId 1?",
        "query": "SELECT UnitPrice FROM InvoiceLine WHERE InvoiceLineId = 1;"
    },
    {
        "question": "How many tracks are there in the 'Grunge' genre?",
        "query": "SELECT COUNT(*) FROM Track AS T INNER JOIN Genre AS G ON T.GenreId = G.GenreId WHERE G.Name = 'Grunge';"
    },
    {
        "question": "What is the name of the artist with ArtistId 1?",
        "query": "SELECT Name FROM Artist WHERE ArtistId = 1;"
    },
    {
        "question": "Which sales support agent made the most sales in 2009?",
        "query": "SELECT E.FirstName, E.LastName FROM Employee AS E INNER JOIN Customer AS C ON E.EmployeeId = C.SupportRepId INNER JOIN Invoice AS I ON C.CustomerId = I.CustomerId WHERE STRFTIME('%Y', I.InvoiceDate) = '2009' GROUP BY E.EmployeeId ORDER BY SUM(I.Total) DESC LIMIT 1;"
    },
    {
        "question": "Which city has the most customers?",
        "query": "SELECT City, COUNT(*) AS CustomerCount FROM Customer GROUP BY City ORDER BY CustomerCount DESC LIMIT 1;"
    },
    {
        "question": "What is the average invoice total?",
        "query": "SELECT AVG(Total) FROM Invoice;"
    },
    {
        "question": "List the names and email addresses of all customers who have purchased tracks from the 'Rock' genre.",
        "query": "SELECT DISTINCT C.FirstName, C.LastName, C.Email FROM Customer AS C INNER JOIN Invoice AS I ON C.CustomerId = I.CustomerId INNER JOIN InvoiceLine AS IL ON I.InvoiceId = IL.InvoiceId INNER JOIN Track AS T ON IL.TrackId = T.TrackId INNER JOIN Genre AS G ON T.GenreId = G.GenreId WHERE G.Name = 'Rock';"
    },
    {
        "question": "List the order IDs and order dates for all orders placed by the customer named 'David Lee'.",
        "query": "SELECT order_id, order_date FROM Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'David Lee')"
    },
    {
        "question": "Which products have been ordered in quantities greater than 5?",
        "query": "SELECT p.product_name FROM Products AS p INNER JOIN OrderItems AS oi ON p.product_id = oi.product_id WHERE oi.quantity > 5"
    },
    {
        "question": "List the customer names and the products they have ordered.",
        "query": "SELECT c.customer_name, p.product_name FROM Customers AS c INNER JOIN Orders AS o ON c.customer_id = o.customer_id INNER JOIN OrderItems AS oi ON o.order_id = oi.order_id INNER JOIN Products AS p ON oi.product_id = p.product_id"
    },
    {
        "question": "Which customer has placed the most recent order?",
        "query": "SELECT c.customer_name FROM Customers AS c INNER JOIN Orders AS o ON c.customer_id = o.customer_id ORDER BY o.order_date DESC LIMIT 1"
    },
    {
        "question": "List the products that have not been ordered by any customer.",
        "query": "SELECT product_name FROM Products EXCEPT SELECT p.product_name FROM Products AS p INNER JOIN OrderItems AS oi ON p.product_id = oi.product_id"
    },
    {
        "question": "Find the customers who have ordered 'Laptop'.",
        "query": "SELECT c.customer_name FROM Customers AS c INNER JOIN Orders AS o ON c.customer_id = o.customer_id INNER JOIN OrderItems AS oi ON o.order_id = oi.order_id INNER JOIN Products AS p ON oi.product_id = p.product_id WHERE p.product_name = 'Laptop'"
    },
    {
        "question": "What is the email address of the customer with CustomerId 5?",
        "query": "SELECT Email FROM Customer WHERE CustomerId = 5;"
    },
    {
        "question": "What is the average length of a track in the 'Rock' genre?",
        "query": "SELECT AVG(Milliseconds) FROM Track AS t JOIN Genre AS g ON t.GenreId = g.GenreId WHERE g.Name = 'Rock';"
    },
    {
        "question": "List the top 10 most expensive tracks.",
        "query": "SELECT Name, UnitPrice FROM Track ORDER BY UnitPrice DESC LIMIT 10;"
    },
    {
        "question": "List all the tracks by 'AC/DC'.",
        "query": "SELECT T1.Name FROM Track AS T1 INNER JOIN Album AS T2 ON T1.AlbumId = T2.AlbumId INNER JOIN Artist AS T3 ON T2.ArtistId = T3.ArtistId WHERE T3.Name = 'AC/DC';"
    },
    {
        "question": "Find the name and birth date of the artist with the name 'Vincent van Gogh'.",
        "query": "SELECT name, birth_date FROM artist WHERE name = 'Vincent van Gogh';"
    },
    {
        "question": "List all artworks created by the artist 'Claude Monet'.",
        "query": "SELECT * FROM artwork WHERE artist_id = (SELECT id FROM artist WHERE name = 'Claude Monet');"
    },
    {
        "question": "Find the titles of all artworks located in the 'Mus\u00e9e d'Orsay'.",
        "query": "SELECT title FROM artwork WHERE location = 'Mus\u00e9e d'Orsay';"
    },
    {
        "question": "List the names of all artists born after 1850.",
        "query": "SELECT name FROM artist WHERE birth_date > '1850-01-01';"
    },
    {
        "question": "Find the earliest birth date among all artists in the database.",
        "query": "SELECT MIN(birth_date) FROM artist;"
    },
    {
        "question": "List the names and nationalities of all artists whose nationality is not 'French'.",
        "query": "SELECT name, nationality FROM artist WHERE nationality != 'French';"
    },
    {
        "question": "Find the title and creation year of the artwork with the highest value.",
        "query": "SELECT title, creation_year FROM artwork ORDER BY value DESC LIMIT 1;"
    },
    {
        "question": "List all artworks created between 1800 and 1900, ordered by creation year.",
        "query": "SELECT * FROM artwork WHERE creation_year BETWEEN 1800 AND 1900 ORDER BY creation_year;"
    },
    {
        "question": "Find the names of artists who have created artworks with a value greater than 1000000.",
        "query": "SELECT T2.name FROM artwork AS T1 INNER JOIN artist AS T2 ON T1.artist_id = T2.id WHERE T1.value > 1000000;"
    },
    {
        "question": "List the titles of all artworks that have a description containing the word 'impressionism'.",
        "query": "SELECT title FROM artwork WHERE description LIKE '%impressionism%';"
    },
    {
        "question": "Find the average value of all artworks in the database.",
        "query": "SELECT AVG(value) FROM artwork;"
    },
    {
        "question": "List the names of all artists and the number of artworks they have created.",
        "query": "SELECT T2.name, COUNT(T1.id) FROM artwork AS T1 INNER JOIN artist AS T2 ON T1.artist_id = T2.id GROUP BY T2.name;"
    },
    {
        "question": "Find the title of the artwork with the longest description.",
        "query": "SELECT title FROM artwork ORDER BY LENGTH(description) DESC LIMIT 1;"
    },
    {
        "question": "List all artworks created by artists of 'Dutch' nationality.",
        "query": "SELECT T1.* FROM artwork AS T1 INNER JOIN artist AS T2 ON T1.artist_id = T2.id WHERE T2.nationality = 'Dutch';"
    },
    {
        "question": "Find the names of artists born in the same year as 'Vincent van Gogh'.",
        "query": "SELECT name FROM artist WHERE birth_date = (SELECT birth_date FROM artist WHERE name = 'Vincent van Gogh');"
    },
    {
        "question": "Show the SQL schema for the table named employees.",
        "query": "SELECT sql FROM sqlite_master WHERE type='table' AND name='employees';"
    },
    {
        "question": "How many indexes are there in the database?",
        "query": "SELECT COUNT(*) FROM sqlite_master WHERE type='index';"
    },
    {
        "question": "Show the definition of the trigger named 'update_employee_salary'.",
        "query": "SELECT sql FROM sqlite_master WHERE type='trigger' AND name='update_employee_salary';"
    },
    {
        "question": "List all tables and their corresponding schemas in the database.",
        "query": "SELECT name, sql FROM sqlite_master WHERE type='table';"
    },
    {
        "question": "Find all tables related to employee information.",
        "query": "SELECT name FROM sqlite_master WHERE type='table' AND name LIKE '%employee%';"
    },
    {
        "question": "What are the indexes associated with the employees table?",
        "query": "SELECT name FROM sqlite_master WHERE type='index' AND tbl_name='employees';"
    },
    {
        "question": "Are there any views defined for employee salary information?",
        "query": "SELECT name FROM sqlite_master WHERE type='view' AND name LIKE '%salary%';"
    },
    {
        "question": "List the tracks purchased by the customer 'Lu\u00eds Gon\u00e7alves'.",
        "query": "SELECT t.name FROM customers c JOIN invoices i ON c.customerid = i.customerid JOIN invoicelines il ON i.invoiceid = il.invoiceid JOIN tracks t ON il.trackid = t.trackid WHERE c.firstname = 'Lu\u00eds' AND c.lastname = 'Gon\u00e7alves';"
    },
    {
        "question": "Which playlist has the longest total duration?",
        "query": "SELECT p.name FROM playlists p JOIN playlist_tracks pt ON p.playlistid = pt.playlistid JOIN tracks t ON pt.trackid = t.trackid GROUP BY p.playlistid ORDER BY SUM(t.milliseconds) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all tracks that belong to the album 'For Those About To Rock We Salute You'.",
        "query": "SELECT T2.name FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid WHERE T1.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "What is the name and email address of the customer with CustomerId 5?",
        "query": "SELECT FirstName, LastName, Email FROM Customer WHERE CustomerId = 5;"
    },
    {
        "question": "List the names of all the artists whose names start with 'A'.",
        "query": "SELECT Name FROM Artist WHERE Name LIKE 'A%';"
    },
    {
        "question": "Which album has the longest title?",
        "query": "SELECT Title FROM Album ORDER BY LENGTH(Title) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all playlists that contain the word 'Music'.",
        "query": "SELECT Name FROM Playlist WHERE Name LIKE '%Music%';"
    },
    {
        "question": "Which customer spent the most money in 2011?",
        "query": "SELECT T1.FirstName, T1.LastName FROM Customer AS T1 INNER JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.InvoiceDate LIKE '2011%' GROUP BY T1.CustomerId ORDER BY SUM(T2.Total) DESC LIMIT 1;"
    },
    {
        "question": "List all invoices with a total greater than $10.",
        "query": "SELECT * FROM Invoice WHERE Total > 10;"
    },
    {
        "question": "List the names of all playlists that include the track 'Dazed and Confused'.",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN playlists AS T2 ON T1.playlist_id = T2.playlist_id INNER JOIN tracks AS T3 ON T1.track_id = T3.track_id WHERE T3.name = 'Dazed and Confused' GROUP BY T2.name;"
    },
    {
        "question": "List the order IDs and total amounts for all orders placed by customer 'Cardinal'",
        "query": "SELECT order_id, total_amount FROM orders WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_name = 'Cardinal')"
    },
    {
        "question": "What is the average total amount of orders placed in 2024?",
        "query": "SELECT AVG(total_amount) FROM orders WHERE order_date BETWEEN '2024-01-01' AND '2024-12-31'"
    },
    {
        "question": "Find the customer name and order date for the order with the highest total amount.",
        "query": "SELECT c.customer_name, o.order_date FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id ORDER BY o.total_amount DESC LIMIT 1"
    },
    {
        "question": "List the product names and quantities ordered for order ID 101.",
        "query": "SELECT p.product_name, oi.quantity FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id WHERE oi.order_id = 101"
    },
    {
        "question": "What is the total revenue generated by product 'Hammer'?",
        "query": "SELECT SUM(oi.quantity * p.price) FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id WHERE p.product_name = 'Hammer'"
    },
    {
        "question": "Which customers have ordered 'Pliers'?",
        "query": "SELECT c.customer_name FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id WHERE p.product_name = 'Pliers'"
    },
    {
        "question": "List the customer names and total amounts of their orders placed between '2023-01-01' and '2023-12-31'.",
        "query": "SELECT c.customer_name, o.total_amount FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date BETWEEN '2023-01-01' AND '2023-12-31'"
    },
    {
        "question": "Find the product name that has been ordered the most.",
        "query": "SELECT p.product_name FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_name ORDER BY SUM(oi.quantity) DESC LIMIT 1"
    },
    {
        "question": "What is the total amount of the order that includes 'Screwdriver'?",
        "query": "SELECT o.total_amount FROM orders o INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id WHERE p.product_name = 'Screwdriver'"
    },
    {
        "question": "What is the total amount spent by the customer with CustomerId 5?",
        "query": "SELECT SUM(Total) FROM Invoice WHERE CustomerId = 5;"
    },
    {
        "question": "What is the name of the genre with GenreId 1?",
        "query": "SELECT Name FROM Genre WHERE GenreId = 1;"
    },
    {
        "question": "How many tracks are in the genre 'Rock'?",
        "query": "SELECT COUNT(*) FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Rock');"
    },
    {
        "question": "What is the name of the media type with MediaTypeId 1?",
        "query": "SELECT Name FROM MediaType WHERE MediaTypeId = 1;"
    },
    {
        "question": "How many tracks are there of the media type 'MPEG audio file'?",
        "query": "SELECT COUNT(*) FROM Track WHERE MediaTypeId = (SELECT MediaTypeId FROM MediaType WHERE Name = 'MPEG audio file');"
    },
    {
        "question": "List the names and salaries of all employees in the sales department.",
        "query": "SELECT name, salary FROM employees WHERE department = 'Sales';"
    },
    {
        "question": "Find the employee with the lowest salary in the IT department.",
        "query": "SELECT name, salary FROM employees WHERE department = 'IT' ORDER BY salary ASC LIMIT 1;"
    },
    {
        "question": "List the names and hire dates of all employees hired after 2022-01-01.",
        "query": "SELECT name, hire_date FROM employees WHERE hire_date > '2022-01-01';"
    },
    {
        "question": "List the names of all employees whose names start with the letter 'A'.",
        "query": "SELECT name FROM employees WHERE name LIKE 'A%';"
    },
    {
        "question": "List the names of employees who have a salary greater than $60,000 and work in the Sales or Marketing departments.",
        "query": "SELECT name FROM employees WHERE salary > 60000 AND department IN ('Sales', 'Marketing');"
    },
    {
        "question": "List the employee names and department of those who were hired in the year 2023.",
        "query": "SELECT name, department FROM employees WHERE strftime('%Y', hire_date) = '2023';"
    },
    {
        "question": "Find the names of departments that have an average salary greater than $70,000.",
        "query": "SELECT department FROM employees GROUP BY department HAVING AVG(salary) > 70000;"
    },
    {
        "question": "List the names and salaries of the top 3 highest-paid employees.",
        "query": "SELECT name, salary FROM employees ORDER BY salary DESC LIMIT 3;"
    },
    {
        "question": "List the names of employees who have the same salary.",
        "query": "SELECT name FROM employees WHERE salary IN (SELECT salary FROM employees GROUP BY salary HAVING COUNT(*) > 1);"
    },
    {
        "question": "List the names of all tracks in the 'Rock' genre, ordered alphabetically.",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Rock' ORDER BY T1.name;"
    },
    {
        "question": "What is the title of the album with the highest number of tracks?",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid GROUP BY T2.title ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question": "Find the names of all customers who have purchased tracks from the album 'Big Ones'.",
        "query": "SELECT T1.firstname, T1.lastname FROM customers AS T1 INNER JOIN invoices AS T2 ON T1.customerid = T2.customerid INNER JOIN invoicelines AS T3 ON T2.invoiceid = T3.invoiceid INNER JOIN tracks AS T4 ON T3.trackid = T4.trackid INNER JOIN albums AS T5 ON T4.albumid = T5.albumid WHERE T5.title = 'Big Ones';"
    },
    {
        "question": "List the names of all tracks that have a composer, ordered by the composer's name.",
        "query": "SELECT name FROM tracks WHERE composer IS NOT NULL ORDER BY composer;"
    },
    {
        "question": "List all employees in the 'Sales' department.",
        "query": "SELECT * FROM employees WHERE department = 'Sales';"
    },
    {
        "question": "Find the names of all departments with at least 5 employees.",
        "query": "SELECT department FROM employees GROUP BY department HAVING COUNT(*) >= 5;"
    },
    {
        "question": "List the names and salaries of all employees who earn more than their manager.",
        "query": "SELECT T1.name, T1.salary FROM employees AS T1 INNER JOIN employees AS T2 ON T1.manager_id = T2.id WHERE T1.salary > T2.salary;"
    },
    {
        "question": "Find the names of all employees who do not have a manager.",
        "query": "SELECT name FROM employees WHERE manager_id IS NULL;"
    },
    {
        "question": "Find the order IDs and dates for all orders placed by customer 'John Doe'.",
        "query": "SELECT OrderID, OrderDate FROM Orders WHERE CustomerID = (SELECT CustomerID FROM Customers WHERE Name = 'John Doe')"
    },
    {
        "question": "Which products have been ordered more than once?",
        "query": "SELECT ProductName FROM Products WHERE ProductID IN (SELECT ProductID FROM OrderItems GROUP BY ProductID HAVING COUNT(*) > 1)"
    },
    {
        "question": "List the customers who have placed orders in the year 2023.",
        "query": "SELECT c.Name FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID WHERE strftime('%Y', o.OrderDate) = '2023'"
    },
    {
        "question": "List the order details (order ID, product name, quantity) for all orders.",
        "query": "SELECT o.OrderID, p.ProductName, oi.Quantity FROM Orders o JOIN OrderItems oi ON o.OrderID = oi.OrderID JOIN Products p ON oi.ProductID = p.ProductID"
    },
    {
        "question": "What is the total duration of all tracks in the database in minutes?",
        "query": "SELECT SUM(milliseconds) / 60000 FROM tracks;"
    },
    {
        "question": "What are the names and descriptions of all products ordered by customer 'John Doe'?",
        "query": "SELECT p.name, p.description FROM products p INNER JOIN order_items oi ON p.id = oi.product_id INNER JOIN orders o ON oi.order_id = o.id INNER JOIN customers c ON o.customer_id = c.id WHERE c.name = 'John Doe'"
    },
    {
        "question": "List the order dates and total amounts for all orders placed in 2024.",
        "query": "SELECT o.order_date, SUM(oi.quantity * p.price) AS total_amount FROM orders o INNER JOIN order_items oi ON o.id = oi.order_id INNER JOIN products p ON oi.product_id = p.id WHERE strftime('%Y', o.order_date) = '2024' GROUP BY o.id"
    },
    {
        "question": "Which product has been ordered the most (in terms of total quantity)?",
        "query": "SELECT p.name FROM products p INNER JOIN order_items oi ON p.id = oi.product_id GROUP BY p.id ORDER BY SUM(oi.quantity) DESC LIMIT 1"
    },
    {
        "question": "What is the average price of products in the 'Electronics' category?",
        "query": "SELECT AVG(p.price) FROM products p WHERE p.category = 'Electronics'"
    },
    {
        "question": "How many orders have been placed by each customer?",
        "query": "SELECT c.name, COUNT(o.id) AS order_count FROM customers c INNER JOIN orders o ON c.id = o.customer_id GROUP BY c.id"
    },
    {
        "question": "Find the total revenue generated from each product category.",
        "query": "SELECT p.category, SUM(oi.quantity * p.price) AS total_revenue FROM products p INNER JOIN order_items oi ON p.id = oi.product_id GROUP BY p.category"
    },
    {
        "question": "List the names of customers who have not placed any orders.",
        "query": "SELECT name FROM customers EXCEPT SELECT c.name FROM customers c INNER JOIN orders o ON c.id = o.customer_id"
    },
    {
        "question": "What is the date and amount of the largest order (in terms of total amount)?",
        "query": "SELECT o.order_date, SUM(oi.quantity * p.price) AS total_amount FROM orders o INNER JOIN order_items oi ON o.id = oi.order_id INNER JOIN products p ON oi.product_id = p.id GROUP BY o.id ORDER BY total_amount DESC LIMIT 1"
    },
    {
        "question": "Which customers have ordered products from the 'Books' category?",
        "query": "SELECT DISTINCT c.name FROM customers c INNER JOIN orders o ON c.id = o.customer_id INNER JOIN order_items oi ON o.id = oi.order_id INNER JOIN products p ON oi.product_id = p.id WHERE p.category = 'Books'"
    },
    {
        "question": "What are the names of all the artists in the torrents table?",
        "query": "SELECT DISTINCT artist FROM torrents"
    },
    {
        "question": "How many torrents are there for the artist 'becci wallace & loki'?",
        "query": "SELECT COUNT(*) FROM torrents WHERE artist = 'becci wallace & loki'"
    },
    {
        "question": "List all the release types and the number of torrents for each type.",
        "query": "SELECT releaseType, COUNT(*) AS num_torrents FROM torrents GROUP BY releaseType"
    },
    {
        "question": "What is the average group year for torrents with the release type 'album'?",
        "query": "SELECT AVG(groupYear) FROM torrents WHERE releaseType = 'album'"
    },
    {
        "question": "Find the group names of torrents released in 2015.",
        "query": "SELECT groupName FROM torrents WHERE groupYear = 2015"
    },
    {
        "question": "What are the different tags available in the tags table?",
        "query": "SELECT DISTINCT tag FROM tags"
    },
    {
        "question": "How many tags are associated with the id 34811?",
        "query": "SELECT COUNT(*) FROM tags WHERE id = 34811"
    },
    {
        "question": "Find the tag associated with index 120233.",
        "query": "SELECT tag FROM tags WHERE index = 120233"
    },
    {
        "question": "List all torrents and their corresponding tags.",
        "query": "SELECT T1.groupName, T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id"
    },
    {
        "question": "What is the group name and release type of the torrent with id 17804?",
        "query": "SELECT groupName, releaseType FROM torrents WHERE id = 17804"
    },
    {
        "question": "Find the tag and index for the torrent with group name 'fuck the hype'.",
        "query": "SELECT T2.tag, T2.index FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupName = 'fuck the hype'"
    },
    {
        "question": "List all the artists and their associated tags.",
        "query": "SELECT T1.artist, T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id"
    },
    {
        "question": "How many torrents are associated with the tag 'motown'?",
        "query": "SELECT COUNT(*) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'motown'"
    },
    {
        "question": "What is the average total snatched for torrents tagged with 'doom.metal'?",
        "query": "SELECT AVG(T1.totalSnatched) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'doom.metal'"
    },
    {
        "question": "List the group names and total snatched for torrents released in 2003 and tagged with 'new.zealand'.",
        "query": "SELECT T1.groupName, T1.totalSnatched FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear = 2003 AND T2.tag = 'new.zealand'"
    },
    {
        "question": "Find the artists and release types of torrents with total snatched greater than 2000.",
        "query": "SELECT artist, releaseType FROM torrents WHERE totalSnatched > 2000"
    },
    {
        "question": "What are the tags associated with torrents having a release type of 'single'?",
        "query": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'single'"
    },
    {
        "question": "List the group names and artists for torrents tagged with 'dj.friendly'.",
        "query": "SELECT T1.groupName, T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'dj.friendly'"
    },
    {
        "question": "What is the maximum total snatched for torrents released before 2010?",
        "query": "SELECT MAX(totalSnatched) FROM torrents WHERE groupYear < 2010"
    },
    {
        "question": "Find the minimum group year for torrents with release type 'album'.",
        "query": "SELECT MIN(groupYear) FROM torrents WHERE releaseType = 'album'"
    },
    {
        "question": "List all the tags and the number of torrents associated with each tag.",
        "query": "SELECT T2.tag, COUNT(*) AS num_torrents FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id GROUP BY T2.tag"
    },
    {
        "question": "What is the average group year for torrents tagged with 'folk.pop'?",
        "query": "SELECT AVG(T1.groupYear) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'folk.pop'"
    },
    {
        "question": "Find the group names and total snatched for torrents with groupId greater than 70000000.",
        "query": "SELECT groupName, totalSnatched FROM torrents WHERE groupId > 70000000"
    },
    {
        "question": "What are the release types of torrents with groupYear between 2000 and 2005?",
        "query": "SELECT releaseType FROM torrents WHERE groupYear BETWEEN 2000 AND 2005"
    },
    {
        "question": "List the artists and group names for torrents with total snatched less than 1000.",
        "query": "SELECT artist, groupName FROM torrents WHERE totalSnatched < 1000"
    },
    {
        "question": "What are the tags associated with torrents having groupYear equal to 2015?",
        "query": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear = 2015"
    },
    {
        "question": "List the group names and release types for torrents tagged with 'melting.pot'.",
        "query": "SELECT T1.groupName, T1.releaseType FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'melting.pot'"
    },
    {
        "question": "What is the maximum total snatched for torrents with release type 'ep'?",
        "query": "SELECT MAX(totalSnatched) FROM torrents WHERE releaseType = 'ep'"
    },
    {
        "question": "Find the minimum group year for torrents tagged with 'tribe.metal'.",
        "query": "SELECT MIN(T1.groupYear) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'tribe.metal'"
    },
    {
        "question": "List all the artists and the number of torrents they have.",
        "query": "SELECT artist, COUNT(*) AS num_torrents FROM torrents GROUP BY artist"
    },
    {
        "question": "What is the average total snatched for torrents released in 2001?",
        "query": "SELECT AVG(totalSnatched) FROM torrents WHERE groupYear = 2001"
    },
    {
        "question": "Find the group names and group years for torrents with groupId less than 10000.",
        "query": "SELECT groupName, groupYear FROM torrents WHERE groupId < 10000"
    },
    {
        "question": "What are the release types of torrents with total snatched greater than 1500?",
        "query": "SELECT releaseType FROM torrents WHERE totalSnatched > 1500"
    },
    {
        "question": "List the artists and group names for torrents tagged with 'death.row'.",
        "query": "SELECT T1.artist, T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'death.row'"
    },
    {
        "question": "What is the maximum total snatched for torrents released after 2010?",
        "query": "SELECT MAX(totalSnatched) FROM torrents WHERE groupYear > 2010"
    },
    {
        "question": "Find the minimum group year for torrents with release type 'single'.",
        "query": "SELECT MIN(groupYear) FROM torrents WHERE releaseType = 'single'"
    },
    {
        "question": "List all the release types and the average total snatched for each type.",
        "query": "SELECT releaseType, AVG(totalSnatched) AS avg_snatched FROM torrents GROUP BY releaseType"
    },
    {
        "question": "What is the average group year for torrents tagged with 'league.of.legends'?",
        "query": "SELECT AVG(T1.groupYear) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'league.of.legends'"
    },
    {
        "question": "Find all the group names and the total number of times they appear in the torrents table.",
        "query": "SELECT groupName, COUNT(*) AS frequency FROM torrents GROUP BY groupName"
    },
    {
        "question": "List all distinct release types in the torrents table.",
        "query": "SELECT DISTINCT releaseType FROM torrents"
    },
    {
        "question": "Find the number of torrents for each group year.",
        "query": "SELECT groupYear, COUNT(*) AS num_torrents FROM torrents GROUP BY groupYear"
    },
    {
        "question": "List all torrents with their associated tags, ordered by group name.",
        "query": "SELECT T1.*, T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id ORDER BY T1.groupName"
    },
    {
        "question": "Find all torrents released in the year 2002 and their associated tags.",
        "query": "SELECT T1.*, T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear = 2002"
    },
    {
        "question": "List all torrents with a total snatched count greater than 2000, along with their tags.",
        "query": "SELECT T1.*, T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.totalSnatched > 2000"
    },
    {
        "question": "Find all torrents with the release type 'album' and their corresponding tags.",
        "query": "SELECT T1.*, T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'album'"
    },
    {
        "question": "List all tags and the number of torrents associated with each tag, ordered by the number of torrents in descending order.",
        "query": "SELECT T2.tag, COUNT(*) AS num_torrents FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id GROUP BY T2.tag ORDER BY num_torrents DESC"
    },
    {
        "question": "Find the average total snatched for each release type, ordered by the average snatched count in ascending order.",
        "query": "SELECT releaseType, AVG(totalSnatched) AS avg_snatched FROM torrents GROUP BY releaseType ORDER BY avg_snatched ASC"
    },
    {
        "question": "List all artists and their average total snatched count, ordered by artist name.",
        "query": "SELECT artist, AVG(totalSnatched) AS avg_snatched FROM torrents GROUP BY artist ORDER BY artist"
    },
    {
        "question": "Find the earliest and latest group year in the torrents table.",
        "query": "SELECT MIN(groupYear), MAX(groupYear) FROM torrents"
    },
    {
        "question": "List all torrents with the release type 'single' and their tags, ordered by total snatched count in descending order.",
        "query": "SELECT T1.*, T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'single' ORDER BY T1.totalSnatched DESC"
    },
    {
        "question": "Find all torrents tagged with 'motown' and their release types.",
        "query": "SELECT T1.*, T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'motown'"
    },
    {
        "question": "List all distinct group years in the torrents table.",
        "query": "SELECT DISTINCT groupYear FROM torrents"
    },
    {
        "question": "Find the total number of torrents in the torrents table.",
        "query": "SELECT COUNT(*) FROM torrents"
    },
    {
        "question": "List all torrents with their corresponding group IDs and tags.",
        "query": "SELECT T1.groupName, T1.groupId, T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id"
    },
    {
        "question": "What are the group names and total snatched counts for all torrents released in 2015?",
        "query": "SELECT groupName, totalSnatched FROM torrents WHERE groupYear = 2015"
    },
    {
        "question": "Find all the distinct tags associated with torrents released in the year 2002.",
        "query": "SELECT DISTINCT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear = 2002"
    },
    {
        "question": "List all the artists and their associated tags for torrents with a total snatched count greater than 1000.",
        "query": "SELECT T1.artist, T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.totalSnatched > 1000"
    },
    {
        "question": "What is the average totalSnatched for torrents released in the year 2003?",
        "query": "SELECT AVG(totalSnatched) FROM torrents WHERE groupYear = 2003"
    },
    {
        "question": "List all the tags associated with torrents.",
        "query": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id"
    },
    {
        "question": "What is the groupName and artist for the torrent with the highest totalSnatched?",
        "query": "SELECT groupName, artist FROM torrents ORDER BY totalSnatched DESC LIMIT 1"
    },
    {
        "question": "Find the group names and total snatched counts for torrents tagged with 'motown'.",
        "query": "SELECT T1.groupName, T1.totalSnatched FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'motown'"
    },
    {
        "question": "What are the tags associated with the torrent with the lowest groupYear?",
        "query": "SELECT T2.tag FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id ORDER BY T1.groupYear ASC LIMIT 1"
    },
    {
        "question": "List all invoices with a billing address in the USA.",
        "query": "SELECT * FROM Invoice WHERE BillingCountry = 'USA'"
    },
    {
        "question": "What are the names of all the rock music genres?",
        "query": "SELECT Name FROM Genre WHERE Name LIKE '%Rock%'"
    },
    {
        "question": "List all tracks that belong to the Rock genre.",
        "query": "SELECT t.Name FROM Track t JOIN Genre g ON t.GenreId = g.GenreId WHERE g.Name = 'Rock'"
    },
    {
        "question": "List the names of the top 10 longest tracks.",
        "query": "SELECT Name FROM Track ORDER BY Milliseconds DESC LIMIT 10"
    },
    {
        "question": "List all albums by 'Iron Maiden'.",
        "query": "SELECT Title FROM Album WHERE ArtistId = (SELECT ArtistId FROM Artist WHERE Name = 'Iron Maiden')"
    },
    {
        "question": "What are the names of all the playlists created by the customer with CustomerId 5?",
        "query": "SELECT Name FROM Playlist WHERE PlaylistId IN (SELECT PlaylistId FROM PlaylistTrack WHERE TrackId IN (SELECT TrackId FROM InvoiceLine WHERE InvoiceId IN (SELECT InvoiceId FROM Invoice WHERE CustomerId = 5)))"
    },
    {
        "question": "List the names and unit prices of all tracks in the 'Rock' genre.",
        "query": "SELECT T1.name, T1.unitprice FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Rock';"
    },
    {
        "question": "What is the city and country of the customer 'Ana Trujillo Emparedados y helados'?",
        "query": "SELECT City, Country FROM Customers WHERE CustomerName = 'Ana Trujillo Emparedados y helados';"
    },
    {
        "question": "List all orders placed by the customer 'Ernst Handel'.",
        "query": "SELECT * FROM Orders WHERE CustomerID = (SELECT CustomerID FROM Customers WHERE CustomerName = 'Ernst Handel');"
    },
    {
        "question": "What are the product names and unit prices of all products?",
        "query": "SELECT ProductName, UnitPrice FROM Products;"
    },
    {
        "question": "List all products supplied by the supplier 'Exotic Liquids'.",
        "query": "SELECT * FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Exotic Liquids');"
    },
    {
        "question": "What is the total quantity of 'Chai' ordered in order 10248?",
        "query": "SELECT Quantity FROM OrderDetails WHERE OrderID = 10248 AND ProductID = (SELECT ProductID FROM Products WHERE ProductName = 'Chai');"
    },
    {
        "question": "What is the total amount spent on 'Chang' in order 10248?",
        "query": "SELECT Quantity * UnitPrice FROM OrderDetails WHERE OrderID = 10248 AND ProductID = (SELECT ProductID FROM Products WHERE ProductName = 'Chang');"
    },
    {
        "question": "List all customers who have placed orders in 1996.",
        "query": "SELECT T2.CustomerName FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T1.OrderDate) = '1996';"
    },
    {
        "question": "List all products that have been ordered by 'Alfreds Futterkiste'.",
        "query": "SELECT T2.ProductName FROM OrderDetails AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.OrderID IN (SELECT OrderID FROM Orders WHERE CustomerID = (SELECT CustomerID FROM Customers WHERE CustomerName = 'Alfreds Futterkiste'));"
    },
    {
        "question": "What is the average unit price of products supplied by 'Pavlova, Ltd.'?",
        "query": "SELECT AVG(UnitPrice) FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Pavlova, Ltd.');"
    },
    {
        "question": "List all customers and their corresponding order IDs.",
        "query": "SELECT T2.CustomerName, T1.OrderID FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID;"
    },
    {
        "question": "List the names of all tracks that belong to the 'Metal' genre and cost more than $0.99.",
        "query": "SELECT name FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Metal') AND unitprice > 0.99;"
    },
    {
        "question": "What is the name of the customer who has placed the most orders?",
        "query": "SELECT firstname, lastname FROM customers WHERE customerid = (SELECT customerid FROM invoices GROUP BY customerid ORDER BY COUNT(*) DESC LIMIT 1);"
    },
    {
        "question": "What are the names of the artists and their albums?",
        "query": "SELECT artists.name, albums.title FROM albums INNER JOIN artists ON albums.artistid = artists.artistid;"
    },
    {
        "question": "List the names of all customers and their support representatives.",
        "query": "SELECT T1.FirstName, T1.LastName, T2.FirstName, T2.LastName FROM customers AS T1 INNER JOIN employees AS T2 ON T1.SupportRepId = T2.EmployeeId;"
    },
    {
        "question": "What is the name of the shortest track composed by 'Paul McCartney'?",
        "query": "SELECT name FROM tracks WHERE composer = 'Paul McCartney' ORDER BY milliseconds ASC LIMIT 1;"
    },
    {
        "question": "What are the names of all albums released by the artist 'Pink Floyd'?",
        "query": "SELECT title FROM albums WHERE artist_id = (SELECT artist_id FROM artists WHERE name = 'Pink Floyd')"
    },
    {
        "question": "List the names of all artists who have released albums in the 'Rock' genre.",
        "query": "SELECT T2.name FROM albums AS T1 INNER JOIN artists AS T2 ON T1.artist_id = T2.artist_id WHERE T1.genre = 'Rock'"
    },
    {
        "question": "What is the average length of songs in the album 'The Dark Side of the Moon'?",
        "query": "SELECT AVG(length) FROM tracks WHERE album_id = (SELECT album_id FROM albums WHERE title = 'The Dark Side of the Moon')"
    },
    {
        "question": "Find the names of all tracks that are longer than 5 minutes.",
        "query": "SELECT name FROM tracks WHERE length > 300"
    },
    {
        "question": "What is the total length of all tracks in the 'Alternative' genre?",
        "query": "SELECT SUM(length) FROM tracks WHERE album_id IN (SELECT album_id FROM albums WHERE genre = 'Alternative')"
    },
    {
        "question": "Find the name of the shortest track on the album 'Wish You Were Here'.",
        "query": "SELECT name FROM tracks WHERE album_id = (SELECT album_id FROM albums WHERE title = 'Wish You Were Here') ORDER BY length ASC LIMIT 1"
    },
    {
        "question": "List the titles of all albums released in the year 1973.",
        "query": "SELECT title FROM albums WHERE strftime('%Y', release_date) = '1973'"
    },
    {
        "question": "Which artist has the longest average track length?",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN albums AS T3 ON T1.album_id = T3.album_id INNER JOIN artists AS T2 ON T3.artist_id = T2.artist_id GROUP BY T2.name ORDER BY AVG(T1.length) DESC LIMIT 1"
    },
    {
        "question": "List the names of tracks that have the same name as their album.",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T1.name = T2.title;"
    },
    {
        "question": "What is the name and genre of the track with the shortest milliseconds?",
        "query": "SELECT T1.name, T2.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid ORDER BY milliseconds ASC LIMIT 1;"
    },
    {
        "question": "What is the average price of tracks in the 'Metal' genre?",
        "query": "SELECT AVG(T2.unit_price) FROM genres AS T1 INNER JOIN tracks AS T2 ON T1.genre_id = T2.genre_id WHERE T1.name = 'Metal';"
    },
    {
        "question": "What is the total cost of all tracks in the 'Grunge' playlist?",
        "query": "SELECT SUM(tracks.unitprice) FROM tracks INNER JOIN playlist_tracks ON tracks.id = playlist_tracks.track_id INNER JOIN playlists ON playlist_tracks.playlist_id = playlists.id WHERE playlists.name = 'Grunge';"
    },
    {
        "question": "List the tracks purchased by the customer 'Helena Hol\u00fd'.",
        "query": "SELECT tracks.name FROM tracks INNER JOIN invoice_items ON tracks.id = invoice_items.trackid INNER JOIN invoices ON invoice_items.invoiceid = invoices.id INNER JOIN customers ON invoices.customerid = customers.id WHERE customers.firstname = 'Helena' AND customers.lastname = 'Hol\u00fd';"
    },
    {
        "question": "What are the names of the artists and the number of tracks they have in the database?",
        "query": "SELECT artists.name, COUNT(tracks.id) FROM artists INNER JOIN albums ON artists.id = albums.artistid INNER JOIN tracks ON albums.id = tracks.albumid GROUP BY artists.name;"
    },
    {
        "question": "What is the name and email of the customer who has spent the most money?",
        "query": "SELECT FirstName, LastName, Email FROM Customer WHERE CustomerId = (SELECT CustomerId FROM Invoice ORDER BY Total DESC LIMIT 1);"
    },
    {
        "question": "Which sales support agent has assisted the most customers?",
        "query": "SELECT FirstName, LastName FROM Employee WHERE EmployeeId = (SELECT SupportRepId FROM Customer GROUP BY SupportRepId ORDER BY COUNT(*) DESC LIMIT 1);"
    },
    {
        "question": "What are the top 5 most popular genres based on the number of tracks?",
        "query": "SELECT Name FROM Genre WHERE GenreId IN (SELECT GenreId FROM Track GROUP BY GenreId ORDER BY COUNT(*) DESC LIMIT 5);"
    },
    {
        "question": "List the names of all customers who have purchased tracks from the 'Iron Maiden' artist.",
        "query": "SELECT T3.FirstName, T3.LastName FROM Artist AS T1 INNER JOIN Album AS T2 ON T1.ArtistId = T2.ArtistId INNER JOIN Track AS T4 ON T2.AlbumId = T4.AlbumId INNER JOIN InvoiceLine AS T5 ON T4.TrackId = T5.TrackId INNER JOIN Invoice AS T6 ON T5.InvoiceId = T6.InvoiceId INNER JOIN Customer AS T3 ON T6.CustomerId = T3.CustomerId WHERE T1.Name = 'Iron Maiden' GROUP BY T3.CustomerId;"
    },
    {
        "question": "What is the total revenue generated from invoices billed in 2010?",
        "query": "SELECT SUM(Total) FROM Invoice WHERE strftime('%Y', InvoiceDate) = '2010';"
    },
    {
        "question": "List the names of the artists whose albums have been purchased by the customer with customer_id 1.",
        "query": "SELECT T3.name FROM customers AS T1 INNER JOIN invoices AS T2 ON T1.customer_id = T2.customer_id INNER JOIN invoice_items AS T3 ON T2.invoice_id = T3.invoice_id INNER JOIN tracks AS T4 ON T3.track_id = T4.track_id INNER JOIN albums AS T5 ON T4.album_id = T5.album_id INNER JOIN artists AS T3 ON T5.artist_id = T3.artist_id WHERE T1.customer_id = 1 GROUP BY T3.name;"
    },
    {
        "question": "What are the names of the tracks in the album with album_id 1?",
        "query": "SELECT name FROM tracks WHERE album_id = 1;"
    },
    {
        "question": "List the albums by artists whose name starts with 'AC/DC'.",
        "query": "SELECT T2.title FROM artists AS T1 INNER JOIN albums AS T2 ON T1.artistid = T2.artistid WHERE T1.name LIKE 'AC/DC%';"
    },
    {
        "question": "List the tracks that are not included in any playlist.",
        "query": "SELECT name FROM tracks EXCEPT SELECT T3.name FROM playlist_track AS T1 INNER JOIN playlists AS T2 ON T1.playlistid = T2.playlistid INNER JOIN tracks AS T3 ON T1.trackid = T3.trackid;"
    },
    {
        "question": "List the names of customers and the countries they are from, ordered alphabetically by country.",
        "query": "SELECT first_name, last_name, country FROM customers ORDER BY country;"
    },
    {
        "question": "List the names of all tracks in the 'Alternative & Punk' genre, ordered by track length in descending order.",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Alternative & Punk' ORDER BY T1.milliseconds DESC;"
    },
    {
        "question": "What is the total cost of all tracks purchased by customer with CustomerId 1?",
        "query": "SELECT SUM(T1.unitprice) FROM tracks AS T1 INNER JOIN invoice_items AS T2 ON T1.trackid = T2.trackid INNER JOIN invoices AS T3 ON T2.invoiceid = T3.invoiceid WHERE T3.customerid = 1;"
    },
    {
        "question": "List the names of all playlists that include the track 'Now's The Time'.",
        "query": "SELECT T3.name FROM tracks AS T1 INNER JOIN playlist_track AS T2 ON T1.trackid = T2.trackid INNER JOIN playlists AS T3 ON T2.playlistid = T3.playlistid WHERE T1.name = 'Now\\'s The Time';"
    },
    {
        "question": "List the names of all customers who have purchased tracks in the 'Rock' genre.",
        "query": "SELECT T4.firstname, T4.lastname FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid INNER JOIN invoice_items AS T3 ON T1.trackid = T3.trackid INNER JOIN invoices AS T4 ON T3.invoiceid = T4.invoiceid WHERE T2.name = 'Rock';"
    },
    {
        "question": "Which customer has the most invoices?",
        "query": "SELECT CustomerId, COUNT(*) AS InvoiceCount FROM Invoice GROUP BY CustomerId ORDER BY InvoiceCount DESC LIMIT 1;"
    },
    {
        "question": "Who is the supervisor of the employee with EmployeeId 3?",
        "query": "SELECT T2.FirstName, T2.LastName FROM Employee AS T1 INNER JOIN Employee AS T2 ON T1.ReportsTo = T2.EmployeeId WHERE T1.EmployeeId = 3;"
    },
    {
        "question": "What is the name of the playlist with PlaylistId 1?",
        "query": "SELECT Name FROM Playlist WHERE PlaylistId = 1;"
    },
    {
        "question": "List the names of all the customers who made a purchase in 2009.",
        "query": "SELECT T2.FirstName, T2.LastName FROM Invoice AS T1 INNER JOIN Customer AS T2 ON T1.CustomerId = T2.CustomerId WHERE STRFTIME('%Y', T1.InvoiceDate) = '2009';"
    },
    {
        "question": "What is the total revenue generated by sales of tracks in the Rock genre?",
        "query": "SELECT SUM(T2.UnitPrice * T2.Quantity) FROM Track AS T1 INNER JOIN InvoiceLine AS T2 ON T1.TrackId = T2.TrackId WHERE T1.GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Rock');"
    },
    {
        "question": "What are the names of all playlists created by the user with user_id 1?",
        "query": "SELECT name FROM playlists WHERE user_id = 1"
    },
    {
        "question": "How many songs are there in the playlist with playlist_id 5?",
        "query": "SELECT COUNT(*) FROM playlist_songs WHERE playlist_id = 5"
    },
    {
        "question": "List the titles of all songs in the playlist 'My Favorites'.",
        "query": "SELECT T2.title FROM playlists AS T1 INNER JOIN playlist_songs AS T3 ON T1.playlist_id = T3.playlist_id INNER JOIN songs AS T2 ON T3.song_id = T2.song_id WHERE T1.name = 'My Favorites'"
    },
    {
        "question": "Find the user_id of the creator of the playlist that contains the song with song_id 10.",
        "query": "SELECT T1.user_id FROM playlists AS T1 INNER JOIN playlist_songs AS T2 ON T1.playlist_id = T2.playlist_id WHERE T2.song_id = 10"
    },
    {
        "question": "What is the average duration of songs in the playlist with playlist_id 2?",
        "query": "SELECT AVG(T2.duration) FROM playlist_songs AS T1 INNER JOIN songs AS T2 ON T1.song_id = T2.song_id WHERE T1.playlist_id = 2"
    },
    {
        "question": "List the names of all playlists that contain the song 'Bohemian Rhapsody'.",
        "query": "SELECT T1.name FROM playlists AS T1 INNER JOIN playlist_songs AS T3 ON T1.playlist_id = T3.playlist_id INNER JOIN songs AS T2 ON T3.song_id = T2.song_id WHERE T2.title = 'Bohemian Rhapsody'"
    },
    {
        "question": "How many playlists does the user with user_id 3 have?",
        "query": "SELECT COUNT(*) FROM playlists WHERE user_id = 3"
    },
    {
        "question": "What are the titles and durations of all songs in the database?",
        "query": "SELECT title, duration FROM songs"
    },
    {
        "question": "Find the playlist_id of the playlist that contains the most songs.",
        "query": "SELECT playlist_id FROM playlist_songs GROUP BY playlist_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "List the user_id and name of all users who have created playlists.",
        "query": "SELECT DISTINCT user_id, name FROM playlists"
    },
    {
        "question": "List the genres and the number of tracks in each genre, ordered by the number of tracks in descending order.",
        "query": "SELECT g.name, COUNT(t.trackid) FROM genres g LEFT JOIN tracks t ON g.genreid = t.genreid GROUP BY g.name ORDER BY COUNT(t.trackid) DESC;"
    },
    {
        "question": "What is the average length (in milliseconds) of tracks composed by 'AC/DC'?",
        "query": "SELECT AVG(milliseconds) FROM tracks WHERE composer = 'AC/DC';"
    },
    {
        "question": "Find the names of the albums that include tracks composed by 'U2'.",
        "query": "SELECT al.title FROM albums al JOIN tracks tr ON al.albumid = tr.albumid WHERE tr.composer = 'U2';"
    },
    {
        "question": "List the names of the artists and the number of albums they have, ordered by the number of albums in descending order.",
        "query": "SELECT ar.name, COUNT(al.albumid) FROM artists ar LEFT JOIN albums al ON ar.artistid = al.artistid GROUP BY ar.name ORDER BY COUNT(al.albumid) DESC;"
    },
    {
        "question": "List the names of the customers who have made purchases in the 'Rock' genre.",
        "query": "SELECT c.FirstName, c.LastName FROM customers c JOIN invoices i ON c.CustomerId = i.CustomerId JOIN invoicelines il ON i.InvoiceId = il.InvoiceId JOIN tracks t ON il.TrackId = t.TrackId JOIN genres g ON t.GenreId = g.GenreId WHERE g.name = 'Rock';"
    },
    {
        "question": "List the names of customers who have purchased tracks in the 'Jazz' genre.",
        "query": "SELECT T3.first_name, T3.last_name FROM invoice_items AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id INNER JOIN customers AS T3 ON T1.customer_id = T3.customer_id INNER JOIN genres AS T4 ON T2.genre_id = T4.genre_id WHERE T4.name = 'Jazz' GROUP BY T3.customer_id;"
    },
    {
        "question": "List the names of all tracks that are not composed by anyone.",
        "query": "SELECT name FROM tracks WHERE composer IS NULL;"
    },
    {
        "question": "List the names of all artists and their corresponding albums.",
        "query": "SELECT artists.name, albums.title FROM albums INNER JOIN artists ON albums.artist_id = artists.artist_id;"
    },
    {
        "question": "How many customers are there in the USA?",
        "query": "SELECT COUNT(*) FROM customers WHERE country = 'USA';"
    },
    {
        "question": "What is the name of the customer who has spent the most money on tracks?",
        "query": "SELECT T2.first_name, T2.last_name FROM invoice_items AS T1 INNER JOIN invoices AS T3 ON T1.invoice_id = T3.invoice_id INNER JOIN customers AS T2 ON T3.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY SUM(T1.unit_price * T1.quantity) DESC LIMIT 1;"
    },
    {
        "question": "Which playlist has the greatest number of tracks?",
        "query": "SELECT name FROM playlists WHERE playlist_id = (SELECT playlist_id FROM playlist_tracks GROUP BY playlist_id ORDER BY COUNT(*) DESC LIMIT 1);"
    },
    {
        "question": "What are the names of the tracks in the playlist '90\u2019s Music'?",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id WHERE T1.playlist_id = (SELECT playlist_id FROM playlists WHERE name = '90\u2019s Music');"
    },
    {
        "question": "List the titles of albums that have tracks longer than 5 minutes.",
        "query": "SELECT title FROM albums WHERE albumid IN (SELECT albumid FROM tracks WHERE milliseconds > 300000);"
    },
    {
        "question": "What is the average salary of employees in each department?",
        "query": "SELECT department, AVG(salary) FROM employees GROUP BY department;"
    },
    {
        "question": "List the names of employees who earn more than the average salary in their department.",
        "query": "SELECT name FROM employees WHERE salary > (SELECT AVG(salary) FROM employees AS e2 WHERE e2.department = employees.department);"
    },
    {
        "question": "Find the highest salary in each department.",
        "query": "SELECT department, MAX(salary) FROM employees GROUP BY department;"
    },
    {
        "question": "List the names of employees who have the highest salary in their department.",
        "query": "SELECT name FROM employees WHERE salary = (SELECT MAX(salary) FROM employees AS e2 WHERE e2.department = employees.department);"
    },
    {
        "question": "Find the total salary expense for each department.",
        "query": "SELECT department, SUM(salary) FROM employees GROUP BY department;"
    },
    {
        "question": "Find the names of employees who were hired in the year 2022.",
        "query": "SELECT name FROM employees WHERE strftime('%Y', hire_date) = '2022';"
    },
    {
        "question": "List the names and hire dates of employees in ascending order of their hire dates.",
        "query": "SELECT name, hire_date FROM employees ORDER BY hire_date ASC;"
    },
    {
        "question": "Find the names of employees whose names start with the letter 'J'.",
        "query": "SELECT name FROM employees WHERE name LIKE 'J%';"
    },
    {
        "question": "List the names and salaries of employees whose salaries are between $50,000 and $100,000.",
        "query": "SELECT name, salary FROM employees WHERE salary BETWEEN 50000 AND 100000;"
    },
    {
        "question": "Find the names of employees who are in the 'Sales' or 'Marketing' departments.",
        "query": "SELECT name FROM employees WHERE department IN ('Sales', 'Marketing');"
    },
    {
        "question": "List the names and salaries of employees whose salaries are not $75,000.",
        "query": "SELECT name, salary FROM employees WHERE salary != 75000;"
    },
    {
        "question": "How many invoices were issued in 2009?",
        "query": "SELECT COUNT(*) FROM invoices WHERE strftime('%Y', invoicedate) = '2009';"
    },
    {
        "question": "What is the total amount spent by the customer with the email address 'luisrojas@yahoo.cl'?",
        "query": "SELECT SUM(total) FROM invoices WHERE customerid = (SELECT customerid FROM customers WHERE email = 'luisrojas@yahoo.cl');"
    },
    {
        "question": "Which media type has the highest average unit price?",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN media_types AS T2 ON T1.mediatypeid = T2.mediatypeid GROUP BY T1.mediatypeid ORDER BY AVG(T1.unitprice) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all customers who have purchased tracks from the album 'Big Ones'.",
        "query": "SELECT T4.firstname, T4.lastname FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid INNER JOIN invoice_items AS T3 ON T2.trackid = T3.trackid INNER JOIN invoices as T4 ON T3.invoiceid = T4.invoiceid WHERE T1.title = 'Big Ones' GROUP BY T4.customerid;"
    },
    {
        "question": "List the names of all tracks in the 'Jazz' genre, along with their composers and album titles.",
        "query": "SELECT t.name, t.composer, al.title FROM tracks t JOIN albums al ON t.albumid = al.albumid WHERE t.genreid = (SELECT genreid FROM genres WHERE name = 'Jazz');"
    },
    {
        "question": "Find the artists whose names start with 'A'.",
        "query": "SELECT name FROM artists WHERE name LIKE 'A%';"
    },
    {
        "question": "What is the average unit price of tracks composed by 'U2'?",
        "query": "SELECT AVG(unitprice) FROM tracks WHERE composer = 'U2';"
    },
    {
        "question": "List the names of all customers who have purchased tracks from the artist 'AC/DC'.",
        "query": "SELECT T3.firstname, T3.lastname FROM artists AS T1 INNER JOIN albums AS T2 ON T1.artistid = T2.artistid INNER JOIN tracks AS T4 ON T2.albumid = T4.albumid INNER JOIN invoicelines as T5 ON T4.trackid = T5.trackid INNER JOIN customers AS T3 ON T5.customerid = T3.customerid WHERE T1.name = 'AC/DC';"
    },
    {
        "question": "What is the total number of tracks sold by each artist?",
        "query": "SELECT T3.name, SUM(T1.quantity) FROM invoice_items AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid INNER JOIN albums AS T3 ON T2.albumid = T3.albumid GROUP BY T3.name;"
    },
    {
        "question": "List the tracks that are part of a playlist named 'Music'.",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid INNER JOIN playlists AS T3 ON T1.playlistid = T3.playlistid WHERE T3.name = 'Music';"
    },
    {
        "question": "What are the names of the playlists that include tracks from the album 'Let There Be Rock'?",
        "query": "SELECT T4.name FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid INNER JOIN playlist_tracks as T3 ON T2.trackid = T3.trackid INNER JOIN playlists AS T4 ON T3.playlistid = T4.playlistid WHERE T1.title = 'Let There Be Rock';"
    },
    {
        "question": "How many tracks are there in the album 'Big Balls'?",
        "query": "SELECT COUNT(*) FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'Big Balls');"
    },
    {
        "question": "What is the average unit price of the tracks in the album 'Jagged Little Pill'?",
        "query": "SELECT AVG(unitprice) FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'Jagged Little Pill');"
    },
    {
        "question": "What are the names and unit prices of all tracks composed by Angus Young?",
        "query": "SELECT name, unitprice FROM tracks WHERE composer = 'Angus Young';"
    },
    {
        "question": "List the names of all the tracks in the playlist 'Brazilian Music'.",
        "query": "SELECT T2.name FROM playlists AS T1 INNER JOIN playlist_tracks AS T3 ON T1.playlist_id = T3.playlist_id INNER JOIN tracks AS T2 ON T3.track_id = T2.track_id WHERE T1.name = 'Brazilian Music';"
    },
    {
        "question": "List all tracks and their corresponding genres.",
        "query": "SELECT t.Name AS TrackName, g.Name AS GenreName FROM Track AS t JOIN Genre AS g ON t.GenreId = g.GenreId;"
    },
    {
        "question": "List all rock music tracks.",
        "query": "SELECT t.Name FROM Track AS t JOIN Genre AS g ON t.GenreId = g.GenreId WHERE g.Name = 'Rock';"
    },
    {
        "question": "What are the names of the artists whose tracks are included in the playlist 'Music'?",
        "query": "SELECT ar.Name FROM Artist AS ar JOIN Album AS al ON ar.ArtistId = al.ArtistId JOIN Track AS t ON al.AlbumId = t.AlbumId JOIN PlaylistTrack AS pt ON t.TrackId = pt.TrackId JOIN Playlist AS p ON pt.PlaylistId = p.PlaylistId WHERE p.Name = 'Music';"
    },
    {
        "question": "How many tracks are in the playlist '90\u2019s Music'?",
        "query": "SELECT COUNT(*) FROM PlaylistTrack WHERE PlaylistId = (SELECT PlaylistId FROM Playlist WHERE Name = '90\u2019s Music');"
    },
    {
        "question": "What is the total price of all tracks sold?",
        "query": "SELECT SUM(UnitPrice * Quantity) FROM InvoiceLine;"
    },
    {
        "question": "List all invoices and the corresponding customer's full name and country.",
        "query": "SELECT i.*, c.FirstName, c.LastName, c.Country FROM Invoice AS i JOIN Customer AS c ON i.CustomerId = c.CustomerId;"
    },
    {
        "question": "What is the total revenue generated by the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT SUM(il.UnitPrice * il.Quantity) FROM InvoiceLine il JOIN Track t ON il.TrackId = t.TrackId JOIN Album al ON t.AlbumId = al.AlbumId WHERE al.Title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "List the names of all the artists whose albums have been purchased by the customer with CustomerId 10.",
        "query": "SELECT DISTINCT ar.Name FROM Artist ar JOIN Album al ON ar.ArtistId = al.ArtistId JOIN Track t ON al.AlbumId = t.AlbumId JOIN InvoiceLine il ON t.TrackId = il.TrackId JOIN Invoice i ON il.InvoiceId = i.InvoiceId WHERE i.CustomerId = 10;"
    },
    {
        "question": "Which genre is the most popular among customers (based on the number of tracks purchased)?",
        "query": "SELECT g.Name FROM Genre g JOIN Track t ON g.GenreId = t.GenreId JOIN InvoiceLine il ON t.TrackId = il.TrackId GROUP BY g.Name ORDER BY SUM(il.Quantity) DESC LIMIT 1;"
    },
    {
        "question": "Which album has the shortest track, and what is the name of that track?",
        "query": "SELECT al.title, t.name FROM tracks AS t INNER JOIN albums AS al ON t.albumid = al.albumid ORDER BY milliseconds ASC LIMIT 1;"
    },
    {
        "question": "What are the names of the genres that have tracks costing more than $0.99?",
        "query": "SELECT g.name FROM genres AS g INNER JOIN tracks AS t ON g.genreid = t.genreid WHERE t.unitprice > 0.99;"
    },
    {
        "question": "Which album has the largest total size (in bytes) of its tracks?",
        "query": "SELECT title FROM albums WHERE albumid = (SELECT albumid FROM tracks GROUP BY albumid ORDER BY SUM(bytes) DESC LIMIT 1);"
    },
    {
        "question": "What is the average unit price of tracks in the 'Pop' genre?",
        "query": "SELECT AVG(unit_price) FROM tracks WHERE genre_id = (SELECT genre_id FROM genres WHERE name = 'Pop');"
    },
    {
        "question": "What is the name and composer of the track with ID 10?",
        "query": "SELECT name, composer FROM tracks WHERE trackid = 10;"
    },
    {
        "question": "How many tracks are there in the genre 'Metal'?",
        "query": "SELECT COUNT(*) FROM tracks WHERE genreid IN (SELECT genreid FROM genres WHERE name = 'Metal');"
    },
    {
        "question": "What is the average unit price of tracks in the genre 'Rock'?",
        "query": "SELECT AVG(unitprice) FROM tracks WHERE genreid IN (SELECT genreid FROM genres WHERE name = 'Rock');"
    },
    {
        "question": "What are the names of the albums released by 'AC/DC'?",
        "query": "SELECT title FROM albums WHERE artistid IN (SELECT artistid FROM artists WHERE name = 'AC/DC');"
    },
    {
        "question": "Find the names and salaries of all employees who earn more than $60,000.",
        "query": "SELECT name, salary FROM employees WHERE salary > 60000;"
    },
    {
        "question": "Find the names of employees who were hired after 2022-01-01.",
        "query": "SELECT name FROM employees WHERE hire_date > '2022-01-01';"
    },
    {
        "question": "List the employees in each department, sorted by salary in descending order.",
        "query": "SELECT * FROM employees ORDER BY department, salary DESC;"
    },
    {
        "question": "List the names of all albums and their artists.",
        "query": "SELECT T1.title, T2.name FROM albums AS T1 INNER JOIN artists AS T2 ON T1.artistid = T2.artistid;"
    },
    {
        "question": "What is the average unit price of albums in the 'Pop' genre?",
        "query": "SELECT AVG(unitprice) FROM albums WHERE artistid IN (SELECT artistid FROM artists WHERE name IN (SELECT name FROM artists WHERE artistid IN (SELECT artistid FROM albums WHERE albumid IN (SELECT albumid FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Pop')))));"
    },
    {
        "question": "List the names of all invoices and the customer who made the purchase.",
        "query": "SELECT T2.InvoiceId, T1.FirstName, T1.LastName FROM customers AS T1 INNER JOIN invoices AS T2 ON T1.CustomerId = T2.CustomerId;"
    },
    {
        "question": "What is the total value of all invoices?",
        "query": "SELECT SUM(total) FROM invoices;"
    },
    {
        "question": "List the names of all media types and the number of tracks associated with each type.",
        "query": "SELECT T1.name, COUNT(T2.trackid) FROM media_types AS T1 INNER JOIN tracks AS T2 ON T1.mediatypeid = T2.mediatypeid GROUP BY T1.name;"
    },
    {
        "question": "What is the name of the media type with the most tracks?",
        "query": "SELECT T1.name FROM media_types AS T1 INNER JOIN tracks AS T2 ON T1.mediatypeid = T2.mediatypeid GROUP BY T1.name ORDER BY COUNT(T2.trackid) DESC LIMIT 1;"
    },
    {
        "question": "Find the name and release year of all albums by the artist 'Iron Maiden'.",
        "query": "SELECT album_name, release_year FROM albums WHERE artist_id = (SELECT artist_id FROM artists WHERE artist_name = 'Iron Maiden')"
    },
    {
        "question": "List all songs from the album 'The Number of the Beast'.",
        "query": "SELECT song_name FROM songs WHERE album_id = (SELECT album_id FROM albums WHERE album_name = 'The Number of the Beast')"
    },
    {
        "question": "What is the average duration of songs on the album 'Powerslave'?",
        "query": "SELECT AVG(duration) FROM songs WHERE album_id = (SELECT album_id FROM albums WHERE album_name = 'Powerslave')"
    },
    {
        "question": "Find the artist with the longest song.",
        "query": "SELECT artist_name FROM artists WHERE artist_id = (SELECT artist_id FROM albums WHERE album_id = (SELECT album_id FROM songs ORDER BY duration DESC LIMIT 1))"
    },
    {
        "question": "List the names of all albums released in 1984.",
        "query": "SELECT album_name FROM albums WHERE release_year = 1984"
    },
    {
        "question": "How many albums were released between 1980 and 1989?",
        "query": "SELECT COUNT(*) FROM albums WHERE release_year BETWEEN 1980 AND 1989"
    },
    {
        "question": "Find the album with the shortest average song duration.",
        "query": "SELECT album_name FROM albums WHERE album_id = (SELECT album_id FROM songs GROUP BY album_id ORDER BY AVG(duration) ASC LIMIT 1)"
    },
    {
        "question": "List all songs that are longer than 5 minutes.",
        "query": "SELECT song_name FROM songs WHERE duration > 300"
    },
    {
        "question": "Find the names of all artists who have released albums in multiple years.",
        "query": "SELECT artist_name FROM artists WHERE artist_id IN (SELECT artist_id FROM albums GROUP BY artist_id HAVING COUNT(DISTINCT release_year) > 1)"
    },
    {
        "question": "List the album name and release year of the album with the largest number of songs.",
        "query": "SELECT album_name, release_year FROM albums WHERE album_id = (SELECT album_id FROM songs GROUP BY album_id ORDER BY COUNT(*) DESC LIMIT 1)"
    },
    {
        "question": "What is the total amount spent by the customer with the email 'luisrojas@yahoo.cl'?",
        "query": "SELECT SUM(total) FROM invoices WHERE customer_id = (SELECT customer_id FROM customers WHERE email = 'luisrojas@yahoo.cl');"
    },
    {
        "question": "What is the total duration of the playlist 'Music'?",
        "query": "SELECT SUM(T3.milliseconds) FROM playlists AS T1 INNER JOIN playlist_tracks AS T2 ON T1.playlist_id = T2.playlist_id INNER JOIN tracks AS T3 ON T2.track_id = T3.track_id WHERE T1.name = 'Music';"
    },
    {
        "question": "How many employees report to the 'Sales Support Agent'?",
        "query": "SELECT COUNT(*) FROM employees WHERE reports_to = (SELECT employee_id FROM employees WHERE title = 'Sales Support Agent');"
    },
    {
        "question": "List the names of all tracks purchased by the customer with CustomerId 5.",
        "query": "SELECT T4.Name FROM Customer AS T1 INNER JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId INNER JOIN InvoiceLine AS T3 ON T2.InvoiceId = T3.InvoiceId INNER JOIN Track AS T4 ON T3.TrackId = T4.TrackId WHERE T1.CustomerId = 5;"
    },
    {
        "question": "Which genre is the most popular (has the most tracks)?",
        "query": "SELECT T2.Name FROM Track AS T1 INNER JOIN Genre AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.Name ORDER BY COUNT(T1.TrackId) DESC LIMIT 1;"
    },
    {
        "question": "What is the total number of tracks sold for the artist 'AC/DC'?",
        "query": "SELECT SUM(T1.quantity) FROM invoice_items AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid INNER JOIN albums AS T3 ON T2.albumid = T3.albumid INNER JOIN artists AS T4 ON T3.artistid = T4.artistid WHERE T4.name = 'AC/DC';"
    },
    {
        "question": "List the names of customers who have purchased tracks from the 'Metal' genre.",
        "query": "SELECT T4.firstname, T4.lastname FROM invoice_items AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid INNER JOIN invoices AS T3 ON T1.invoiceid = T3.invoiceid INNER JOIN customers AS T4 ON T3.customerid = T4.customerid WHERE T2.genreid = (SELECT genreid FROM genres WHERE name = 'Metal');"
    },
    {
        "question": "What is the name of the most expensive track composed by 'Angus Young'?",
        "query": "SELECT name FROM tracks WHERE composer = 'Angus Young' ORDER BY unitprice DESC LIMIT 1;"
    },
    {
        "question": "List the names of all playlists that contain the track 'Highway to Hell'.",
        "query": "SELECT T2.name FROM playlist_track AS T1 INNER JOIN playlists AS T2 ON T1.playlistid = T2.playlistid WHERE T1.trackid = (SELECT trackid FROM tracks WHERE name = 'Highway to Hell');"
    },
    {
        "question": "What is the total number of tracks purchased by the customer with the email 'luisrojas@yahoo.cl'?",
        "query": "SELECT SUM(quantity) FROM invoice_items WHERE invoiceid IN (SELECT invoiceid FROM invoices WHERE customerid = (SELECT customerid FROM customers WHERE email = 'luisrojas@yahoo.cl'));"
    },
    {
        "question": "List the names of all customers who have purchased the track 'Dazed and Confused'.",
        "query": "SELECT T3.firstname, T3.lastname FROM tracks AS T1 INNER JOIN invoice_items AS T2 ON T1.trackid = T2.trackid INNER JOIN invoices AS T4 ON T2.invoiceid = T4.invoiceid INNER JOIN customers AS T3 ON T4.customerid = T3.customerid WHERE T1.name = 'Dazed and Confused';"
    },
    {
        "question": "What is the name of the most expensive track purchased by the customer with the id 1?",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN invoice_items AS T2 ON T1.trackid = T2.trackid INNER JOIN invoices AS T3 ON T2.invoiceid = T3.invoiceid WHERE T3.customerid = 1 ORDER BY T1.unitprice DESC LIMIT 1;"
    },
    {
        "question": "Find the name of the album with the longest total duration of tracks.",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.album_id = T2.album_id GROUP BY T1.album_id ORDER BY SUM(T1.milliseconds) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all playlists that contain tracks by 'AC/DC'.",
        "query": "SELECT T3.name FROM artists AS T1 INNER JOIN albums AS T2 ON T1.artist_id = T2.artist_id INNER JOIN tracks AS T3 ON T2.album_id = T3.album_id INNER JOIN playlist_tracks as T4 ON T3.track_id = T4.track_id INNER JOIN playlists AS T5 ON T4.playlist_id = T5.playlist_id WHERE T1.Name = 'AC/DC' GROUP BY T5.name;"
    },
    {
        "question": "What is the average length of a track in the 'Rock' playlist?",
        "query": "SELECT AVG(T2.milliseconds) FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id WHERE T1.playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Rock');"
    },
    {
        "question": "What is the total cost of all the tracks in the database if they cost $0.99 each?",
        "query": "SELECT COUNT(*) * 0.99 FROM tracks;"
    },
    {
        "question": "Find the names of all customers who live in the same city as the customer named 'Leonie K\u00f6hler'.",
        "query": "SELECT name FROM customers WHERE city = (SELECT city FROM customers WHERE name = 'Leonie K\u00f6hler');"
    },
    {
        "question": "List the titles of all tracks in the 'Brazilian Music' playlist, along with their composers.",
        "query": "SELECT T3.name, T3.composer FROM playlists AS T1 INNER JOIN playlist_tracks AS T2 ON T1.playlist_id = T2.playlist_id INNER JOIN tracks AS T3 ON T2.track_id = T3.track_id WHERE T1.name = 'Brazilian Music';"
    },
    {
        "question": "What is the name of the artist who has the most tracks in the 'Classical' playlist?",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN tracks AS T3 ON T1.track_id = T3.track_id INNER JOIN albums AS T4 ON T3.album_id = T4.album_id INNER JOIN artists AS T2 ON T4.artist_id = T2.artist_id WHERE T1.playlist_id = ( SELECT playlist_id FROM playlists WHERE name = 'Classical') GROUP BY T2.name ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all customers who have made an invoice with a total greater than $5.",
        "query": "SELECT T2.name FROM invoices AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.total > 5;"
    },
    {
        "question": "How many tracks are in the album 'Let There Be Rock'?",
        "query": "SELECT COUNT(*) FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'Let There Be Rock');"
    },
    {
        "question": "List the department names and the names of their managers.",
        "query": "SELECT d.name, e.name FROM Departments AS d INNER JOIN Employees AS e ON d.manager_id = e.emp_id;"
    },
    {
        "question": "Which department does the employee with emp_id 123 work in?",
        "query": "SELECT d.name FROM Departments AS d INNER JOIN Employees AS e ON d.dept_id = e.dept_id WHERE e.emp_id = 123;"
    },
    {
        "question": "Find the names of all employees who were born after 1980-01-01.",
        "query": "SELECT name FROM Employees WHERE birth_date > '1980-01-01';"
    },
    {
        "question": "List the names and salaries of all employees earning more than $50,000.",
        "query": "SELECT name, salary FROM Employees WHERE salary > 50000;"
    },
    {
        "question": "Find the name of the manager of the 'Research' department.",
        "query": "SELECT e.name FROM Employees AS e INNER JOIN Departments AS d ON e.emp_id = d.manager_id WHERE d.name = 'Research';"
    },
    {
        "question": "Find the names of all employees who have 'Smith' in their name.",
        "query": "SELECT name FROM Employees WHERE name LIKE '%Smith%';"
    },
    {
        "question": "List the departments with no assigned manager.",
        "query": "SELECT name FROM Departments WHERE manager_id IS NULL;"
    },
    {
        "question": "List the names of all playlists that contain the track 'Paranoid'.",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN playlists AS T2 ON T1.playlist_id = T2.playlist_id WHERE T1.track_id = (SELECT track_id FROM tracks WHERE name = 'Paranoid');"
    },
    {
        "question": "List the names of all employees and their respective supervisors.",
        "query": "SELECT T1.first_name, T1.last_name, T2.first_name, T2.last_name FROM employees AS T1 LEFT JOIN employees AS T2 ON T1.reports_to = T2.employee_id;"
    },
    {
        "question": "List the names of all customers who have purchased tracks in the 'Jazz' genre.",
        "query": "SELECT T3.first_name, T3.last_name FROM invoice_items AS T1 INNER JOIN invoices AS T2 ON T1.invoice_id = T2.invoice_id INNER JOIN customers AS T3 ON T2.customer_id = T3.customer_id WHERE T1.track_id IN (SELECT track_id FROM tracks WHERE genre_id = (SELECT genre_id FROM genres WHERE name = 'Jazz'));"
    },
    {
        "question": "What is the total number of tracks in the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT COUNT(*) FROM tracks WHERE album_id = (SELECT album_id FROM albums WHERE title = 'For Those About To Rock We Salute You');"
    },
    {
        "question": "List the names of all customers who have made purchases in the 'USA'.",
        "query": "SELECT first_name, last_name FROM customers WHERE country = 'USA';"
    },
    {
        "question": "Find the customer who has placed the most expensive order.",
        "query": "SELECT c.name FROM customers c INNER JOIN orders o ON c.id = o.customer_id ORDER BY o.total_amount DESC LIMIT 1"
    },
    {
        "question": "Find the total amount spent by each customer.",
        "query": "SELECT c.name, SUM(o.total_amount) FROM customers c INNER JOIN orders o ON c.id = o.customer_id GROUP BY c.name"
    },
    {
        "question": "List the order IDs and total amounts for orders placed in 2023.",
        "query": "SELECT id, total_amount FROM orders WHERE order_date IN (SELECT order_date FROM orders WHERE strftime('%Y', order_date) = '2023')"
    },
    {
        "question": "Find the names of customers who have placed orders with a total amount greater than $100.",
        "query": "SELECT c.name FROM customers c INNER JOIN orders o ON c.id = o.customer_id WHERE o.total_amount > 100"
    },
    {
        "question": "Which customer has spent the most money on music purchases?",
        "query": "SELECT T2.firstname, T2.lastname FROM invoices AS T1 INNER JOIN customers AS T2 ON T1.customerid = T2.customerid GROUP BY T1.customerid ORDER BY SUM(T1.total) DESC LIMIT 1;"
    },
    {
        "question": "What is the total cost of all tracks combined?",
        "query": "SELECT SUM(unitprice * bytes/1000000) FROM tracks;"
    },
    {
        "question": "What is the name of the shortest rock track?",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Rock' ORDER BY T1.milliseconds ASC LIMIT 1;"
    },
    {
        "question": "How many tracks are from albums released after the year 2000?",
        "query": "SELECT COUNT(*) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE STRFTIME('%Y', T2.titledate) > '2000';"
    },
    {
        "question": "What are the names of all the playlists and the tracks they contain?",
        "query": "SELECT T2.name, T3.name FROM playlist_tracks AS T1 INNER JOIN playlists AS T2 ON T1.playlistid = T2.playlistid INNER JOIN tracks AS T3 ON T1.trackid = T3.trackid;"
    },
    {
        "question": "List all the customers who live in the USA and have spent more than $50 in total.",
        "query": "SELECT FirstName, LastName FROM Customer WHERE Country = 'USA' AND CustomerId IN (SELECT CustomerId FROM Invoice GROUP BY CustomerId HAVING SUM(Total) > 50);"
    },
    {
        "question": "List the names of all the albums and the artists who created them.",
        "query": "SELECT al.Title, ar.Name FROM Album AS al INNER JOIN Artist AS ar ON al.ArtistId = ar.ArtistId;"
    },
    {
        "question": "List the names of all employees in the 'Sales' department.",
        "query": "SELECT name FROM employees WHERE department = 'Sales';"
    },
    {
        "question": "Find the names of all departments with more than 5 employees.",
        "query": "SELECT department FROM employees GROUP BY department HAVING COUNT(*) > 5;"
    },
    {
        "question": "What is the total salary expenditure for the 'IT' department?",
        "query": "SELECT SUM(salary) FROM employees WHERE department = 'IT';"
    },
    {
        "question": "Find the name and hire date of the most recently hired employee.",
        "query": "SELECT name, hire_date FROM employees ORDER BY hire_date DESC LIMIT 1;"
    },
    {
        "question": "List the names of all employees and their respective department names.",
        "query": "SELECT employees.name, departments.name FROM employees INNER JOIN departments ON employees.department = departments.id;"
    },
    {
        "question": "What is the name of the department with the highest average salary?",
        "query": "SELECT departments.name FROM employees INNER JOIN departments ON employees.department = departments.id GROUP BY departments.name ORDER BY AVG(salary) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all employees who work in the same department as 'John Doe'.",
        "query": "SELECT name FROM employees WHERE department = (SELECT department FROM employees WHERE name = 'John Doe');"
    },
    {
        "question": "List the names of departments and the number of employees in each, ordered by the number of employees in descending order.",
        "query": "SELECT department, COUNT(*) AS employee_count FROM employees GROUP BY department ORDER BY employee_count DESC;"
    },
    {
        "question": "Show the SQL creation statement for the index named 'sqlite_autoindex_sqlite_master_1'.",
        "query": "SELECT sql FROM sqlite_master WHERE type='index' AND name='sqlite_autoindex_sqlite_master_1';"
    },
    {
        "question": "What are the names of the tables that have a column named 'sql'?",
        "query": "SELECT name FROM PRAGMA_table_info('sqlite_master') WHERE name='sql';"
    },
    {
        "question": "What is the type of the 'name' column in the sqlite_master table?",
        "query": "SELECT type FROM pragma_table_info(sqlite_master) WHERE name = 'name';"
    },
    {
        "question": "Does the sqlite_master table have any primary key constraints?",
        "query": "SELECT pk FROM pragma_table_info(sqlite_master) WHERE name = 'type';"
    },
    {
        "question": "List the names and salaries of all employees.",
        "query": "SELECT name, salary FROM employees;"
    },
    {
        "question": "Find the department with the largest number of employees.",
        "query": "SELECT department_id, COUNT(*) AS employee_count FROM employees GROUP BY department_id ORDER BY employee_count DESC LIMIT 1;"
    },
    {
        "question": "What is the average salary of employees in the 'IT' department?",
        "query": "SELECT AVG(T1.salary) FROM employees AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.id WHERE T2.name = 'IT';"
    },
    {
        "question": "List the names of all employees who have a salary greater than $50,000.",
        "query": "SELECT name FROM employees WHERE salary > 50000;"
    },
    {
        "question": "Find the names of all departments that have no employees.",
        "query": "SELECT name FROM departments EXCEPT SELECT T2.name FROM employees AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.id;"
    },
    {
        "question": "List the names of employees and their corresponding department names.",
        "query": "SELECT T1.name, T2.name FROM employees AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.id;"
    },
    {
        "question": "Find the name and salary of the employee with the lowest salary in the 'Marketing' department.",
        "query": "SELECT T1.name, T1.salary FROM employees AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.id WHERE T2.name = 'Marketing' ORDER BY T1.salary ASC LIMIT 1;"
    },
    {
        "question": "List the names of departments and their average salaries, but only include departments with an average salary greater than $60,000.",
        "query": "SELECT T2.name, AVG(T1.salary) AS avg_salary FROM employees AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.id GROUP BY T2.name HAVING avg_salary > 60000;"
    },
    {
        "question": "What is the average duration of tracks in the 'Alternative & Punk' genre?",
        "query": "SELECT AVG(milliseconds) FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Alternative & Punk');"
    },
    {
        "question": "What is the total number of albums by artists from the USA?",
        "query": "SELECT COUNT(*) FROM albums WHERE artistid IN (SELECT artistid FROM artists WHERE country = 'USA');"
    },
    {
        "question": "What is the total sales value of all invoices shipped to Brazil?",
        "query": "SELECT SUM(total) FROM invoices WHERE billing_country = 'Brazil';"
    },
    {
        "question": "What is the milliseconds and bytes of the track with id 1?",
        "query": "SELECT milliseconds, bytes FROM tracks WHERE id = 1;"
    },
    {
        "question": "What are the names of the tracks in the album 'Let There Be Rock'?",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.id WHERE T2.title = 'Let There Be Rock';"
    },
    {
        "question": "How many tracks are in the album 'Big Ones'?",
        "query": "SELECT COUNT(*) FROM tracks WHERE albumid = (SELECT id FROM albums WHERE title = 'Big Ones');"
    },
    {
        "question": "List the titles of all the tracks composed by Angus Young.",
        "query": "SELECT title FROM tracks WHERE composer = 'Angus Young';"
    },
    {
        "question": "What are the names of the customers located in Brazil?",
        "query": "SELECT first_name, last_name FROM customers WHERE country = 'Brazil';"
    },
    {
        "question": "What is the total cost of all tracks in the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT SUM(T1.unitprice) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T2.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "What is the average duration of tracks in the 'Grunge' playlist?",
        "query": "SELECT AVG(T2.milliseconds) FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id WHERE T1.playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Grunge');"
    },
    {
        "question": "What is the total length of the album 'For Those About To Rock We Salute You' in seconds?",
        "query": "SELECT SUM(milliseconds) / 1000 FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T2.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "What is the title of the album with the shortest track?",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid ORDER BY T1.milliseconds ASC LIMIT 1;"
    },
    {
        "question": "List the albums with their total track length in milliseconds.",
        "query": "SELECT T2.title, SUM(T1.milliseconds) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid GROUP BY T2.title;"
    },
    {
        "question": "How many tracks are in each genre?",
        "query": "SELECT genres.name, COUNT(tracks.name) FROM tracks INNER JOIN genres ON tracks.genreid = genres.genreid GROUP BY genres.name;"
    },
    {
        "question": "What is the total cost of all tracks purchased by customer with id 1?",
        "query": "SELECT SUM(invoice_items.unitprice * invoice_items.quantity) FROM invoice_items INNER JOIN invoices ON invoice_items.invoiceid = invoices.invoiceid INNER JOIN customers ON invoices.customerid = customers.customerid WHERE customers.customerid = 1;"
    },
    {
        "question": "List the names of customers and the total amount they have spent on music.",
        "query": "SELECT customers.firstname, customers.lastname, SUM(invoice_items.unitprice * invoice_items.quantity) AS total_spent FROM customers INNER JOIN invoices ON customers.customerid = invoices.customerid INNER JOIN invoice_items ON invoices.invoiceid = invoice_items.invoiceid GROUP BY customers.customerid;"
    },
    {
        "question": "List the albums with the average track duration greater than 5 minutes.",
        "query": "SELECT title FROM albums WHERE albumid IN (SELECT albumid FROM tracks GROUP BY albumid HAVING AVG(milliseconds) > 300000);"
    },
    {
        "question": "List the names of all tracks that are not protected.",
        "query": "SELECT name FROM tracks WHERE mediaTypeId=(SELECT mediaTypeId from media_types WHERE name='Protected AAC audio file');"
    },
    {
        "question": "What is the name of the shortest unprotected audio track?",
        "query": "SELECT name from tracks WHERE mediaTypeId != (SELECT mediaTypeId FROM media_types WHERE name = 'Protected AAC audio file') ORDER BY milliseconds ASC LIMIT 1;"
    },
    {
        "question": "List the names and composers of all tracks that are shorter than the average track length.",
        "query": "SELECT name, composer FROM tracks WHERE milliseconds < (SELECT AVG(milliseconds) FROM tracks);"
    },
    {
        "question": "What is the name of the shortest track composed by Angus Young?",
        "query": "SELECT name FROM tracks WHERE composer = 'Angus Young' ORDER BY milliseconds ASC LIMIT 1;"
    },
    {
        "question": "List the names of all tracks that have been purchased by the customer with the email 'luisrojas@yahoo.cl'.",
        "query": "SELECT T3.name FROM customers AS T1 INNER JOIN invoices AS T2 ON T1.customerid = T2.customerid INNER JOIN invoicelinetracks AS T4 ON T2.invoiceid = T4.invoiceid INNER JOIN tracks AS T3 ON T4.trackid = T3.trackid WHERE T1.email = 'luisrojas@yahoo.cl';"
    },
    {
        "question": "What is the average price of tracks composed by 'AC/DC'?",
        "query": "SELECT AVG(T1.unitprice) FROM invoicelinetracks AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid WHERE T2.composer = 'AC/DC';"
    },
    {
        "question": "Find the name and title of the employee with the highest salary.",
        "query": "SELECT name, title FROM employees ORDER BY salary DESC LIMIT 1"
    },
    {
        "question": "List the names of employees who work in the same department as 'John Smith'.",
        "query": "SELECT name FROM employees WHERE dept_id = (SELECT dept_id FROM employees WHERE name = 'John Smith') AND name != 'John Smith'"
    },
    {
        "question": "Find the name of the department with the highest total salary expenditure.",
        "query": "SELECT d.name FROM departments d LEFT JOIN employees e ON d.dept_id = e.dept_id GROUP BY d.name ORDER BY SUM(e.salary) DESC LIMIT 1"
    },
    {
        "question": "Find the name and title of the employee who has been working in the company the longest.",
        "query": "SELECT name, title FROM employees ORDER BY start_date ASC LIMIT 1"
    },
    {
        "question": "List the names of all departments and their average salaries, sorted in descending order of average salary.",
        "query": "SELECT d.name, AVG(e.salary) FROM departments d LEFT JOIN employees e ON d.dept_id = e.dept_id GROUP BY d.name ORDER BY AVG(e.salary) DESC"
    },
    {
        "question": "What is the total salary expenditure of the company?",
        "query": "SELECT SUM(salary) FROM employees"
    },
    {
        "question": "List the names of employees who have a start date after '2022-01-01'.",
        "query": "SELECT name FROM employees WHERE start_date > '2022-01-01'"
    },
    {
        "question": "What are the names of the playlists that contain the track 'Dazed and Confused'?",
        "query": "SELECT p.name FROM playlists p JOIN playlist_track pt ON p.playlist_id = pt.playlist_id JOIN tracks t ON pt.track_id = t.track_id WHERE t.name = 'Dazed and Confused';"
    },
    {
        "question": "List the names of all the employees and their titles.",
        "query": "SELECT first_name, last_name, title FROM employees;"
    },
    {
        "question": "What is the total revenue generated by sales in each country?",
        "query": "SELECT billing_country, SUM(total) FROM invoices GROUP BY billing_country;"
    },
    {
        "question": "Find the names of all customers who have purchased tracks from the 'Alternative & Punk' genre.",
        "query": "SELECT c.first_name, c.last_name FROM customers c JOIN invoices i ON c.customer_id = i.customer_id JOIN invoice_items ii ON i.invoice_id = ii.invoice_id JOIN tracks t ON ii.track_id = t.track_id WHERE t.genre_id = (SELECT genre_id FROM genres WHERE name = 'Alternative & Punk');"
    },
    {
        "question": "What is the billing country for invoice with InvoiceId 10?",
        "query": "SELECT BillingCountry FROM Invoice WHERE InvoiceId = 10;"
    },
    {
        "question": "What is the name of the artist who recorded the album 'Let There Be Rock'?",
        "query": "SELECT T2.Name FROM Album AS T1 INNER JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = 'Let There Be Rock';"
    },
    {
        "question": "List all tracks composed by Angus Young.",
        "query": "SELECT Name FROM Track WHERE Composer = 'Angus Young';"
    },
    {
        "question": "Which playlist includes the track with TrackId 10?",
        "query": "SELECT T1.Name FROM Playlist AS T1 INNER JOIN PlaylistTrack AS T2 ON T1.PlaylistId = T2.PlaylistId WHERE T2.TrackId = 10;"
    },
    {
        "question": "How many tracks are there in the album with AlbumId 5?",
        "query": "SELECT COUNT(*) FROM Track WHERE AlbumId = 5;"
    },
    {
        "question": "List all customers who have purchased tracks of the genre 'Rock'.",
        "query": "SELECT DISTINCT T3.FirstName, T3.LastName FROM Genre AS T1 INNER JOIN Track AS T2 ON T1.GenreId = T2.GenreId INNER JOIN InvoiceLine AS T3 ON T2.TrackId = T3.TrackId INNER JOIN Invoice as T4 ON T3.InvoiceId = T4.InvoiceId INNER JOIN Customer AS T5 ON T4.CustomerId = T5.CustomerId WHERE T1.Name = 'Rock';"
    },
    {
        "question": "What is the average unit price of tracks in the genre 'Jazz'?",
        "query": "SELECT AVG(T2.UnitPrice) FROM Genre AS T1 INNER JOIN Track AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Jazz';"
    },
    {
        "question": "List all invoices with their billing address, city, state, country, and postal code.",
        "query": "SELECT BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode FROM Invoice;"
    },
    {
        "question": "Find the name of the longest track in the database.",
        "query": "SELECT name FROM tracks WHERE milliseconds = (SELECT MAX(milliseconds) FROM tracks);"
    },
    {
        "question": "List the names of all tracks and their composers for the 'Brazilian Music' playlist.",
        "query": "SELECT T2.name, T2.composer FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id WHERE T1.playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Brazilian Music');"
    },
    {
        "question": "Find the names of all playlists that contain at least one track by 'AC/DC'.",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN playlists AS T2 ON T1.playlist_id = T2.playlist_id WHERE T1.track_id IN (SELECT track_id FROM tracks WHERE composer = 'AC/DC');"
    },
    {
        "question": "What is the city and country of the customer 'Alfreds Futterkiste'?",
        "query": "SELECT City, Country FROM Customers WHERE CustomerName = 'Alfreds Futterkiste'"
    },
    {
        "question": "What are the names of all suppliers in the city 'London'?",
        "query": "SELECT SupplierName FROM Suppliers WHERE City = 'London'"
    },
    {
        "question": "What is the total quantity of product 'Chai' ordered in order number 10248?",
        "query": "SELECT Quantity FROM OrderDetails WHERE OrderID = 10248 AND ProductID = (SELECT ProductID FROM Products WHERE ProductName = 'Chai')"
    },
    {
        "question": "What is the total revenue generated from order number 10248?",
        "query": "SELECT SUM(Quantity * Price) FROM OrderDetails WHERE OrderID = 10248"
    },
    {
        "question": "Which customers have placed orders for 'Chai'?",
        "query": "SELECT T2.CustomerName FROM OrderDetails AS T1 INNER JOIN Orders AS T2 ON T1.OrderID = T2.OrderID WHERE T1.ProductID = (SELECT ProductID FROM Products WHERE ProductName = 'Chai')"
    },
    {
        "question": "List the customer name, order date, and product name for all orders containing 'Chang'.",
        "query": "SELECT T3.CustomerName, T2.OrderDate, T1.ProductName FROM Products AS T1 INNER JOIN OrderDetails AS T4 ON T1.ProductID = T4.ProductID INNER JOIN Orders AS T2 ON T4.OrderID = T2.OrderID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T1.ProductName = 'Chang'"
    },
    {
        "question": "Which suppliers supply products with a price greater than $20?",
        "query": "SELECT T2.SupplierName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.Price > 20"
    },
    {
        "question": "List the albums with their total track count.",
        "query": "SELECT title, COUNT(T2.trackid) FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid GROUP BY T1.albumid;"
    },
    {
        "question": "What are the titles of the albums that have tracks composed by 'AC/DC'?",
        "query": "SELECT DISTINCT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T1.composer = 'AC/DC';"
    },
    {
        "question": "How many albums does the artist 'AC/DC' have?",
        "query": "SELECT COUNT(*) FROM Album WHERE ArtistId = (SELECT ArtistId FROM Artist WHERE Name = 'AC/DC');"
    },
    {
        "question": "List all tracks in the 'Rock' genre.",
        "query": "SELECT Name FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Rock');"
    },
    {
        "question": "List all customers who have purchased tracks in the 'Metal' genre.",
        "query": "SELECT DISTINCT T3.CustomerId FROM Genre AS T1 INNER JOIN Track AS T2 ON T1.GenreId = T2.GenreId INNER JOIN InvoiceLine AS T3 ON T2.TrackId = T3.TrackId INNER JOIN Invoice AS T4 ON T3.InvoiceId = T4.InvoiceId INNER JOIN Customer AS T5 ON T4.CustomerId = T5.CustomerId WHERE T1.Name = 'Metal';"
    },
    {
        "question": "List all playlists created by the customer with CustomerId 10.",
        "query": "SELECT Name FROM Playlist WHERE PlaylistId IN (SELECT PlaylistId FROM PlaylistTrack WHERE TrackId IN (SELECT TrackId FROM InvoiceLine WHERE InvoiceId IN (SELECT InvoiceId FROM Invoice WHERE CustomerId = 10)));"
    },
    {
        "question": "What are the names of the top 10 longest tracks?",
        "query": "SELECT Name FROM Track ORDER BY Milliseconds DESC LIMIT 10;"
    },
    {
        "question": "What is the name and composer of the track with trackid 3?",
        "query": "SELECT name, composer FROM tracks WHERE trackid = 3;"
    },
    {
        "question": "What are the names of all the tracks in the 'Chinatown' album?",
        "query": "SELECT track FROM tracks WHERE album_id = (SELECT album_id FROM albums WHERE title = 'Chinatown')"
    },
    {
        "question": "How many tracks are there in the album 'Chinatown'?",
        "query": "SELECT COUNT(*) FROM tracks WHERE album_id = (SELECT album_id FROM albums WHERE title = 'Chinatown')"
    },
    {
        "question": "What is the name of the artist who composed the track 'Desafinado'?",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN artists AS T2 ON T1.composer_id = T2.artist_id WHERE T1.track = 'Desafinado'"
    },
    {
        "question": "List the titles of all albums by 'Miles Davis' along with the number of tracks in each album.",
        "query": "SELECT T1.title, COUNT(T2.track) FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.album_id = T2.album_id WHERE T1.artist_id = (SELECT artist_id FROM artists WHERE name = 'Miles Davis') GROUP BY T1.title"
    },
    {
        "question": "What is the total duration of all tracks in the album 'Chinatown'?",
        "query": "SELECT SUM(milliseconds) FROM tracks WHERE album_id = (SELECT album_id FROM albums WHERE title = 'Chinatown')"
    },
    {
        "question": "Find the names of all artists who have composed tracks for albums in the 'Jazz' genre.",
        "query": "SELECT T3.name FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.album_id = T2.album_id INNER JOIN artists AS T3 ON T2.composer_id = T3.artist_id WHERE T1.genre_id = (SELECT genre_id FROM genres WHERE name = 'Jazz')"
    },
    {
        "question": "List the names of all tracks that have a composer different from the album's artist.",
        "query": "SELECT T2.track FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.album_id = T2.album_id WHERE T1.artist_id != T2.composer_id"
    },
    {
        "question": "Find the album with the longest total duration of tracks.",
        "query": "SELECT title FROM albums WHERE album_id = (SELECT album_id FROM tracks GROUP BY album_id ORDER BY SUM(milliseconds) DESC LIMIT 1)"
    },
    {
        "question": "List the names of all artists who have composed at least 3 tracks.",
        "query": "SELECT name FROM artists WHERE artist_id IN (SELECT composer_id FROM tracks GROUP BY composer_id HAVING COUNT(*) >= 3)"
    },
    {
        "question": "List the names of all customers who have purchased tracks from the genre 'Metal'.",
        "query": "SELECT T4.firstname, T4.lastname FROM invoice_items AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid INNER JOIN invoices AS T3 ON T1.invoiceid = T3.invoiceid INNER JOIN customers AS T4 ON T3.customerid = T4.customerid WHERE T2.genreid = (SELECT genreid FROM genres WHERE name = 'Metal') GROUP BY T4.customerid;"
    },
    {
        "question": "List the tracks that belong to the album 'For Those About To Rock We Salute You'.",
        "query": "SELECT t.name FROM tracks AS t JOIN albums AS a ON t.albumid = a.albumid WHERE a.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "What are the names of the playlists that contain the track 'Enter Sandman'?",
        "query": "SELECT p.name FROM playlists AS p JOIN playlist_tracks AS pt ON p.playlistid = pt.playlistid WHERE pt.trackid = (SELECT trackid FROM tracks WHERE name = 'Enter Sandman');"
    },
    {
        "question": "List the names of all customers who have purchased tracks from the 'Rock' genre.",
        "query": "SELECT DISTINCT c.FirstName, c.LastName FROM customers AS c JOIN invoices AS i ON c.CustomerId = i.CustomerId JOIN invoice_items AS ii ON i.InvoiceId = ii.InvoiceId JOIN tracks AS t ON ii.TrackId = t.TrackId WHERE t.GenreId = (SELECT GenreId FROM genres WHERE name = 'Rock');"
    },
    {
        "question": "Find the names of employees who earn more than the average salary of their department.",
        "query": "SELECT emp_name FROM employees AS e WHERE salary > (SELECT AVG(salary) FROM employees WHERE dept_id = e.dept_id);"
    },
    {
        "question": "List the names of departments that have no employees.",
        "query": "SELECT dept_name FROM departments LEFT JOIN employees ON departments.dept_id = employees.dept_id WHERE employees.emp_id IS NULL;"
    },
    {
        "question": "Find the name and salary of the highest-paid employee in each department.",
        "query": "SELECT dept_name, emp_name, salary FROM ( SELECT dept_name, emp_name, salary, ROW_NUMBER() OVER (PARTITION BY dept_name ORDER BY salary DESC) as rn FROM departments d JOIN employees e ON d.dept_id = e.dept_id ) t WHERE rn = 1;"
    },
    {
        "question": "List the names of employees who have 'John' in their name and work in the 'IT' department.",
        "query": "SELECT emp_name FROM employees WHERE emp_name LIKE '%John%' AND dept_id = (SELECT dept_id FROM departments WHERE dept_name = 'IT');"
    },
    {
        "question": "Find the total salary paid to all employees in each department, ordered by department name.",
        "query": "SELECT dept_name, SUM(salary) AS total_salary FROM departments INNER JOIN employees ON departments.dept_id = employees.dept_id GROUP BY dept_name ORDER BY dept_name;"
    },
    {
        "question": "List the names of employees who were born in the 1980s.",
        "query": "SELECT emp_name FROM employees WHERE birth_date BETWEEN '1980-01-01' AND '1989-12-31';"
    },
    {
        "question": "Find the names of departments and their managers' names.",
        "query": "SELECT d.dept_name, e.emp_name AS manager_name FROM departments d INNER JOIN employees e ON d.manager_id = e.emp_id;"
    },
    {
        "question": "Calculate the average salary of all employees.",
        "query": "SELECT AVG(salary) FROM employees;"
    },
    {
        "question": "Find the total salary paid to employees in the 'Marketing' department.",
        "query": "SELECT SUM(salary) FROM employees WHERE department = 'Marketing';"
    },
    {
        "question": "Find the names of employees whose salaries are greater than $60,000.",
        "query": "SELECT name FROM employees WHERE salary > 60000;"
    },
    {
        "question": "Find the name and salary of the employee hired most recently.",
        "query": "SELECT name, salary FROM employees ORDER BY hire_date DESC LIMIT 1;"
    },
    {
        "question": "List the names of employees who are also managers.",
        "query": "SELECT name FROM employees WHERE is_manager = 1;"
    },
    {
        "question": "What is the total number of managers?",
        "query": "SELECT COUNT(*) FROM employees WHERE is_manager = 1;"
    },
    {
        "question": "List all tracks by the artist 'AC/DC'.",
        "query": "SELECT t.Name FROM Track t JOIN Album al ON t.AlbumId = al.AlbumId JOIN Artist ar ON al.ArtistId = ar.ArtistId WHERE ar.Name = 'AC/DC';"
    },
    {
        "question": "Which genre has the most tracks?",
        "query": "SELECT g.Name FROM Genre g JOIN Track t ON g.GenreId = t.GenreId GROUP BY g.Name ORDER BY COUNT(t.TrackId) DESC LIMIT 1;"
    },
    {
        "question": "List all playlists and the number of tracks in each playlist.",
        "query": "SELECT p.Name, COUNT(pt.TrackId) FROM Playlist p JOIN PlaylistTrack pt ON p.PlaylistId = pt.PlaylistId GROUP BY p.Name;"
    },
    {
        "question": "List all tracks in the playlist 'Grunge'.",
        "query": "SELECT t.Name FROM Track t JOIN PlaylistTrack pt ON t.TrackId = pt.TrackId JOIN Playlist p ON pt.PlaylistId = p.PlaylistId WHERE p.Name = 'Grunge';"
    },
    {
        "question": "List the names of all customers who have purchased tracks by 'Iron Maiden'.",
        "query": "SELECT c.FirstName, c.LastName FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId JOIN InvoiceLine il ON i.InvoiceId = il.InvoiceId JOIN Track t ON il.TrackId = t.TrackId JOIN Album al ON t.AlbumId = al.AlbumId JOIN Artist ar ON al.ArtistId = ar.ArtistId WHERE ar.Name = 'Iron Maiden' GROUP BY c.CustomerId;"
    },
    {
        "question": "What are the top 5 most purchased tracks?",
        "query": "SELECT t.Name FROM Track t JOIN InvoiceLine il ON t.TrackId = il.TrackId GROUP BY t.TrackId ORDER BY SUM(il.Quantity) DESC LIMIT 5;"
    },
    {
        "question": "Who is the boss of each employee?",
        "query": "SELECT e.FirstName, e.LastName, b.FirstName, b.LastName FROM Employee e LEFT JOIN Employee b ON e.ReportsTo = b.EmployeeId;"
    },
    {
        "question": "What is the average length of tracks in the 'TV Shows' genre?",
        "query": "SELECT AVG(milliseconds) FROM tracks INNER JOIN genres ON tracks.genreid = genres.genreid WHERE genres.name = 'TV Shows';"
    },
    {
        "question": "What is the total revenue generated from the sales of tracks in the 'Latin' genre?",
        "query": "SELECT SUM(invoice_items.unitprice * invoice_items.quantity) FROM invoice_items INNER JOIN tracks ON invoice_items.trackid = tracks.trackid INNER JOIN genres ON tracks.genreid = genres.genreid WHERE genres.name = 'Latin';"
    },
    {
        "question": "What are the distinct countries in the betfront table?",
        "query": "SELECT DISTINCT COUNTRY FROM betfront"
    },
    {
        "question": "Find the average home opening odds for matches in the betfront table.",
        "query": "SELECT AVG(HOME_OPENING) FROM betfront"
    },
    {
        "question": "List all matches in the betfront table where the home team's opening odds were greater than 10.",
        "query": "SELECT MATCH FROM betfront WHERE HOME_OPENING > 10"
    },
    {
        "question": "What are the different competitions listed in the betfront table?",
        "query": "SELECT DISTINCT COMPETITION FROM betfront"
    },
    {
        "question": "Find the maximum away closing odds in the betfront table.",
        "query": "SELECT MAX(AWAY_CLOSING) FROM betfront"
    },
    {
        "question": "List all matches in the betfront table where the draw opening odds were less than 4.",
        "query": "SELECT MATCH FROM betfront WHERE DRAW_OPENING < 4"
    },
    {
        "question": "What is the earliest date and time in the betfront table?",
        "query": "SELECT MIN(DATETIME) FROM betfront"
    },
    {
        "question": "Find the average draw closing odds for matches in the betfront table.",
        "query": "SELECT AVG(DRAW_CLOSING) FROM betfront"
    },
    {
        "question": "List all matches in the betfront table where the away closing odds were greater than 20.",
        "query": "SELECT MATCH FROM betfront WHERE AWAY_CLOSING > 20"
    },
    {
        "question": "What is the latest date and time in the betfront table?",
        "query": "SELECT MAX(DATETIME) FROM betfront"
    },
    {
        "question": "Find the number of matches played in each country in the betfront table.",
        "query": "SELECT COUNTRY, COUNT(*) FROM betfront GROUP BY COUNTRY"
    },
    {
        "question": "List all matches in the betfront table played in 'norway'.",
        "query": "SELECT MATCH FROM betfront WHERE COUNTRY = 'norway'"
    },
    {
        "question": "Find the average home closing odds for matches played in 'france' in the betfront table.",
        "query": "SELECT AVG(HOME_CLOSING) FROM betfront WHERE COUNTRY = 'france'"
    },
    {
        "question": "What is the total number of matches in the betfront table?",
        "query": "SELECT COUNT(*) FROM betfront"
    },
    {
        "question": "List all distinct years in the betfront table.",
        "query": "SELECT DISTINCT YEAR FROM betfront"
    },
    {
        "question": "Find the number of matches played in each competition in the betfront table.",
        "query": "SELECT COMPETITION, COUNT(*) FROM betfront GROUP BY COMPETITION"
    },
    {
        "question": "List all matches played in the 'a-league-2010-2011' competition in the betfront table.",
        "query": "SELECT MATCH FROM betfront WHERE COMPETITION = 'a-league-2010-2011'"
    },
    {
        "question": "Find the average away opening odds for matches played in the year 2012 in the betfront table.",
        "query": "SELECT AVG(AWAY_OPENING) FROM betfront WHERE YEAR = 2012"
    },
    {
        "question": "What are the distinct referees in the football_data table?",
        "query": "SELECT DISTINCT Referee FROM football_data"
    },
    {
        "question": "Find the average home goals scored (FTHG) in the football_data table.",
        "query": "SELECT AVG(FTHG) FROM football_data"
    },
    {
        "question": "List all matches in the football_data table where the away team scored more than 5 goals.",
        "query": "SELECT HomeTeam, AwayTeam FROM football_data WHERE FTAG > 5"
    },
    {
        "question": "What are the different divisions (Div) in the football_data table?",
        "query": "SELECT DISTINCT Div FROM football_data"
    },
    {
        "question": "Find the maximum away goals scored (FTAG) in the football_data table.",
        "query": "SELECT MAX(FTAG) FROM football_data"
    },
    {
        "question": "List all matches in the football_data table where the home team scored less than 2 goals.",
        "query": "SELECT HomeTeam, AwayTeam FROM football_data WHERE FTHG < 2"
    },
    {
        "question": "What is the earliest date and time in the football_data table?",
        "query": "SELECT MIN(Datetime) FROM football_data"
    },
    {
        "question": "Find the average half-time home goals (HTHG) in the football_data table.",
        "query": "SELECT AVG(HTHG) FROM football_data"
    },
    {
        "question": "List all matches in the football_data table where the half-time away goals (HTAG) were greater than 3.",
        "query": "SELECT HomeTeam, AwayTeam FROM football_data WHERE HTAG > 3"
    },
    {
        "question": "What is the latest date and time in the football_data table?",
        "query": "SELECT MAX(Datetime) FROM football_data"
    },
    {
        "question": "Find the number of matches played in each country in the football_data table.",
        "query": "SELECT Country, COUNT(*) FROM football_data GROUP BY Country"
    },
    {
        "question": "List all matches in the football_data table played in 'Brazil'.",
        "query": "SELECT HomeTeam, AwayTeam FROM football_data WHERE Country = 'Brazil'"
    },
    {
        "question": "Find the average full-time home goals (FTHG) for matches played in 'England' in the football_data table.",
        "query": "SELECT AVG(FTHG) FROM football_data WHERE Country = 'England'"
    },
    {
        "question": "What is the total number of matches in the football_data table?",
        "query": "SELECT COUNT(*) FROM football_data"
    },
    {
        "question": "List all distinct seasons in the football_data table.",
        "query": "SELECT DISTINCT Season FROM football_data"
    },
    {
        "question": "Find the number of matches played in each league in the football_data table.",
        "query": "SELECT League, COUNT(*) FROM football_data GROUP BY League"
    },
    {
        "question": "List all matches played in the 'Premier League' in the football_data table.",
        "query": "SELECT HomeTeam, AwayTeam FROM football_data WHERE League = 'Premier League'"
    },
    {
        "question": "Find the average away goals scored (FTAG) for matches played in the season '2020' in the football_data table.",
        "query": "SELECT AVG(FTAG) FROM football_data WHERE Season = '2020'"
    },
    {
        "question": "List all matches in the betfront table played in 2011 along with the home opening odds.",
        "query": "SELECT MATCH, HOME_OPENING FROM betfront WHERE YEAR = 2011"
    },
    {
        "question": "Find the average draw opening odds for matches played in 'europe' in the betfront table.",
        "query": "SELECT AVG(DRAW_OPENING) FROM betfront WHERE COUNTRY = 'europe'"
    },
    {
        "question": "List the matches and home closing odds from betfront where the home closing odds are greater than the average home closing odds.",
        "query": "SELECT MATCH, HOME_CLOSING FROM betfront WHERE HOME_CLOSING > (SELECT AVG(HOME_CLOSING) FROM betfront)"
    },
    {
        "question": "Find the number of matches played in each year in the betfront table.",
        "query": "SELECT YEAR, COUNT(*) FROM betfront GROUP BY YEAR"
    },
    {
        "question": "List the matches and away closing odds from betfront where the away closing odds are less than the average away closing odds.",
        "query": "SELECT MATCH, AWAY_CLOSING FROM betfront WHERE AWAY_CLOSING < (SELECT AVG(AWAY_CLOSING) FROM betfront)"
    },
    {
        "question": "Find the matches in betfront where the draw opening odds are between 3 and 4.",
        "query": "SELECT MATCH FROM betfront WHERE DRAW_OPENING BETWEEN 3 AND 4"
    },
    {
        "question": "List the year, country, and competition for each match in the betfront table.",
        "query": "SELECT YEAR, COUNTRY, COMPETITION FROM betfront"
    },
    {
        "question": "Find the matches in betfront where the home opening odds are greater than 5 and the away opening odds are less than 10.",
        "query": "SELECT MATCH FROM betfront WHERE HOME_OPENING > 5 AND AWAY_OPENING < 10"
    },
    {
        "question": "List the country and the number of matches played in that country in descending order of match count from the betfront table.",
        "query": "SELECT COUNTRY, COUNT(*) AS MatchCount FROM betfront GROUP BY COUNTRY ORDER BY MatchCount DESC"
    },
    {
        "question": "Find the matches in betfront where the year is 2012 and the country is 'norway'.",
        "query": "SELECT MATCH FROM betfront WHERE YEAR = 2012 AND COUNTRY = 'norway'"
    },
    {
        "question": "List the competition and the average home opening odds for that competition from the betfront table.",
        "query": "SELECT COMPETITION, AVG(HOME_OPENING) AS AverageHomeOpeningOdds FROM betfront GROUP BY COMPETITION"
    },
    {
        "question": "Find the matches in betfront where the away closing odds are the highest.",
        "query": "SELECT MATCH FROM betfront WHERE AWAY_CLOSING = (SELECT MAX(AWAY_CLOSING) FROM betfront)"
    },
    {
        "question": "List the year and the average draw closing odds for that year from the betfront table.",
        "query": "SELECT YEAR, AVG(DRAW_CLOSING) AS AverageDrawClosingOdds FROM betfront GROUP BY YEAR"
    },
    {
        "question": "Find the matches in betfront where the home opening odds are the lowest.",
        "query": "SELECT MATCH FROM betfront WHERE HOME_OPENING = (SELECT MIN(HOME_OPENING) FROM betfront)"
    },
    {
        "question": "List the country and the average away opening odds for that country, ordered by the average odds in descending order, from the betfront table.",
        "query": "SELECT COUNTRY, AVG(AWAY_OPENING) AS AverageAwayOpeningOdds FROM betfront GROUP BY COUNTRY ORDER BY AverageAwayOpeningOdds DESC"
    },
    {
        "question": "What are the home team, away team, and final result (FTR) for all matches in the football_data table where the referee was 'M. Ciampi'?",
        "query": "SELECT HomeTeam, AwayTeam, FTR FROM football_data WHERE Referee = 'M. Ciampi'"
    },
    {
        "question": "What is the average number of goals scored by the home team in the first half (HTHG) for matches played in the 'Bundesliga 1' in the football_data table?",
        "query": "SELECT AVG(HTHG) FROM football_data WHERE League = 'Bundesliga 1'"
    },
    {
        "question": "List the home team, away team, and half-time result (HTR) for all matches in the football_data table where the away team scored more than 3 goals in the second half (FTAG - HTAG).",
        "query": "SELECT HomeTeam, AwayTeam, HTR FROM football_data WHERE (FTAG - HTAG) > 3"
    },
    {
        "question": "What is the average number of goals scored by the away team in matches refereed by 'Peter Walton' in the football_data table?",
        "query": "SELECT AVG(FTAG) FROM football_data WHERE Referee = 'Peter Walton'"
    },
    {
        "question": "List the home team, away team, and full-time result (FTR) for all matches in the football_data table where the home team scored more than 2 goals in the first half (HTHG).",
        "query": "SELECT HomeTeam, AwayTeam, FTR FROM football_data WHERE HTHG > 2"
    },
    {
        "question": "What is the maximum number of goals scored by the away team in the second half (FTAG - HTAG) in matches played in the 'Premier League' in the football_data table?",
        "query": "SELECT MAX(FTAG - HTAG) FROM football_data WHERE League = 'Premier League'"
    },
    {
        "question": "List the home team, away team, and half-time result (HTR) for all matches in the football_data table where the home team scored no goals in the first half (HTHG = 0).",
        "query": "SELECT HomeTeam, AwayTeam, HTR FROM football_data WHERE HTHG = 0"
    },
    {
        "question": "What is the average number of goals scored in the first half (HTHG + HTAG) in matches played in the 'La Liga Segunda Division' in the football_data table?",
        "query": "SELECT AVG(HTHG + HTAG) FROM football_data WHERE League = 'La Liga Segunda Division'"
    },
    {
        "question": "List the home team, away team, and full-time result (FTR) for all matches in the football_data table where the total number of goals scored was greater than 5.",
        "query": "SELECT HomeTeam, AwayTeam, FTR FROM football_data WHERE FTHG + FTAG > 5"
    },
    {
        "question": "What is the minimum number of goals scored in matches refereed by 'A Newlands' in the football_data table?",
        "query": "SELECT MIN(FTHG + FTAG) FROM football_data WHERE Referee = 'A Newlands'"
    },
    {
        "question": "List the home team and away team for all matches in the football_data table where the home team won and the away team scored at least one goal.",
        "query": "SELECT HomeTeam, AwayTeam FROM football_data WHERE FTR = 'H' AND FTAG > 0"
    },
    {
        "question": "What is the total number of goals scored in matches played in 'Spain' in the football_data table?",
        "query": "SELECT SUM(FTHG + FTAG) FROM football_data WHERE Country = 'Spain'"
    },
    {
        "question": "How many matches were played in each season in the football_data table?",
        "query": "SELECT Season, COUNT(*) FROM football_data GROUP BY Season"
    },
    {
        "question": "What are the names of all the leagues in the football_data table?",
        "query": "SELECT DISTINCT League from football_data"
    },
    {
        "question": "What is the average B365H odds for matches where the home team is 'Dortmund'?",
        "query": "SELECT AVG(B365H) FROM football_data WHERE HomeTeam = 'Dortmund'"
    },
    {
        "question": "What are the different countries present in the football_data table?",
        "query": "SELECT DISTINCT Country FROM football_data"
    },
    {
        "question": "Find all matches where the home team is 'Castellon' and the away team is 'Goztep'.",
        "query": "SELECT * FROM football_data WHERE HomeTeam = 'Castellon' AND AwayTeam = 'Goztep'"
    },
    {
        "question": "List the names of albums released after 1990.",
        "query": "SELECT title FROM albums WHERE strftime('%Y', released) > '1990';"
    },
    {
        "question": "List the names of customers who have purchased tracks composed by 'U2'.",
        "query": "SELECT T3.firstname, T3.lastname FROM tracks AS T1 INNER JOIN invoice_items AS T2 ON T1.trackid = T2.trackid INNER JOIN invoices AS T3 ON T2.invoiceid = T3.invoiceid WHERE T1.composer = 'U2' GROUP BY T3.customerid;"
    },
    {
        "question": "List the names of artists who have composed tracks in more than one genre.",
        "query": "SELECT composer FROM tracks GROUP BY composer HAVING COUNT(DISTINCT genreid) > 1;"
    },
    {
        "question": "Which customer (first and last name) has spent the most money on music?",
        "query": "SELECT firstname, lastname FROM customers WHERE customerid = (SELECT customerid FROM invoices GROUP BY customerid ORDER BY SUM(total) DESC LIMIT 1);"
    },
    {
        "question": "List the names of all tracks that belong to albums released in 2008.",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE STRFTIME('%Y', T2.released) = '2008';"
    },
    {
        "question": "What is the name and genre of the shortest track?",
        "query": "SELECT T1.name, T2.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid ORDER BY T1.milliseconds ASC LIMIT 1;"
    },
    {
        "question": "List the names of all playlists that contain tracks from the 'Alternative & Punk' genre.",
        "query": "SELECT T3.name FROM genres AS T1 INNER JOIN tracks AS T2 ON T1.genreid = T2.genreid INNER JOIN playlist_tracks AS T4 ON T2.trackid = T4.trackid INNER JOIN playlists AS T3 ON T4.playlistid = T3.playlistid WHERE T1.name = 'Alternative & Punk' GROUP BY T3.playlistid;"
    },
    {
        "question": "List the albums with the highest number of tracks.",
        "query": "SELECT title FROM albums WHERE albumid IN (SELECT albumid FROM tracks GROUP BY albumid ORDER BY COUNT(*) DESC LIMIT 1);"
    },
    {
        "question": "List the names of all tracks that belong to the 'Alternative & Punk' genre and are longer than 3 minutes (180000 milliseconds).",
        "query": "SELECT name FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Alternative & Punk') AND milliseconds > 180000;"
    },
    {
        "question": "What are the names of the artists whose albums have an average track length of more than 5 minutes (300000 milliseconds)?",
        "query": "SELECT T3.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid INNER JOIN artists AS T3 ON T2.artistid = T3.artistid GROUP BY T3.name HAVING AVG(T1.milliseconds) > 300000;"
    },
    {
        "question": "List the names of the tracks that belong to the 'Metal' genre and are longer than the average length of all tracks in that genre.",
        "query": "SELECT name FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Metal') AND milliseconds > (SELECT AVG(milliseconds) FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Metal'));"
    },
    {
        "question": "What is the name of the album with the highest average track price?",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid GROUP BY T2.title ORDER BY AVG(T1.unitprice) DESC LIMIT 1;"
    },
    {
        "question": "List the names of playlists that have more than 10 tracks.",
        "query": "SELECT T2.name FROM playlist_track AS T1 INNER JOIN playlists AS T2 ON T1.playlistid = T2.playlistid GROUP BY T2.name HAVING COUNT(T1.trackid) > 10;"
    },
    {
        "question": "List the names of all tracks in the '90s Music' playlist.",
        "query": "SELECT T3.name FROM playlist_track AS T1 INNER JOIN playlists AS T2 ON T1.playlistid = T2.playlistid INNER JOIN tracks AS T3 ON T1.trackid = T3.trackid WHERE T2.name = '90s Music';"
    },
    {
        "question": "What is the total price of all the tracks in the 'Brazilian Music' playlist?",
        "query": "SELECT SUM(T3.unitprice) FROM playlist_track AS T1 INNER JOIN playlists AS T2 ON T1.playlistid = T2.playlistid INNER JOIN tracks AS T3 ON T1.trackid = T3.trackid WHERE T2.name = 'Brazilian Music';"
    },
    {
        "question": "What are the names of all the artists and their corresponding album titles?",
        "query": "SELECT T1.name, T2.title FROM artists AS T1 INNER JOIN albums AS T2 ON T1.artist_id = T2.artist_id;"
    },
    {
        "question": "How many albums are there in the 'Rock' genre?",
        "query": "SELECT COUNT(*) FROM albums WHERE genre_id = (SELECT genre_id FROM genres WHERE name = 'Rock');"
    },
    {
        "question": "What is the name of the genre with genre_id 1?",
        "query": "SELECT name FROM genres WHERE genre_id = 1;"
    },
    {
        "question": "List the names of all genres and the number of albums in each genre.",
        "query": "SELECT T1.name, COUNT(T2.album_id) FROM genres AS T1 INNER JOIN albums AS T2 ON T1.genre_id = T2.genre_id GROUP BY T1.name;"
    },
    {
        "question": "Find the total amount spent by customer 'David Lee' on all orders.",
        "query": "SELECT SUM(oi.quantity * p.price) FROM order_items oi INNER JOIN products p ON oi.product_id = p.product_id INNER JOIN orders o ON oi.order_id = o.order_id INNER JOIN customers c ON o.customer_id = c.customer_id WHERE c.customer_name = 'David Lee'"
    },
    {
        "question": "Which products have been ordered by 'Lisa Ray' but not by 'David Lee'?",
        "query": "SELECT p.product_name FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id INNER JOIN orders o ON oi.order_id = o.order_id INNER JOIN customers c ON o.customer_id = c.customer_id WHERE c.customer_name = 'Lisa Ray' EXCEPT SELECT p.product_name FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id INNER JOIN orders o ON oi.order_id = o.order_id INNER JOIN customers c ON o.customer_id = c.customer_id WHERE c.customer_name = 'David Lee'"
    },
    {
        "question": "What is the average price of products ordered in '2023-10-26'?",
        "query": "SELECT AVG(p.price) FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id INNER JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date = '2023-10-26'"
    },
    {
        "question": "Find the names of customers who have not placed any orders yet.",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT c.customer_name FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id"
    },
    {
        "question": "What is the most expensive product ever ordered?",
        "query": "SELECT product_name FROM products WHERE price = (SELECT MAX(price) FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id)"
    },
    {
        "question": "Which customer placed the order with the highest total value?",
        "query": "SELECT c.customer_name FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_id = ( SELECT order_id FROM order_items oi INNER JOIN products p ON oi.product_id = p.product_id GROUP BY order_id ORDER BY SUM(oi.quantity * p.price) DESC LIMIT 1 )"
    },
    {
        "question": "Which customer has spent the most money on Rock music?",
        "query": "SELECT c.FirstName, c.LastName FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId JOIN InvoiceLine il ON i.InvoiceId = il.InvoiceId JOIN Track t ON il.TrackId = t.TrackId JOIN Genre g ON t.GenreId = g.GenreId WHERE g.Name = 'Rock' GROUP BY c.CustomerId ORDER BY SUM(il.UnitPrice * il.Quantity) DESC LIMIT 1;"
    },
    {
        "question": "List all customers who have purchased tracks from the album 'Let There Be Rock'.",
        "query": "SELECT DISTINCT c.FirstName, c.LastName FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId JOIN InvoiceLine il ON i.InvoiceId = il.InvoiceId JOIN Track t ON il.TrackId = t.TrackId JOIN Album a ON t.AlbumId = a.AlbumId WHERE a.Title = 'Let There Be Rock';"
    },
    {
        "question": "What is the total revenue generated from sales of tracks in the 'Jazz' genre?",
        "query": "SELECT SUM(il.UnitPrice * il.Quantity) FROM InvoiceLine il JOIN Track t ON il.TrackId = t.TrackId JOIN Genre g ON t.GenreId = g.GenreId WHERE g.Name = 'Jazz';"
    },
    {
        "question": "Which artist has sold the most albums?",
        "query": "SELECT artist_id FROM albums GROUP BY artist_id ORDER BY SUM(sales) DESC LIMIT 1;"
    },
    {
        "question": "What is the total sales for each genre?",
        "query": "SELECT g.name, SUM(a.sales) FROM genres g JOIN tracks t ON g.genre_id = t.genre_id JOIN albums a ON t.album_id = a.album_id GROUP BY g.name;"
    },
    {
        "question": "List the albums with the highest sales within each genre.",
        "query": "SELECT title FROM albums WHERE (genre_id, sales) IN (SELECT genre_id, MAX(sales) FROM albums GROUP BY genre_id);"
    },
    {
        "question": "List the invoices with the highest total amount.",
        "query": "SELECT invoice_id FROM invoices ORDER BY total DESC LIMIT 1;"
    },
    {
        "question": "List the tracks purchased by customer with id 1.",
        "query": "SELECT t.name FROM tracks t JOIN invoice_items ii ON t.track_id = ii.track_id JOIN invoices i ON ii.invoice_id = i.invoice_id WHERE i.customer_id = 1;"
    },
    {
        "question": "What is the name of the most popular genre (based on number of tracks)?",
        "query": "SELECT name FROM genres WHERE genre_id = (SELECT genre_id FROM tracks GROUP BY genre_id ORDER BY COUNT(*) DESC LIMIT 1);"
    },
    {
        "question": "What is the total revenue generated from sales of tracks in the 'Pop' genre?",
        "query": "SELECT SUM(ii.unit_price * ii.quantity) FROM invoice_items ii JOIN tracks t ON ii.track_id = t.track_id WHERE t.genre_id = (SELECT genre_id FROM genres WHERE name = 'Pop');"
    },
    {
        "question": "List the customers who have purchased tracks from the album 'For Those About To Rock We Salute You'.",
        "query": "SELECT DISTINCT c.first_name, c.last_name FROM customers c JOIN invoices i ON c.customer_id = i.customer_id JOIN invoice_items ii ON i.invoice_id = ii.invoice_id JOIN tracks t ON ii.track_id = t.track_id JOIN albums a ON t.album_id = a.album_id WHERE a.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "How many invoices were issued in 2012?",
        "query": "SELECT COUNT(*) FROM invoices WHERE strftime('%Y', invoice_date) = '2012';"
    },
    {
        "question": "List the tracks purchased by customer with customer_id 1.",
        "query": "SELECT T3.name FROM customers AS T1 INNER JOIN invoices AS T2 ON T1.customer_id = T2.customer_id INNER JOIN invoice_items AS T3 ON T2.invoice_id = T3.invoice_id INNER JOIN tracks as T4 ON T3.track_id = T4.track_id WHERE T1.customer_id = 1;"
    },
    {
        "question": "What is the total number of tracks sold in the year 2013?",
        "query": "SELECT SUM(quantity) FROM invoice_items WHERE invoice_id IN (SELECT invoice_id FROM invoices WHERE STRFTIME('%Y', invoice_date) = '2013');"
    },
    {
        "question": "What are the names of the tracks that have never been purchased?",
        "query": "SELECT name FROM tracks EXCEPT SELECT T2.name FROM invoice_items AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id;"
    },
    {
        "question": "What is the total number of tracks in the playlist '90s Rock Anthems'?",
        "query": "SELECT SUM(TrackCount) FROM playlists WHERE Name = '90s Rock Anthems'"
    },
    {
        "question": "Find the names of all playlists created after 2020.",
        "query": "SELECT Name FROM playlists WHERE CreationDate > '2020-12-31'"
    },
    {
        "question": "List the titles of all tracks in the album 'Appetite for Destruction'.",
        "query": "SELECT Name FROM tracks WHERE AlbumId IN (SELECT AlbumId FROM albums WHERE Title = 'Appetite for Destruction')"
    },
    {
        "question": "Find the name of the artist who composed the track 'Bohemian Rhapsody'.",
        "query": "SELECT T2.Name FROM tracks AS T1 INNER JOIN artists AS T2 ON T1.Composer = T2.ArtistId WHERE T1.Name = 'Bohemian Rhapsody'"
    },
    {
        "question": "List the albums by 'AC/DC' that have a total duration of more than 40 minutes (2400000 milliseconds).",
        "query": "SELECT Title FROM albums WHERE ArtistId IN (SELECT ArtistId FROM artists WHERE Name = 'AC/DC') AND (SELECT SUM(Milliseconds) FROM tracks WHERE AlbumId = albums.AlbumId) > 2400000"
    },
    {
        "question": "How many tracks are present in each playlist?",
        "query": "SELECT Name, TrackCount FROM playlists"
    },
    {
        "question": "List the names of all tracks that belong to the 'Alternative & Punk' genre and have a duration longer than 5 minutes (300000 milliseconds).",
        "query": "SELECT Name FROM tracks WHERE GenreId IN (SELECT GenreId FROM genres WHERE Name = 'Alternative & Punk') AND Milliseconds > 300000"
    },
    {
        "question": "Find the names of all playlists that contain tracks from the album 'Back in Black'.",
        "query": "SELECT T2.Name FROM playlist_tracks AS T1 INNER JOIN playlists AS T2 ON T1.PlaylistId = T2.PlaylistId WHERE T1.TrackId IN (SELECT TrackId FROM tracks WHERE AlbumId IN (SELECT AlbumId FROM albums WHERE Title = 'Back in Black'))"
    },
    {
        "question": "What is the total sales revenue generated from the 'Rock' genre?",
        "query": "SELECT SUM(UnitPrice * Quantity) FROM invoice_items WHERE TrackId IN (SELECT TrackId FROM tracks WHERE GenreId IN (SELECT GenreId FROM genres WHERE Name = 'Rock'))"
    },
    {
        "question": "List the names of all the tracks that belong to the 'Alternative & Punk' genre.",
        "query": "SELECT name FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Alternative & Punk');"
    },
    {
        "question": "What is the average unit price of tracks for each media type?",
        "query": "SELECT T2.name, AVG(T1.unitprice) FROM tracks AS T1 INNER JOIN mediatypes AS T2 ON T1.mediatypeid = T2.mediatypeid GROUP BY T2.name;"
    },
    {
        "question": "List the names of all customers and their respective support representatives.",
        "query": "SELECT c.FirstName, c.LastName, e.FirstName, e.LastName FROM Customer AS c LEFT JOIN Employee AS e ON c.SupportRepId = e.EmployeeId;"
    },
    {
        "question": "What are the titles of all the tracks in the 'Rock' genre?",
        "query": "SELECT Name FROM Track AS t INNER JOIN Genre AS g ON t.GenreId = g.GenreId WHERE g.Name = 'Rock';"
    },
    {
        "question": "Which customer has spent the most money in the Chinook store?",
        "query": "SELECT CustomerId FROM Invoice GROUP BY CustomerId ORDER BY SUM(Total) DESC LIMIT 1;"
    },
    {
        "question": "Which artist has the most tracks in the Chinook database?",
        "query": "SELECT ArtistId FROM Album GROUP BY ArtistId ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question": "What are the names of all the albums by the artist 'AC/DC'?",
        "query": "SELECT Title FROM Album AS al INNER JOIN Artist AS ar ON al.ArtistId = ar.ArtistId WHERE ar.Name = 'AC/DC';"
    },
    {
        "question": "What are the titles of albums with more than 20 tracks?",
        "query": "SELECT title FROM albums WHERE albumid IN (SELECT albumid FROM tracks GROUP BY albumid HAVING COUNT(*) > 20);"
    },
    {
        "question": "List the names and unit prices of all tracks in the 'Metal' genre, ordered by price in descending order.",
        "query": "SELECT T1.name, T1.unitprice FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Metal' ORDER BY T1.unitprice DESC;"
    },
    {
        "question": "What is the name of the album with the longest track, and what is the name of that track?",
        "query": "SELECT T2.title, T1.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid ORDER BY T1.milliseconds DESC LIMIT 1;"
    },
    {
        "question": "List the names of all playlists that contain tracks from the album 'Let There Be Rock'.",
        "query": "SELECT T3.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid INNER JOIN playlist_tracks AS T4 ON T1.trackid = T4.trackid INNER JOIN playlists AS T3 ON T4.playlistid = T3.playlistid WHERE T2.title = 'Let There Be Rock';"
    },
    {
        "question": "What is the total cost of all tracks in the playlist 'Music'.",
        "query": "SELECT SUM(T1.unitprice) FROM tracks AS T1 INNER JOIN playlist_tracks AS T2 ON T1.trackid = T2.trackid INNER JOIN playlists AS T3 ON T2.playlistid = T3.playlistid WHERE T3.name = 'Music';"
    },
    {
        "question": "How many tracks are there in the database with a unit price greater than $0.99?",
        "query": "SELECT COUNT(*) FROM tracks WHERE unitprice > 0.99;"
    },
    {
        "question": "What is the name of the shortest track by 'Aerosmith'?",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid INNER JOIN artists AS T3 ON T2.artistid = T3.artistid WHERE T3.name = 'Aerosmith' ORDER BY T1.milliseconds ASC LIMIT 1;"
    },
    {
        "question": "Find the shortest track in the database.",
        "query": "SELECT name FROM tracks WHERE milliseconds = (SELECT MIN(milliseconds) FROM tracks);"
    },
    {
        "question": "What is the name of the genre with ID 1?",
        "query": "SELECT name FROM genres WHERE genreid = 1;"
    },
    {
        "question": "List the names of all tracks and their corresponding genre names.",
        "query": "SELECT T1.name, T2.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid;"
    },
    {
        "question": "List the names of tracks, their composers, and their genre names, sorted alphabetically by track name.",
        "query": "SELECT T1.name, T1.composer, T2.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid ORDER BY T1.name;"
    },
    {
        "question": "What is the total sales amount for the artist 'AC/DC'?",
        "query": "SELECT SUM(T2.unit_price * T2.quantity) FROM albums AS T1 INNER JOIN invoice_items AS T2 ON T1.album_id = T2.track_id INNER JOIN artists as T3 ON T1.artist_id = T3.artist_id WHERE T3.name = 'AC/DC';"
    },
    {
        "question": "List the names of customers who purchased tracks from the album 'Let There Be Rock'.",
        "query": "SELECT T4.first_name, T4.last_name FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.album_id = T2.album_id INNER JOIN invoice_items AS T3 ON T2.track_id = T3.track_id INNER JOIN invoices as T4 ON T4.invoice_id = T3.invoice_id WHERE T1.title = 'Let There Be Rock';"
    },
    {
        "question": "List the titles of albums that have tracks costing more than $1.00.",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T1.unitprice > 1.00 GROUP BY T2.title;"
    },
    {
        "question": "List the names and unit prices of all tracks that cost more than $1.00.",
        "query": "SELECT Name, UnitPrice FROM Track WHERE UnitPrice > 1.00;"
    },
    {
        "question": "How many invoices were generated in each country?",
        "query": "SELECT BillingCountry, COUNT(*) AS InvoiceCount FROM Invoice GROUP BY BillingCountry;"
    },
    {
        "question": "Which playlist contains the most tracks?",
        "query": "SELECT p.Name FROM Playlist p JOIN PlaylistTrack pt ON p.PlaylistId = pt.PlaylistId GROUP BY p.PlaylistId ORDER BY COUNT(pt.TrackId) DESC LIMIT 1;"
    },
    {
        "question": "What is the average track length in milliseconds for the album 'Let There Be Rock'?",
        "query": "SELECT AVG(milliseconds) FROM Tracks WHERE albumid = (SELECT albumid FROM Albums WHERE title = 'Let There Be Rock');"
    },
    {
        "question": "List the names of all customers who have purchased the track 'Princess of the Dawn'.",
        "query": "SELECT T3.firstname, T3.lastname FROM InvoiceItems AS T1 INNER JOIN Invoices AS T2 ON T1.invoiceid = T2.invoiceid INNER JOIN Customers AS T3 ON T2.customerid = T3.customerid WHERE T1.trackid = (SELECT trackid FROM Tracks WHERE name = 'Princess of the Dawn');"
    },
    {
        "question": "List the names of all tracks that belong to genres with names starting with 'R'.",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genre_id = T2.genre_id WHERE T2.name LIKE 'R%';"
    },
    {
        "question": "Find the name and salary of the employee with the lowest salary.",
        "query": "SELECT name, salary FROM employees ORDER BY salary ASC LIMIT 1;"
    },
    {
        "question": "List the names of all employees in alphabetical order.",
        "query": "SELECT name FROM employees ORDER BY name ASC;"
    },
    {
        "question": "List the departments and their average salaries, sorted by average salary in descending order.",
        "query": "SELECT department, AVG(salary) AS avg_salary FROM employees GROUP BY department ORDER BY avg_salary DESC;"
    },
    {
        "question": "Find the names of employees whose salaries are within $10,000 of the highest salary.",
        "query": "SELECT name FROM employees WHERE salary >= (SELECT MAX(salary) FROM employees) - 10000;"
    },
    {
        "question": "What is the total number of customers?",
        "query": "SELECT COUNT(*) FROM Customers"
    },
    {
        "question": "What is the name of the customer who placed order number 10248?",
        "query": "SELECT T2.CustomerName FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.OrderID = 10248"
    },
    {
        "question": "List the names of all suppliers and the products they supply.",
        "query": "SELECT T1.SupplierName, T2.ProductName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID"
    },
    {
        "question": "List all orders with their corresponding customer names and order dates.",
        "query": "SELECT T2.CustomerName, T1.OrderDate FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID"
    },
    {
        "question": "What is the total value of all orders placed by the customer 'Alfreds Futterkiste'?",
        "query": "SELECT SUM(Quantity * Price) FROM OrderDetails AS T1 INNER JOIN Orders AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.CustomerID = (SELECT CustomerID FROM Customers WHERE CustomerName = 'Alfreds Futterkiste')"
    },
    {
        "question": "Which supplier supplies the product 'Chai'?",
        "query": "SELECT T2.SupplierName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Chai'"
    },
    {
        "question": "List all customers located in Germany.",
        "query": "SELECT CustomerName FROM Customers WHERE Country = 'Germany'"
    },
    {
        "question": "What are the names and prices of products supplied by suppliers in the USA?",
        "query": "SELECT T1.ProductName, T1.Price FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'USA'"
    },
    {
        "question": "How many different categories of products are there?",
        "query": "SELECT COUNT(DISTINCT CategoryID) FROM Products"
    },
    {
        "question": "What is the total cost of all the tracks in the playlist 'Music'?",
        "query": "SELECT SUM(T2.unitprice) FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid WHERE T1.playlistid = (SELECT playlistid FROM playlists WHERE name = 'Music');"
    },
    {
        "question": "List the names of the customers who have purchased tracks in the 'Rock' genre.",
        "query": "SELECT DISTINCT T3.firstname, T3.lastname FROM genres AS T1 INNER JOIN tracks AS T2 ON T1.genreid = T2.genreid INNER JOIN invoice_items AS T4 ON T2.trackid = T4.trackid INNER JOIN invoices AS T5 ON T4.invoiceid = T5.invoiceid INNER JOIN customers AS T3 ON T5.customerid = T3.customerid WHERE T1.name = 'Rock';"
    },
    {
        "question": "List the names of all customers who made purchases in 2010.",
        "query": "SELECT first_name, last_name FROM customers WHERE customer_id IN (SELECT customer_id FROM invoices WHERE strftime('%Y', invoice_date) = '2010');"
    },
    {
        "question": "What is the average track length for each genre?",
        "query": "SELECT genres.name, AVG(tracks.milliseconds) FROM tracks INNER JOIN genres ON tracks.genre_id = genres.genre_id GROUP BY genres.name;"
    },
    {
        "question": "List the names of all tracks in the playlist '90\u2019s Music'.",
        "query": "SELECT tracks.name FROM tracks INNER JOIN playlist_tracks ON tracks.track_id = playlist_tracks.track_id WHERE playlist_tracks.playlist_id = (SELECT playlist_id FROM playlists WHERE name = '90\u2019s Music');"
    },
    {
        "question": "What is the total number of tracks sold in the USA?",
        "query": "SELECT SUM(T2.quantity) FROM tracks AS T1 INNER JOIN invoice_items AS T2 ON T1.trackid = T2.trackid INNER JOIN invoices AS T3 ON T2.invoiceid = T3.invoiceid INNER JOIN customers AS T4 ON T3.customerid = T4.customerid WHERE T4.country = 'USA';"
    },
    {
        "question": "List the names of the artists and the number of tracks they have composed.",
        "query": "SELECT T3.name, COUNT(T1.trackid) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid INNER JOIN artists AS T3 ON T2.artistid = T3.artistid GROUP BY T3.name;"
    },
    {
        "question": "Which playlist has the highest number of tracks?",
        "query": "SELECT playlists.name FROM playlists INNER JOIN playlist_tracks ON playlists.id = playlist_tracks.playlist_id GROUP BY playlists.id ORDER BY COUNT(playlist_tracks.track_id) DESC LIMIT 1;"
    },
    {
        "question": "What is the total revenue generated from sales of tracks composed by 'AC/DC'?",
        "query": "SELECT SUM(invoice_items.unit_price * invoice_items.quantity) FROM invoice_items INNER JOIN tracks ON invoice_items.track_id = tracks.id WHERE tracks.composer = 'AC/DC';"
    },
    {
        "question": "List the names of all playlists and the total duration of the tracks in each playlist.",
        "query": "SELECT T3.name, SUM(T2.milliseconds) FROM playlist_track AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid INNER JOIN playlists AS T3 ON T1.playlistid = T3.playlistid GROUP BY T3.name;"
    },
    {
        "question": "How many tracks are there in the album with the longest title?",
        "query": "SELECT COUNT(*) FROM tracks WHERE albumid = (SELECT albumid FROM albums ORDER BY LENGTH(title) DESC LIMIT 1);"
    },
    {
        "question": "List the names of all tracks that cost more than the average track price.",
        "query": "SELECT name FROM tracks WHERE unitprice > (SELECT AVG(unitprice) FROM tracks);"
    },
    {
        "question": "List the names of all customers who live in the 'USA' and have made more than 50 purchases.",
        "query": "SELECT firstname, lastname FROM customers WHERE country = 'USA' AND customerid IN (SELECT customerid FROM invoices GROUP BY customerid HAVING COUNT(*) > 50);"
    },
    {
        "question": "What is the total amount spent by the customer with the highest total spending?",
        "query": "SELECT SUM(total) FROM invoices WHERE customerid = (SELECT customerid FROM invoices GROUP BY customerid ORDER BY SUM(total) DESC LIMIT 1);"
    },
    {
        "question": "List the names of all employees and the number of customers they support.",
        "query": "SELECT employees.firstname, employees.lastname, COUNT(customers.customerid) FROM employees INNER JOIN customers ON employees.employeeid = customers.supportrepid GROUP BY employees.firstname, employees.lastname;"
    },
    {
        "question": "What is the name of the genre with the highest average track length (in milliseconds)?",
        "query": "SELECT genres.name FROM genres INNER JOIN tracks ON genres.genreid = tracks.genreid GROUP BY genres.name ORDER BY AVG(tracks.milliseconds) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all media types and the average unit price of tracks associated with each media type.",
        "query": "SELECT media_types.name, AVG(tracks.unitprice) FROM media_types INNER JOIN tracks ON media_types.mediatypeid = tracks.mediatypeid GROUP BY media_types.name;"
    },
    {
        "question": "What is the total number of tracks purchased by customers in 'Canada'?",
        "query": "SELECT SUM(invoice_items.quantity) FROM invoice_items INNER JOIN invoices ON invoice_items.invoiceid = invoices.invoiceid INNER JOIN customers ON invoices.customerid = customers.customerid WHERE customers.country = 'Canada';"
    },
    {
        "question": "List the names of all the Rock tracks.",
        "query": "SELECT tracks.name FROM tracks INNER JOIN genres ON tracks.genre_id = genres.genre_id WHERE genres.name = 'Rock';"
    },
    {
        "question": "What are the names of the albums released after 2010?",
        "query": "SELECT title FROM albums WHERE strftime('%Y', release_date) > '2010';"
    },
    {
        "question": "List the titles of albums by artist 'AC/DC'.",
        "query": "SELECT albums.title FROM albums INNER JOIN artists ON albums.artist_id = artists.artist_id WHERE artists.name = 'AC/DC';"
    },
    {
        "question": "What is the total number of tracks on each album?",
        "query": "SELECT albums.title, COUNT(tracks.track_id) FROM albums INNER JOIN tracks ON albums.album_id = tracks.album_id GROUP BY albums.title;"
    },
    {
        "question": "List the names of customers who have made more than 50 purchases.",
        "query": "SELECT first_name, last_name FROM customers WHERE total_purchases > 50;"
    },
    {
        "question": "What is the average total spent by customers in each country?",
        "query": "SELECT country, AVG(total_spent) FROM customers GROUP BY country;"
    },
    {
        "question": "List the names of employees who have a salary greater than the average salary of all employees.",
        "query": "SELECT name FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);"
    },
    {
        "question": "Find the name of the department with the highest average salary.",
        "query": "SELECT d.name FROM departments AS d JOIN employees AS e ON d.id = e.department_id GROUP BY d.name ORDER BY AVG(e.salary) DESC LIMIT 1;"
    },
    {
        "question": "Find the names of all players inducted into the Hall of Fame in the year 2013.",
        "query": "SELECT player_id FROM hall_of_fame WHERE yearid = 2013 AND inducted = 'Y'"
    },
    {
        "question": "How many players were inducted into the Hall of Fame by the BBWAA?",
        "query": "SELECT COUNT(*) FROM hall_of_fame WHERE votedby = 'BBWAA' AND inducted = 'Y'"
    },
    {
        "question": "List the player IDs and years of all players who won the 'Rookie of the Year' award.",
        "query": "SELECT player_id, year FROM player_award WHERE award_id = 'Rookie of the Year'"
    },
    {
        "question": "What is the average salary of players in the year 2002?",
        "query": "SELECT AVG(salary) FROM salary WHERE year = 2002"
    },
    {
        "question": "Find the names of all players born in the USA.",
        "query": "SELECT name_first, name_last FROM player WHERE birth_country = 'USA'"
    },
    {
        "question": "List all awards won by player 'bonhati01'.",
        "query": "SELECT award_id FROM player_award WHERE player_id = 'bonhati01'"
    },
    {
        "question": "Find the maximum salary paid by team 'CHN' in the year 1991.",
        "query": "SELECT MAX(salary) FROM salary WHERE team_id = 'CHN' AND year = 1991"
    },
    {
        "question": "How many players were born in the year 1962?",
        "query": "SELECT COUNT(*) FROM player WHERE birth_year = '1962.0'"
    },
    {
        "question": "List the player IDs of all players who received votes for the 'MVP' award in the year 1988.",
        "query": "SELECT player_id FROM player_award_vote WHERE award_id = 'MVP' AND year = 1988"
    },
    {
        "question": "What is the total salary paid by team 'SLN' in the year 2012?",
        "query": "SELECT SUM(salary) FROM salary WHERE team_id = 'SLN' AND year = 2012"
    },
    {
        "question": "Find the names of all players who died in the year 2006.",
        "query": "SELECT name_first, name_last FROM player WHERE death_year = '2006.0'"
    },
    {
        "question": "List all players inducted into the Hall of Fame in the 'Player' category.",
        "query": "SELECT player_id FROM hall_of_fame WHERE category = 'Player' AND inducted = 'Y'"
    },
    {
        "question": "What is the average number of ballots cast for Hall of Fame inductions in the year 1985?",
        "query": "SELECT AVG(ballots) FROM hall_of_fame WHERE yearid = 1985"
    },
    {
        "question": "Find the names of all players who won the 'Cy Young' award.",
        "query": "SELECT T2.name_first, T2.name_last FROM player_award AS T1 INNER JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T1.award_id = 'Cy Young'"
    },
    {
        "question": "List the player IDs and years of all players who won an award in the 'AL' league.",
        "query": "SELECT player_id, year FROM player_award WHERE league_id = 'AL'"
    },
    {
        "question": "What is the total salary paid by all teams in the 'NL' league in the year 2011?",
        "query": "SELECT SUM(salary) FROM salary WHERE league_id = 'NL' AND year = 2011"
    },
    {
        "question": "Find the names of all players born in the 'MA' state.",
        "query": "SELECT name_first, name_last FROM player WHERE birth_state = 'MA'"
    },
    {
        "question": "List all players who were inducted into the Hall of Fame by 'Veterans'.",
        "query": "SELECT player_id FROM hall_of_fame WHERE votedby = 'Veterans' AND inducted = 'Y'"
    },
    {
        "question": "What is the minimum salary paid by team 'WAS' in the year 1999?",
        "query": "SELECT MIN(salary) FROM salary WHERE team_id = 'WAS' AND year = 1999"
    },
    {
        "question": "Find the names of all players who died in the 'NY' state.",
        "query": "SELECT name_first, name_last FROM player WHERE death_state = 'NY'"
    },
    {
        "question": "List the player IDs and years of all players who won an award with a tie.",
        "query": "SELECT player_id, year FROM player_award WHERE tie = 'Y'"
    },
    {
        "question": "What is the average number of points won for the 'MVP' award in the year 1988?",
        "query": "SELECT AVG(points_won) FROM player_award_vote WHERE award_id = 'MVP' AND year = 1988"
    },
    {
        "question": "Find the names of all players born in the city 'Ewing'.",
        "query": "SELECT name_first, name_last FROM player WHERE birth_city = 'Ewing'"
    },
    {
        "question": "List all players inducted into the Hall of Fame in the 'Manager' category.",
        "query": "SELECT player_id FROM hall_of_fame WHERE category = 'Manager' AND inducted = 'Y'"
    },
    {
        "question": "What is the maximum number of votes received for Hall of Fame inductions in the year 1950?",
        "query": "SELECT MAX(votes) FROM hall_of_fame WHERE yearid = 1950"
    },
    {
        "question": "Find the names of all players who won the 'Babe Ruth Award' in the year 1956.",
        "query": "SELECT T2.name_first, T2.name_last FROM player_award AS T1 INNER JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T1.award_id = 'Babe Ruth Award' AND T1.year = 1956"
    },
    {
        "question": "List the player IDs and years of all players who won an award in the 'NL' league in the year 1977.",
        "query": "SELECT player_id, year FROM player_award WHERE league_id = 'NL' AND year = 1977"
    },
    {
        "question": "What is the total salary paid by team 'BAL' in the year 2002?",
        "query": "SELECT SUM(salary) FROM salary WHERE team_id = 'BAL' AND year = 2002"
    },
    {
        "question": "Find the names of all players born in the 'VA' state.",
        "query": "SELECT name_first, name_last FROM player WHERE birth_state = 'VA'"
    },
    {
        "question": "List all players who were inducted into the Hall of Fame by 'Old Timers'.",
        "query": "SELECT player_id FROM hall_of_fame WHERE votedby = 'Old Timers' AND inducted = 'Y'"
    },
    {
        "question": "What is the minimum salary paid by team 'MON' in the year 2011?",
        "query": "SELECT MIN(salary) FROM salary WHERE team_id = 'MON' AND year = 2011"
    },
    {
        "question": "Find the names of all players who died in the 'CO' state.",
        "query": "SELECT name_first, name_last FROM player WHERE death_state = 'CO'"
    },
    {
        "question": "List the player IDs and years of all players who won an award with notes 'C1'.",
        "query": "SELECT player_id, year FROM player_award WHERE notes = 'C1'"
    },
    {
        "question": "What is the average number of points max for the 'Rookie of the Year' award in the year 1963?",
        "query": "SELECT AVG(points_max) FROM player_award_vote WHERE award_id = 'Rookie of the Year' AND year = 1963"
    },
    {
        "question": "Find the names of all players born in the city 'Nitro'.",
        "query": "SELECT name_first, name_last FROM player WHERE birth_city = 'Nitro'"
    },
    {
        "question": "List all players inducted into the Hall of Fame in the 'Umpire' category.",
        "query": "SELECT player_id FROM hall_of_fame WHERE category = 'Umpire' AND inducted = 'Y'"
    },
    {
        "question": "What is the maximum number of votes first received for the 'Cy Young' award in the year 1966?",
        "query": "SELECT MAX(votes_first) FROM player_award_vote WHERE award_id = 'Cy Young' AND year = 1966"
    },
    {
        "question": "Find the first and last names of players who were inducted into the hall of fame in 1985 and voted by 'Centennial'.",
        "query": "SELECT T2.name_first, T2.name_last FROM hall_of_fame AS T1 INNER JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T1.yearid = 1985 AND T1.votedby = 'Centennial'"
    },
    {
        "question": "Find the player_id, award_id, and year for awards given in the 'AL' league in 1956.",
        "query": "SELECT player_id, award_id, year FROM player_award WHERE league_id = 'AL' AND year = 1956"
    },
    {
        "question": "What is the total salary paid by the 'CHN' team across all years?",
        "query": "SELECT SUM(salary) FROM salary WHERE team_id = 'CHN'"
    },
    {
        "question": "List the first and last names of players born in 'Panama'.",
        "query": "SELECT name_first, name_last FROM player WHERE birth_country = 'Panama'"
    },
    {
        "question": "Find the number of players inducted into the Hall of Fame in each category.",
        "query": "SELECT category, COUNT(*) FROM hall_of_fame WHERE inducted = 'Y' GROUP BY category"
    },
    {
        "question": "What is the average salary for each team in the year 2012?",
        "query": "SELECT team_id, AVG(salary) FROM salary WHERE year = 2012 GROUP BY team_id"
    },
    {
        "question": "List the first and last names of players who died in the 'D.R.'.",
        "query": "SELECT name_first, name_last FROM player WHERE death_country = 'D.R.'"
    },
    {
        "question": "Find the number of awards won by each player.",
        "query": "SELECT player_id, COUNT(*) FROM player_award GROUP BY player_id"
    },
    {
        "question": "What is the average number of points won for each award in the year 1988?",
        "query": "SELECT award_id, AVG(points_won) FROM player_award_vote WHERE year = 1988 GROUP BY award_id"
    },
    {
        "question": "List the first and last names of players born in 'Guam'.",
        "query": "SELECT name_first, name_last FROM player WHERE birth_country = 'Guam'"
    },
    {
        "question": "Find the number of times each player was voted for an award.",
        "query": "SELECT player_id, COUNT(*) FROM player_award_vote GROUP BY player_id"
    },
    {
        "question": "What is the total salary paid by each team across all years?",
        "query": "SELECT team_id, SUM(salary) FROM salary GROUP BY team_id"
    },
    {
        "question": "Find the player_id and year inducted for all players inducted into the Hall of Fame by 'BBWAA'.",
        "query": "SELECT player_id, yearid FROM hall_of_fame WHERE votedby = 'BBWAA' AND inducted = 'Y'"
    },
    {
        "question": "List the award_id and year for all awards won by player 'machama01'.",
        "query": "SELECT award_id, year FROM player_award WHERE player_id = 'machama01'"
    },
    {
        "question": "What is the average salary for all players in the year 1999?",
        "query": "SELECT AVG(salary) FROM salary WHERE year = 1999"
    },
    {
        "question": "Find the number of players inducted into the Hall of Fame in each year.",
        "query": "SELECT yearid, COUNT(*) FROM hall_of_fame WHERE inducted = 'Y' GROUP BY yearid"
    },
    {
        "question": "What is the average number of points won for the 'MVP' award across all years?",
        "query": "SELECT AVG(points_won) FROM player_award_vote WHERE award_id = 'MVP'"
    },
    {
        "question": "List the first and last names of players who have a birth year of 1962.",
        "query": "SELECT name_first, name_last FROM player WHERE birth_year = 1962"
    },
    {
        "question": "Find the number of awards given in each league.",
        "query": "SELECT league_id, COUNT(*) FROM player_award GROUP BY league_id"
    },
    {
        "question": "What is the total salary paid for each year?",
        "query": "SELECT year, SUM(salary) FROM salary GROUP BY year"
    },
    {
        "question": "List the names of players who have won the 'Babe Ruth Award'.",
        "query": "SELECT T2.name_first, T2.name_last FROM player_award AS T1 INNER JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T1.award_id = 'Babe Ruth Award'"
    },
    {
        "question": "What are the different categories in the hall of fame?",
        "query": "SELECT DISTINCT category FROM hall_of_fame"
    },
    {
        "question": "Find the average weight of players born before 1950.",
        "query": "SELECT AVG(weight) FROM player WHERE CAST(birth_year AS REAL) < 1950"
    },
    {
        "question": "List the player IDs of players who have won an award with a tie.",
        "query": "SELECT player_id FROM player_award WHERE tie = 'Y'"
    },
    {
        "question": "What is the maximum salary given in the year 2012?",
        "query": "SELECT MAX(salary) FROM salary WHERE year = 2012"
    },
    {
        "question": "List the player IDs and names of players who were born in 'USA' and have won the 'Rookie of the Year' award.",
        "query": "SELECT T1.player_id, T2.name_first, T2.name_last FROM player_award AS T1 INNER JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T1.award_id = 'Rookie of the Year' AND T2.birth_country = 'USA'"
    },
    {
        "question": "What is the name of the player who was inducted into the hall of fame in the year 1985 and voted by 'Centennial'?",
        "query": "SELECT T1.name_given FROM player AS T1 INNER JOIN hall_of_fame AS T2 ON T1.player_id = T2.player_id WHERE T2.yearid = 1985 AND T2.votedby = 'Centennial'"
    },
    {
        "question": "How many tracks are there in the playlist 'Grunge'??",
        "query": "SELECT COUNT(*) FROM PlaylistTrack WHERE PlaylistId = (SELECT PlaylistId FROM Playlist WHERE Name = 'Grunge');"
    },
    {
        "question": "What is the total cost of all tracks purchased by the customer with CustomerId 1?",
        "query": "SELECT SUM(T2.UnitPrice) FROM InvoiceLine AS T1 INNER JOIN Track AS T2 ON T1.TrackId = T2.TrackId WHERE T1.InvoiceId IN (SELECT InvoiceId FROM Invoice WHERE CustomerId = 1);"
    },
    {
        "question": "List the names of all artists whose tracks are included in the 'Grunge' playlist.",
        "query": "SELECT T4.Name FROM Playlist AS T1 INNER JOIN PlaylistTrack AS T2 ON T1.PlaylistId = T2.PlaylistId INNER JOIN Track AS T3 ON T2.TrackId = T3.TrackId INNER JOIN Album AS T5 ON T3.AlbumId = T5.AlbumId INNER JOIN Artist AS T4 ON T5.ArtistId = T4.ArtistId WHERE T1.Name = 'Grunge';"
    },
    {
        "question": "What is the name of the album with the shortest duration?",
        "query": "SELECT title FROM albums ORDER BY (SELECT SUM(milliseconds) FROM tracks WHERE tracks.album_id = albums.album_id) ASC LIMIT 1;"
    },
    {
        "question": "Which genre has the highest average track unit price?",
        "query": "SELECT g.name FROM genres g JOIN tracks t ON g.genre_id = t.genre_id GROUP BY g.genre_id ORDER BY AVG(t.unit_price) DESC LIMIT 1;"
    },
    {
        "question": "What are the names of the tracks purchased by the customer with the highest support rep id?",
        "query": "SELECT T3.name FROM customers AS T1 INNER JOIN invoices AS T2 ON T1.customer_id = T2.customer_id INNER JOIN invoice_items AS T4 ON T2.invoice_id = T4.invoice_id INNER JOIN tracks AS T3 ON T4.track_id = T3.track_id ORDER BY T1.support_rep_id DESC LIMIT 1;"
    },
    {
        "question": "Which products have been ordered by customer 'David Lee'?",
        "query": "SELECT p.product_name FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id INNER JOIN orders o ON oi.order_id = o.order_id INNER JOIN customers c ON o.customer_id = c.customer_id WHERE c.customer_name = 'David Lee'"
    },
    {
        "question": "List the customers who have ordered 'Laptop'.",
        "query": "SELECT c.customer_name FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id WHERE p.product_name = 'Laptop'"
    },
    {
        "question": "What is the average quantity of 'Tablet' ordered in each order?",
        "query": "SELECT AVG(oi.quantity) AS average_quantity FROM order_items oi INNER JOIN products p ON oi.product_id = p.product_id WHERE p.product_name = 'Tablet'"
    },
    {
        "question": "Which customer placed the order with the highest total value? Return the customer's name and the order total.",
        "query": "SELECT c.customer_name, SUM(oi.quantity * oi.unit_price) AS order_total FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id GROUP BY c.customer_name ORDER BY order_total DESC LIMIT 1"
    },
    {
        "question": "How many orders were placed in each month of the year 2023?",
        "query": "SELECT STRFTIME('%Y-%m', order_date) AS order_month, COUNT(*) AS order_count FROM orders WHERE STRFTIME('%Y', order_date) = '2023' GROUP BY order_month"
    },
    {
        "question": "List all products with a unit price greater than $500.",
        "query": "SELECT product_name FROM products WHERE unit_price > 500"
    },
    {
        "question": "Find the order IDs and total values for orders containing more than 2 different items.",
        "query": "SELECT order_id, SUM(quantity * unit_price) AS total_value FROM order_items GROUP BY order_id HAVING COUNT(DISTINCT product_id) > 2"
    },
    {
        "question": "List the titles of albums by AC/DC that have an average track length greater than 5 minutes.",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T2.artistid = ( SELECT artistid FROM artists WHERE name = 'AC/DC' ) GROUP BY T2.title HAVING AVG(T1.milliseconds) > 300000;"
    },
    {
        "question": "List the titles of albums that have at least one track longer than 5 minutes (300000 milliseconds).",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T1.milliseconds > 300000 GROUP BY T2.title;"
    },
    {
        "question": "What are the names of the artists whose albums were released in the USA?",
        "query": "SELECT T2.name FROM albums AS T1 INNER JOIN artists AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.AlbumId IN (SELECT AlbumId FROM albums_sold WHERE Country = 'USA');"
    },
    {
        "question": "What are the names of the tracks that belong to the album with the highest unit price?",
        "query": "SELECT name FROM tracks WHERE AlbumId = (SELECT AlbumId FROM albums ORDER BY UnitPrice DESC LIMIT 1);"
    },
    {
        "question": "What is the total amount for order number 10?",
        "query": "SELECT TotalAmount FROM Orders WHERE OrderID = 10"
    },
    {
        "question": "List the names of all products in the 'Electronics' category.",
        "query": "SELECT ProductName FROM Products WHERE Category = 'Electronics'"
    },
    {
        "question": "What is the price of the product with ProductID 5?",
        "query": "SELECT Price FROM Products WHERE ProductID = 5"
    },
    {
        "question": "What is the total quantity of product with ProductID 5 ordered in all orders?",
        "query": "SELECT SUM(Quantity) FROM OrderItems WHERE ProductID = 5"
    },
    {
        "question": "List the names of customers who have placed orders for products in the 'Electronics' category.",
        "query": "SELECT T1.Name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN OrderItems AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T4.Category = 'Electronics'"
    },
    {
        "question": "What is the total revenue generated from sales of products in the 'Electronics' category?",
        "query": "SELECT SUM(T1.Quantity * T2.Price) FROM OrderItems AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Category = 'Electronics'"
    },
    {
        "question": "What is the name of the cheapest track?",
        "query": "SELECT name FROM tracks ORDER BY unitprice ASC LIMIT 1;"
    },
    {
        "question": "What is the total duration of all tracks composed by 'Angus Young'?",
        "query": "SELECT SUM(milliseconds) FROM tracks WHERE composer = 'Angus Young';"
    },
    {
        "question": "List all albums and their total track length in seconds.",
        "query": "SELECT Album.Title, SUM(Track.Milliseconds) / 1000 FROM Album JOIN Track ON Album.AlbumId = Track.AlbumId GROUP BY Album.Title;"
    },
    {
        "question": "List the names of the tracks that belong to the 'Alternative & Punk' genre and are less than 4 minutes long.",
        "query": "SELECT name FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Alternative & Punk') AND milliseconds < 240000;"
    },
    {
        "question": "List the names of the customers who have purchased tracks from the album 'Let There Be Rock'?",
        "query": "SELECT T3.firstname, T3.lastname FROM invoicelines AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid INNER JOIN customers AS T3 ON T1.invoiceid = T3.customerid WHERE T2.albumid = (SELECT albumid FROM albums WHERE title = 'Let There Be Rock');"
    },
    {
        "question": "What is the total revenue generated from the sales of tracks in the 'Metal' genre?",
        "query": "SELECT SUM(T1.unitprice * T1.quantity) FROM invoicelines AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid WHERE T2.genreid = (SELECT genreid FROM genres WHERE name = 'Metal');"
    },
    {
        "question": "List the names of the employees and the total number of invoices they have processed.",
        "query": "SELECT T2.firstname, T2.lastname, COUNT(T1.invoiceid) FROM invoices AS T1 INNER JOIN employees AS T2 ON T1.supportrepid = T2.employeeid GROUP BY T2.employeeid;"
    },
    {
        "question": "What are the names of the tracks that belong to the same genre as the track 'For Those About To Rock (We Salute You)'?",
        "query": "SELECT name FROM tracks WHERE genreid = (SELECT genreid FROM tracks WHERE name = 'For Those About To Rock (We Salute You)');"
    },
    {
        "question": "What is the average length of tracks in the 'Jazz' playlist?",
        "query": "SELECT AVG(milliseconds) FROM tracks WHERE track_id IN (SELECT track_id FROM playlist_tracks WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Jazz'));"
    },
    {
        "question": "List all playlists that contain tracks composed by 'Johann Sebastian Bach'.",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN playlist_tracks AS T3 ON T1.track_id = T3.track_id INNER JOIN playlists AS T2 ON T3.playlist_id = T2.playlist_id WHERE T1.composer = 'Johann Sebastian Bach';"
    },
    {
        "question": "What is the total cost of all tracks in the 'Brazilian Music' playlist?",
        "query": "SELECT SUM(unitprice) FROM tracks WHERE track_id IN (SELECT track_id FROM playlist_tracks WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Brazilian Music'));"
    },
    {
        "question": "List the names of all playlists that have at least one track longer than 10 minutes (600000 milliseconds).",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN playlist_tracks AS T3 ON T1.track_id = T3.track_id INNER JOIN playlists AS T2 ON T3.playlist_id = T2.playlist_id WHERE T1.milliseconds > 600000 GROUP BY T2.name;"
    },
    {
        "question": "What is the average length of a track in the 'Classical' playlist?",
        "query": "SELECT AVG(T2.milliseconds) FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id WHERE T1.playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Classical');"
    },
    {
        "question": "Find the name and composer of the longest track in the 'Jazz' playlist.",
        "query": "SELECT T2.name, T2.composer FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id WHERE T1.playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Jazz') ORDER BY T2.milliseconds DESC LIMIT 1;"
    },
    {
        "question": "List the names of all the playlists and the total duration of tracks in each playlist.",
        "query": "SELECT T3.name, SUM(T1.milliseconds) FROM tracks AS T1 INNER JOIN playlist_track AS T2 ON T1.trackid = T2.trackid INNER JOIN playlists AS T3 ON T2.playlistid = T3.playlistid GROUP BY T3.name;"
    },
    {
        "question": "What is the name and genre of the track with the lowest unit price?",
        "query": "SELECT T1.name, T3.name FROM tracks AS T1 INNER JOIN genres AS T3 ON T1.genreid = T3.genreid ORDER BY T1.unitprice ASC LIMIT 1;"
    },
    {
        "question": "Which album has the shortest average track length?",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid GROUP BY T2.title ORDER BY AVG(T1.milliseconds) ASC LIMIT 1;"
    },
    {
        "question": "What are the different media types available?",
        "query": "SELECT DISTINCT name FROM media_types;"
    },
    {
        "question": "List the tracks and their corresponding media type names.",
        "query": "SELECT T1.name, T2.name FROM tracks AS T1 INNER JOIN media_types AS T2 ON T1.media_type_id = T2.media_type_id;"
    },
    {
        "question": "How many tracks are of the 'MPEG audio file' media type?",
        "query": "SELECT COUNT(*) FROM tracks AS T1 INNER JOIN media_types AS T2 ON T1.media_type_id = T2.media_type_id WHERE T2.name = 'MPEG audio file';"
    },
    {
        "question": "List the names of the tracks and their genres.",
        "query": "SELECT T1.name, T2.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genre_id = T2.genre_id;"
    },
    {
        "question": "How many tracks belong to the 'Rock' genre?",
        "query": "SELECT COUNT(*) FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genre_id = T2.genre_id WHERE T2.name = 'Rock';"
    },
    {
        "question": "List the tracks that belong to the 'Rock' genre and are longer than 5 minutes.",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genre_id = T2.genre_id WHERE T2.name = 'Rock' AND T1.milliseconds > 300000;"
    },
    {
        "question": "Which genre is the most popular (sold the most tracks)?",
        "query": "SELECT g.name FROM genres g JOIN tracks t ON g.genre_id = t.genre_id JOIN invoice_items ii ON t.track_id = ii.track_id GROUP BY g.name ORDER BY SUM(ii.quantity) DESC LIMIT 1;"
    },
    {
        "question": "What is the total revenue generated from sales to customers in the USA?",
        "query": "SELECT SUM(total) FROM invoices WHERE customer_id IN (SELECT customer_id FROM customers WHERE country = 'USA');"
    },
    {
        "question": "List the names of the tracks in the playlist 'Music'?",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.trackid WHERE T1.playlist_id = (SELECT playlistid FROM playlists WHERE name = 'Music');"
    },
    {
        "question": "Which album has the highest average track length (in milliseconds)?",
        "query": "SELECT albumid FROM tracks GROUP BY albumid ORDER BY AVG(milliseconds) DESC LIMIT 1;"
    },
    {
        "question": "List the names of playlists that contain tracks from the album 'Big Ones'?",
        "query": "SELECT T3.name FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid INNER JOIN playlist_tracks AS T4 ON T2.trackid = T4.track_id INNER JOIN playlists AS T3 ON T4.playlist_id = T3.playlistid WHERE T1.title = 'Big Ones';"
    },
    {
        "question": "What are the titles of the albums sold by the employee with the highest support rep id?",
        "query": "SELECT T2.title FROM customers AS T1 INNER JOIN albums AS T2 ON T1.supportrepid = T2.albumid ORDER BY T1.supportrepid DESC LIMIT 20;"
    },
    {
        "question": "List the names of all customers and the names of their support representatives.",
        "query": "SELECT customers.firstname, customers.lastname, employees.firstname, employees.lastname FROM customers INNER JOIN employees ON customers.supportrepid = employees.employeeid;"
    },
    {
        "question": "What is the total cost of all tracks purchased by customers in the USA?",
        "query": "SELECT SUM(T3.unitprice * T2.quantity) FROM customers AS T1 INNER JOIN invoicelines AS T2 ON T1.customerid = T2.invoiceid INNER JOIN tracks AS T3 ON T2.trackid = T3.trackid WHERE T1.country = 'USA';"
    },
    {
        "question": "What are the names of the tracks that belong to the 'Alternative & Punk' genre and are longer than 5 minutes?",
        "query": "SELECT name FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Alternative & Punk') AND milliseconds > 300000;"
    },
    {
        "question": "List the customers who have made a purchase in the 'Rock' genre.",
        "query": "SELECT DISTINCT T3.firstname, T3.lastname FROM tracks AS T1 INNER JOIN invoice_items AS T2 ON T1.trackid = T2.trackid INNER JOIN invoices AS T3 ON T2.invoiceid = T3.invoiceid WHERE T1.genreid = (SELECT genreid FROM genres WHERE name = 'Rock');"
    },
    {
        "question": "What is the total amount spent by customers from the USA?",
        "query": "SELECT SUM(total) FROM invoices WHERE customerid IN (SELECT customerid FROM customers WHERE country = 'USA');"
    },
    {
        "question": "What is the name of the artist with the most albums?",
        "query": "SELECT name FROM artists WHERE artist_id IN (SELECT artist_id FROM albums GROUP BY artist_id ORDER BY COUNT(album_id) DESC LIMIT 1);"
    },
    {
        "question": "What are the names of the tracks that belong to the 'Alternative & Punk' genre and are composed by Angus Young?",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Alternative & Punk' AND T1.composer = 'Angus Young';"
    },
    {
        "question": "List the names of all customers who made a purchase in 2009.",
        "query": "SELECT T2.firstname, T2.lastname FROM invoices AS T1 INNER JOIN customers AS T2 ON T1.customerid = T2.customerid WHERE STRFTIME('%Y', T1.invoicedate) = '2009';"
    },
    {
        "question": "List the albums with their respective artists.",
        "query": "SELECT T1.title, T2.name FROM albums AS T1 INNER JOIN artists AS T2 ON T1.artist_id = T2.artist_id;"
    },
    {
        "question": "List the artists and the number of albums they have released.",
        "query": "SELECT T2.name, COUNT(T1.album_id) FROM albums AS T1 INNER JOIN artists AS T2 ON T1.artist_id = T2.artist_id GROUP BY T2.name;"
    },
    {
        "question": "What is the average unit price of tracks composed by Steve Harris?",
        "query": "SELECT AVG(unitprice) FROM tracks WHERE composer = 'Steve Harris';"
    },
    {
        "question": "List the names of tracks and their corresponding album titles for all tracks composed by Angus Young.",
        "query": "SELECT T1.name, T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T1.composer = 'Angus Young';"
    },
    {
        "question": "What are the names of the artists who have released more than 10 albums?",
        "query": "SELECT T2.name FROM albums AS T1 INNER JOIN artists AS T2 ON T1.artistid = T2.artistid GROUP BY T2.name HAVING COUNT(T1.albumid) > 10;"
    },
    {
        "question": "What is the genre of the track with TrackId 10?",
        "query": "SELECT g.Name FROM Track t JOIN Genre g ON t.GenreId = g.GenreId WHERE t.TrackId = 10;"
    },
    {
        "question": "What are the tracks in the playlist 'Music'.",
        "query": "SELECT t.Name FROM PlaylistTrack pt JOIN Track t ON pt.TrackId = t.TrackId WHERE pt.PlaylistId = (SELECT PlaylistId FROM Playlist WHERE Name = 'Music');"
    },
    {
        "question": "List all the customers supported by employee with EmployeeId 3.",
        "query": "SELECT * FROM Customer WHERE SupportRepId = 3;"
    },
    {
        "question": "List the names of the albums by AC/DC.",
        "query": "SELECT T2.title FROM artists AS T1 INNER JOIN albums AS T2 ON T1.artistid = T2.artistid WHERE T1.name = 'AC/DC';"
    },
    {
        "question": "How many albums are there by AC/DC?",
        "query": "SELECT COUNT(*) FROM albums WHERE artistid = (SELECT artistid FROM artists WHERE name = 'AC/DC');"
    },
    {
        "question": "What is the total number of tracks composed by each artist?",
        "query": "SELECT T2.name, COUNT(T1.trackid) FROM tracks AS T1 INNER JOIN albums AS T3 ON T1.albumid = T3.albumid INNER JOIN artists AS T2 ON T3.artistid = T2.artistid GROUP BY T2.name;"
    },
    {
        "question": "List the names of all tracks that are part of the playlist 'Music' and belong to the 'Rock' genre.",
        "query": "SELECT T2.name FROM playlist_track AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid WHERE T1.playlistid = (SELECT playlistid FROM playlists WHERE name = 'Music') AND T2.genreid = (SELECT genreid FROM genres WHERE name = 'Rock');"
    },
    {
        "question": "List the products ordered by customer 'David Lee', along with their quantities and prices.",
        "query": "SELECT p.product_name, oi.quantity, p.price FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id WHERE c.customer_name = 'David Lee'"
    },
    {
        "question": "What is the average price of products in each category?",
        "query": "SELECT category_name, AVG(price) AS average_price FROM products GROUP BY category_name"
    },
    {
        "question": "List the order IDs and order dates for all orders placed in 2023.",
        "query": "SELECT order_id, order_date FROM orders WHERE strftime('%Y', order_date) = '2023'"
    },
    {
        "question": "Find the customer who placed the order with the highest total value.",
        "query": "SELECT c.customer_name FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id GROUP BY o.order_id ORDER BY SUM(oi.quantity * p.price) DESC LIMIT 1"
    },
    {
        "question": "What is the total revenue generated from each product category?",
        "query": "SELECT p.category_name, SUM(oi.quantity * p.price) AS total_revenue FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.category_name"
    },
    {
        "question": "List the customers who have ordered products from more than one category.",
        "query": "SELECT c.customer_name FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id GROUP BY c.customer_name HAVING COUNT(DISTINCT p.category_name) > 1"
    },
    {
        "question": "What is the total duration of all the tracks on the album 'The White Album'?",
        "query": "SELECT SUM(milliseconds) FROM tracks WHERE album_id = (SELECT albumid FROM albums WHERE title = 'The White Album')"
    },
    {
        "question": "List the names of all albums released after 1975.",
        "query": "SELECT title FROM albums WHERE strftime('%Y', release_date) > '1975'"
    },
    {
        "question": "List the names of all artists whose name starts with 'A'.",
        "query": "SELECT name FROM artists WHERE name LIKE 'A%'"
    },
    {
        "question": "What is the name of the artist who composed the track 'Let It Be'?",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.album_id = T2.albumid INNER JOIN artists AS T3 ON T2.artistid = T3.artistid WHERE T1.name = 'Let It Be'"
    },
    {
        "question": "List the names of all albums by the artist 'Aerosmith'.",
        "query": "SELECT title FROM albums WHERE artistid = (SELECT artistid FROM artists WHERE name = 'Aerosmith')"
    },
    {
        "question": "What are the names and release dates of all albums in the 'Pop' genre?",
        "query": "SELECT T1.title, T1.release_date FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.album_id WHERE T2.genre_id = (SELECT genreid FROM genres WHERE name = 'Pop')"
    },
    {
        "question": "How many albums are there in each genre?",
        "query": "SELECT T2.name, COUNT(T1.albumid) FROM albums AS T1 INNER JOIN tracks AS T3 ON T1.albumid = T3.album_id INNER JOIN genres AS T2 ON T3.genre_id = T2.genreid GROUP BY T2.name"
    },
    {
        "question": "What is the name of the shortest track on the album 'Revolver'?",
        "query": "SELECT name FROM tracks WHERE album_id = (SELECT albumid FROM albums WHERE title = 'Revolver') ORDER BY milliseconds ASC LIMIT 1"
    },
    {
        "question": "What is the name of the artist who composed the track 'Enter Sandman'?",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN artists AS T2 ON T1.composer = T2.name WHERE T1.name = 'Enter Sandman';"
    },
    {
        "question": "List the names of all tracks in the 'Metal' genre along with their album titles.",
        "query": "SELECT T1.name, T3.title FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid INNER JOIN albums AS T3 ON T1.albumid = T3.albumid WHERE T2.name = 'Metal';"
    },
    {
        "question": "What is the total duration of all the tracks in the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT SUM(T2.milliseconds) FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid WHERE T1.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "List the names of the tracks that belong to the 'Rock' genre and have a duration longer than 5 minutes.",
        "query": "SELECT T2.name FROM genres AS T1 INNER JOIN tracks AS T2 ON T1.genreid = T2.genreid WHERE T1.name = 'Rock' AND T2.milliseconds > 300000;"
    },
    {
        "question": "What are the titles of the albums that have tracks costing more than $1.00?",
        "query": "SELECT T1.title FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid WHERE T2.unitprice > 1.00 GROUP BY T1.title;"
    },
    {
        "question": "What is the total revenue generated from the sales of tracks in the 'Rock' genre?",
        "query": "SELECT SUM(T2.unitprice * T2.bytes) FROM genres AS T1 INNER JOIN tracks as T2 ON T1.genreid = T2.genreid WHERE T1.name = 'Rock';"
    },
    {
        "question": "List the names of all tracks that belong to the 'Alternative & Punk' genre and cost more than $0.99.",
        "query": "SELECT name FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Alternative & Punk') AND unitprice > 0.99;"
    },
    {
        "question": "What is the total revenue generated from the sales of tracks composed by 'Angus Young'?",
        "query": "SELECT SUM(unitprice) FROM tracks WHERE composer = 'Angus Young';"
    },
    {
        "question": "List the product names and their respective prices for all products in the 'Electronics' category.",
        "query": "SELECT product_name, price FROM products WHERE category = 'Electronics'"
    },
    {
        "question": "What is the average price of products in the 'Clothing' category?",
        "query": "SELECT AVG(price) FROM products WHERE category = 'Clothing'"
    },
    {
        "question": "List the order IDs and total amounts for orders placed in the month of June 2024.",
        "query": "SELECT order_id, order_total FROM orders WHERE order_date BETWEEN '2024-06-01' AND '2024-06-30'"
    },
    {
        "question": "What is the most expensive product in each category?",
        "query": "SELECT category, product_name, price FROM products WHERE (category, price) IN (SELECT category, MAX(price) FROM products GROUP BY category)"
    },
    {
        "question": "Which product has been ordered the most times?",
        "query": "SELECT p.product_name FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_name ORDER BY COUNT(oi.order_item_id) DESC LIMIT 1"
    },
    {
        "question": "List the customers who have placed orders with a total amount greater than $500.",
        "query": "SELECT c.customer_name FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_total > 500"
    },
    {
        "question": "List all invoices with their billing addresses.",
        "query": "SELECT InvoiceId, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode FROM Invoice;"
    },
    {
        "question": "What are the names and email addresses of all customers who have purchased the track 'Let There Be Rock'?",
        "query": "SELECT DISTINCT c.FirstName, c.LastName, c.Email FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId JOIN InvoiceLine il ON i.InvoiceId = il.InvoiceId JOIN Track t ON il.TrackId = t.TrackId WHERE t.Name = 'Let There Be Rock';"
    },
    {
        "question": "What is the total revenue generated from sales in each country?",
        "query": "SELECT BillingCountry, SUM(Total) AS TotalRevenue FROM Invoice GROUP BY BillingCountry ORDER BY TotalRevenue DESC;"
    },
    {
        "question": "Which media type is the most popular (has been sold the most)?",
        "query": "SELECT m.Name FROM MediaType m JOIN Track t ON m.MediaTypeId = t.MediaTypeId JOIN InvoiceLine il ON t.TrackId = il.TrackId GROUP BY m.MediaTypeId ORDER BY SUM(il.Quantity) DESC LIMIT 1;"
    },
    {
        "question": "What is the total length of all the tracks in the 'Grunge' playlist?",
        "query": "SELECT SUM(Milliseconds) FROM Track AS t JOIN PlaylistTrack AS pt ON t.TrackId = pt.TrackId JOIN Playlist AS p ON pt.PlaylistId = p.PlaylistId WHERE p.Name = 'Grunge';"
    },
    {
        "question": "List the names and email addresses of all employees.",
        "query": "SELECT FirstName, LastName, Email FROM Employee;"
    },
    {
        "question": "Who is the sales support agent for customer with CustomerId 5?",
        "query": "SELECT e.FirstName, e.LastName FROM Employee AS e JOIN Customer AS c ON e.EmployeeId = c.SupportRepId WHERE c.CustomerId = 5;"
    },
    {
        "question": "What is the total revenue for the year 2010?",
        "query": "SELECT SUM(Total) FROM Invoice WHERE InvoiceDate LIKE '2010%';"
    },
    {
        "question": "List all customers who have purchased tracks of the 'Jazz' genre.",
        "query": "SELECT DISTINCT c.FirstName, c.LastName FROM Customer AS c JOIN Invoice AS i ON c.CustomerId = i.CustomerId JOIN InvoiceLine AS il ON i.InvoiceId = il.InvoiceId JOIN Track AS t ON il.TrackId = t.TrackId JOIN Genre AS g ON t.GenreId = g.GenreId WHERE g.Name = 'Jazz';"
    },
    {
        "question": "List the names of all customers and the total amount they have spent on invoices.",
        "query": "SELECT T1.firstname, T1.lastname, SUM(T2.total) FROM customers AS T1 INNER JOIN invoices AS T2 ON T1.customerid = T2.customerid GROUP BY T1.customerid;"
    },
    {
        "question": "How many tracks are there in the playlist 'Brazilian Music'?",
        "query": "SELECT COUNT(*) FROM playlist_tracks WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Brazilian Music');"
    },
    {
        "question": "List the names of all tracks in the 'Grunge' playlist, ordered alphabetically.",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id WHERE T1.playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Grunge') ORDER BY T2.name;"
    },
    {
        "question": "What is the average unit price of tracks in the 'Rock' playlist?",
        "query": "SELECT AVG(unit_price) FROM tracks WHERE track_id IN (SELECT track_id FROM playlist_tracks WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Rock'));"
    },
    {
        "question": "How many playlists contain the track 'Dazed and Confused'?",
        "query": "SELECT COUNT(DISTINCT playlist_id) FROM playlist_tracks WHERE track_id = (SELECT track_id FROM tracks WHERE name = 'Dazed and Confused');"
    },
    {
        "question": "Find the names of all playlists that have more than 10 tracks.",
        "query": "SELECT name FROM playlists WHERE playlist_id IN (SELECT playlist_id FROM playlist_tracks GROUP BY playlist_id HAVING COUNT(*) > 10);"
    },
    {
        "question": "What is the total duration of all tracks in the album 'Big Ones'?",
        "query": "SELECT SUM(milliseconds) FROM tracks WHERE album_id = (SELECT album_id FROM albums WHERE title = 'Big Ones');"
    },
    {
        "question": "Which employee supports the most customers?",
        "query": "SELECT support_rep_id, COUNT(*) AS customer_count FROM customers GROUP BY support_rep_id ORDER BY customer_count DESC LIMIT 1;"
    },
    {
        "question": "What is the total value of invoices for customer with id 1?",
        "query": "SELECT SUM(total) FROM invoices WHERE customer_id = 1;"
    },
    {
        "question": "List the tracks purchased in invoice with id 1.",
        "query": "SELECT T3.name FROM invoice_items AS T1 INNER JOIN tracks AS T3 ON T1.track_id = T3.track_id WHERE T1.invoice_id = 1;"
    },
    {
        "question": "What are the names of the artists whose albums have tracks longer than 5 minutes (300000 milliseconds)?",
        "query": "SELECT T2.name FROM albums AS T1 INNER JOIN artists AS T2 ON T1.artist_id = T2.artist_id INNER JOIN tracks AS T3 ON T1.album_id = T3.album_id WHERE T3.milliseconds > 300000 GROUP BY T2.name;"
    },
    {
        "question": "List the names of customers who have purchased tracks from the album 'Fear Of The Dark'.",
        "query": "SELECT T4.first_name, T4.last_name FROM invoice_items AS T1 INNER JOIN invoices AS T2 ON T1.invoice_id = T2.invoice_id INNER JOIN tracks AS T3 ON T1.track_id = T3.track_id INNER JOIN customers AS T4 ON T2.customer_id = T4.customer_id WHERE T3.album_id = (SELECT album_id FROM albums WHERE title = 'Fear Of The Dark') GROUP BY T4.customer_id;"
    },
    {
        "question": "What is the average unit price of albums by each artist?",
        "query": "SELECT T2.name, AVG(T1.unitprice) FROM albums AS T1 INNER JOIN artists AS T2 ON T1.artistid = T2.artistid GROUP BY T2.name;"
    },
    {
        "question": "Find the name and birth year of all employees.",
        "query": "SELECT name, birth_year FROM employees;"
    },
    {
        "question": "What is the name and budget of the 'Sales' department?",
        "query": "SELECT name, budget FROM departments WHERE name = 'Sales';"
    },
    {
        "question": "Which employees were born after 1990?",
        "query": "SELECT name FROM employees WHERE birth_year > 1990;"
    },
    {
        "question": "List the names of employees in the 'Sales' department.",
        "query": "SELECT T1.name FROM employees AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.id WHERE T2.name = 'Sales';"
    },
    {
        "question": "What is the total budget of all departments?",
        "query": "SELECT SUM(budget) FROM departments;"
    },
    {
        "question": "Find the names of departments with a budget greater than $50,000.",
        "query": "SELECT name FROM departments WHERE budget > 50000;"
    },
    {
        "question": "List the names and birth years of employees in departments with a budget over $60,000.",
        "query": "SELECT T1.name, T1.birth_year FROM employees AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.id WHERE T2.budget > 60000;"
    },
    {
        "question": "What is the average birth year of all employees?",
        "query": "SELECT AVG(birth_year) FROM employees;"
    },
    {
        "question": "Find the department with the highest budget.",
        "query": "SELECT name FROM departments ORDER BY budget DESC LIMIT 1;"
    },
    {
        "question": "List the names of all tracks that belong to a playlist with the name 'Music'.",
        "query": "SELECT T3.name FROM playlist_track AS T1 INNER JOIN playlists AS T2 ON T1.playlistid = T2.playlistid INNER JOIN tracks AS T3 ON T1.trackid = T3.trackid WHERE T2.name = 'Music';"
    },
    {
        "question": "What is the name of the album with the track 'Dazed and Confused'?",
        "query": "SELECT title FROM albums WHERE albumid = (SELECT albumid FROM tracks WHERE name = 'Dazed and Confused');"
    },
    {
        "question": "What is the name of the genre with the lowest average track price?",
        "query": "SELECT name FROM genres WHERE genreid = (SELECT genreid FROM tracks GROUP BY genreid ORDER BY AVG(unitprice) ASC LIMIT 1);"
    },
    {
        "question": "What is the name of the artist who composed the most number of tracks?",
        "query": "SELECT composer FROM tracks GROUP BY composer ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all genres and the average unit price of tracks in that genre.",
        "query": "SELECT T1.name, AVG(T2.unitprice) FROM genres AS T1 INNER JOIN tracks AS T2 ON T1.genreid = T2.genreid GROUP BY T1.name;"
    },
    {
        "question": "What are the names of the albums that have tracks composed by 'Angus Young'?",
        "query": "SELECT T1.title FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid WHERE T2.composer = 'Angus Young';"
    },
    {
        "question": "List the names of customers who made purchases in 2009.",
        "query": "SELECT customers.firstname, customers.lastname FROM customers INNER JOIN invoices ON customers.customerid = invoices.customerid WHERE invoices.invoicedate LIKE '2009%';"
    },
    {
        "question": "Which genre is the most popular (has the most tracks)??",
        "query": "SELECT genres.name FROM genres INNER JOIN tracks ON genres.genreid = tracks.genreid GROUP BY genres.name ORDER BY COUNT(tracks.trackid) DESC LIMIT 1;"
    },
    {
        "question": "Who is the manager of each employee?",
        "query": "SELECT T1.firstname, T1.lastname, T2.firstname, T2.lastname FROM employees AS T1 LEFT JOIN employees AS T2 ON T1.reportsto = T2.employeeid;"
    },
    {
        "question": "List the names of all customers and their total spending.",
        "query": "SELECT T3.firstname, T3.lastname, SUM(T1.unitprice * T1.quantity) FROM invoice_items AS T1 INNER JOIN invoices AS T2 ON T1.invoiceid = T2.invoiceid INNER JOIN customers AS T3 ON T2.customerid = T3.customerid GROUP BY T3.customerid;"
    },
    {
        "question": "Which artist has the most tracks in the playlist '90\u2019s Music'?",
        "query": "SELECT T3.name FROM playlist_track AS T1 INNER JOIN playlists AS T2 ON T1.playlistid = T2.playlistid INNER JOIN tracks AS T4 ON T1.trackid = T4.trackid INNER JOIN albums AS T5 ON T4.albumid = T5.albumid INNER JOIN artists AS T3 ON T5.artistid = T3.artistid WHERE T2.name = '90\u2019s Music' GROUP BY T3.artistid ORDER BY COUNT(T1.trackid) DESC LIMIT 1;"
    },
    {
        "question": "What is the average length of tracks by AC/DC?",
        "query": "SELECT AVG(tracks.milliseconds) FROM tracks INNER JOIN albums ON tracks.album_id = albums.id INNER JOIN artists ON albums.artist_id = artists.id WHERE artists.name = 'AC/DC';"
    },
    {
        "question": "List the names and unit prices of all tracks in the 'Heavy Metal Classic' playlist, ordered by price descending.",
        "query": "SELECT tracks.name, tracks.unit_price FROM tracks INNER JOIN playlist_tracks ON tracks.id = playlist_tracks.track_id INNER JOIN playlists ON playlist_tracks.playlist_id = playlists.id WHERE playlists.name = 'Heavy Metal Classic' ORDER BY tracks.unit_price DESC;"
    },
    {
        "question": "What are the names of the artists whose albums have an average track length greater than 5 minutes (300000 milliseconds)?",
        "query": "SELECT artists.name FROM artists INNER JOIN albums ON artists.id = albums.artist_id INNER JOIN tracks ON albums.id = tracks.album_id GROUP BY artists.name HAVING AVG(tracks.milliseconds) > 300000;"
    },
    {
        "question": "What are the names of the tracks that cost more than $0.99 and belong to the 'Alternative & Punk' genre?",
        "query": "SELECT name FROM tracks WHERE unitprice > 0.99 AND genreid = (SELECT genreid FROM genres WHERE name = 'Alternative & Punk');"
    },
    {
        "question": "What is the total revenue generated from tracks composed by 'AC/DC'?",
        "query": "SELECT SUM(unitprice) FROM tracks WHERE composer = 'AC/DC';"
    },
    {
        "question": "Retrieve the names of all employees who work in the 'Sales' department.",
        "query": "SELECT emp_name FROM employees WHERE dept_id = (SELECT dept_id FROM departments WHERE dept_name = 'Sales');"
    },
    {
        "question": "Find the name of the department with the highest budget.",
        "query": "SELECT dept_name FROM departments ORDER BY budget DESC LIMIT 1;"
    },
    {
        "question": "List the names of all employees born after 1980.",
        "query": "SELECT emp_name FROM employees WHERE birth_year > 1980;"
    },
    {
        "question": "Which department has the most employees?",
        "query": "SELECT dept_name FROM departments WHERE dept_id = (SELECT dept_id FROM employees GROUP BY dept_id ORDER BY COUNT(*) DESC LIMIT 1);"
    },
    {
        "question": "List the names of all employees who are managers.",
        "query": "SELECT emp_name FROM employees WHERE emp_id IN (SELECT manager_id FROM departments);"
    },
    {
        "question": "List the names of all employees and their corresponding department names.",
        "query": "SELECT e.emp_name, d.dept_name FROM employees e JOIN departments d ON e.dept_id = d.dept_id;"
    },
    {
        "question": "Find the names of all departments that do not have a manager.",
        "query": "SELECT dept_name FROM departments WHERE manager_id IS NULL;"
    },
    {
        "question": "What is the name and budget of the department managed by 'John Smith'?",
        "query": "SELECT dept_name, budget FROM departments WHERE manager_id = (SELECT emp_id FROM employees WHERE emp_name = 'John Smith');"
    },
    {
        "question": "List all tracks with a composer starting with 'A'.",
        "query": "SELECT * FROM tracks WHERE composer LIKE 'A%';"
    },
    {
        "question": "How many tracks are there in the album with ID 1?",
        "query": "SELECT COUNT(*) FROM tracks WHERE albumid = 1;"
    },
    {
        "question": "What is the name of the shortest track composed by 'AC/DC'?",
        "query": "SELECT name FROM tracks WHERE composer = 'AC/DC' ORDER BY milliseconds ASC LIMIT 1;"
    },
    {
        "question": "What is the total amount spent by each customer on tracks?",
        "query": "SELECT customerid, SUM(unitprice * quantity) AS total_spent FROM invoicelines GROUP BY customerid;"
    },
    {
        "question": "List the names of customers who have purchased track ID 1.",
        "query": "SELECT T2.firstname, T2.lastname FROM invoicelines AS T1 INNER JOIN customers AS T2 ON T1.customerid = T2.customerid WHERE T1.trackid = 1;"
    },
    {
        "question": "What is the name of the most purchased track?",
        "query": "SELECT T2.name FROM invoicelines AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid GROUP BY T1.trackid ORDER BY SUM(T1.quantity) DESC LIMIT 1;"
    },
    {
        "question": "What is the name and contact name of the customer with CustomerID 1?",
        "query": "SELECT CustomerName, ContactName FROM Customers WHERE CustomerID = 1"
    },
    {
        "question": "List the names of all customers who have placed an order.",
        "query": "SELECT T2.CustomerName FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID"
    },
    {
        "question": "What are the names of the products included in OrderID 10248?",
        "query": "SELECT T2.ProductName FROM OrderDetails AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.OrderID = 10248"
    },
    {
        "question": "Calculate the total value of OrderID 10248.",
        "query": "SELECT SUM(T1.Quantity * T2.Price) FROM OrderDetails AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.OrderID = 10248"
    },
    {
        "question": "List all orders placed in 1996.",
        "query": "SELECT * FROM Orders WHERE strftime('%Y', OrderDate) = '1996'"
    },
    {
        "question": "List all products that have never been ordered.",
        "query": "SELECT ProductName FROM Products EXCEPT SELECT T2.ProductName FROM OrderDetails AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "question": "What are the email addresses of all customers in the USA?",
        "query": "SELECT Email FROM Customer WHERE Country = 'USA';"
    },
    {
        "question": "Which employee has the most customers?",
        "query": "SELECT e.FirstName, e.LastName FROM Employee AS e JOIN Customer AS c ON e.EmployeeId = c.SupportRepId GROUP BY e.EmployeeId ORDER BY COUNT(c.CustomerId) DESC LIMIT 1;"
    },
    {
        "question": "List all the invoices and the customer who made the purchase.",
        "query": "SELECT i.InvoiceId, c.FirstName, c.LastName FROM Invoice AS i JOIN Customer AS c ON i.CustomerId = c.CustomerId;"
    },
    {
        "question": "What is the total revenue generated from invoices in 2009?",
        "query": "SELECT SUM(Total) FROM Invoice WHERE InvoiceDate LIKE '2009%';"
    },
    {
        "question": "List all tracks purchased by the customer 'Leonie K\u00f6hler'.",
        "query": "SELECT t.Name FROM Track AS t JOIN InvoiceLine AS il ON t.TrackId = il.TrackId JOIN Invoice AS i ON il.InvoiceId = i.InvoiceId JOIN Customer AS c ON i.CustomerId = c.CustomerId WHERE c.FirstName = 'Leonie' AND c.LastName = 'K\u00f6hler';"
    },
    {
        "question": "Find the total number of tracks in each playlist.",
        "query": "SELECT p.Name, COUNT(pt.TrackId) AS TotalTracks FROM Playlist AS p LEFT JOIN PlaylistTrack AS pt ON p.PlaylistId = pt.PlaylistId GROUP BY p.Name;"
    },
    {
        "question": "List all customers who have purchased tracks from the genre 'Rock'.",
        "query": "SELECT DISTINCT c.FirstName, c.LastName FROM Customer AS c JOIN Invoice AS i ON c.CustomerId = i.CustomerId JOIN InvoiceLine AS il ON i.InvoiceId = il.InvoiceId JOIN Track AS t ON il.TrackId = t.TrackId JOIN Genre AS g ON t.GenreId = g.GenreId WHERE g.Name = 'Rock';"
    },
    {
        "question": "What is the average price of tracks in the 'Alternative & Punk' genre?",
        "query": "SELECT AVG(unit_price) FROM tracks WHERE genre_id = (SELECT genre_id FROM genres WHERE name = 'Alternative & Punk');"
    },
    {
        "question": "Which artist has the most tracks in the playlist 'Grunge Classics'?",
        "query": "SELECT artists.name FROM artists INNER JOIN albums ON artists.artist_id = albums.artist_id INNER JOIN tracks ON albums.album_id = tracks.album_id INNER JOIN playlist_tracks ON tracks.track_id = playlist_tracks.track_id WHERE playlist_tracks.playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Grunge Classics') GROUP BY artists.name ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question": "What are the names of the artists and the number of albums by each artist?",
        "query": "SELECT T2.name, COUNT(*) FROM albums AS T1 INNER JOIN artists AS T2 ON T1.artistid = T2.artistid GROUP BY T2.name;"
    },
    {
        "question": "List the names of all invoices and their billing countries.",
        "query": "SELECT invoiceid, billingcountry FROM invoices;"
    },
    {
        "question": "What are the titles of the albums by 'Iron Maiden' that include tracks costing more than $0.99?",
        "query": "SELECT T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T2.artistid = (SELECT artistid FROM artists WHERE name = 'Iron Maiden') AND T1.unitprice > 0.99;"
    },
    {
        "question": "List the names of all playlists and the total duration of tracks in each playlist.",
        "query": "SELECT T2.name, SUM(T1.milliseconds) FROM tracks AS T1 INNER JOIN playlist_track AS T3 ON T1.trackid = T3.trackid INNER JOIN playlists AS T2 ON T3.playlistid = T2.playlistid GROUP BY T2.playlistid;"
    },
    {
        "question": "What is the name of the artist who has composed the most tracks?",
        "query": "SELECT composer FROM tracks GROUP BY composer ORDER BY COUNT(trackid) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all albums released after 1967.",
        "query": "SELECT title FROM albums WHERE strftime('%Y', release_date) > '1967'"
    },
    {
        "question": "List the names of all tracks that are longer than 3 minutes.",
        "query": "SELECT name FROM tracks WHERE milliseconds > 180000"
    },
    {
        "question": "What is the total length of the album 'Sgt. Pepper's Lonely Hearts Club Band' in seconds?",
        "query": "SELECT SUM(milliseconds) / 1000 FROM tracks WHERE album = 'Sgt. Pepper\\'s Lonely Hearts Club Band'"
    },
    {
        "question": "What is the name of the shortest track on the album 'The White Album'?",
        "query": "SELECT name FROM tracks WHERE album = 'The White Album' ORDER BY milliseconds LIMIT 1"
    },
    {
        "question": "How many albums were released in the 1960s?",
        "query": "SELECT COUNT(*) FROM albums WHERE strftime('%Y', release_date) LIKE '196%'"
    },
    {
        "question": "What is the name of the longest track on the album 'Abbey Road'?",
        "query": "SELECT name FROM tracks WHERE album = 'Abbey Road' ORDER BY milliseconds DESC LIMIT 1"
    },
    {
        "question": "List the titles of all albums and the number of tracks on each album.",
        "query": "SELECT T2.title, COUNT(T1.name) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.album = T2.title GROUP BY T2.title"
    },
    {
        "question": "What are the names of all tracks on albums released before 1967?",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.album = T2.title WHERE strftime('%Y', T2.release_date) < '1967'"
    },
    {
        "question": "List the names of all tracks that cost more than $0.99 and belong to the 'Rock' genre.",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T1.unitprice > 0.99 AND T2.name = 'Rock';"
    },
    {
        "question": "What is the total length of all tracks in the 'Jazz' genre?",
        "query": "SELECT SUM(T1.milliseconds) FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid WHERE T2.name = 'Jazz';"
    },
    {
        "question": "What is the name of the album with albumid 347?",
        "query": "SELECT title FROM albums WHERE albumid = 347;"
    },
    {
        "question": "What is the total price of all tracks on the album 'Let There Be Rock'?",
        "query": "SELECT SUM(T2.unitprice) FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid WHERE T1.title = 'Let There Be Rock';"
    },
    {
        "question": "List the names of all playlists that contain the track 'Highway Star'.",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN playlists AS T2 ON T1.playlistid = T2.playlistid INNER JOIN tracks AS T3 ON T1.trackid = T3.trackid WHERE T3.name = 'Highway Star';"
    },
    {
        "question": "What is the name of the media type with mediatypeid 2?",
        "query": "SELECT name FROM media_types WHERE mediatypeid = 2;"
    },
    {
        "question": "What is the email address of the customer with customerid 59?",
        "query": "SELECT email FROM customers WHERE customerid = 59;"
    },
    {
        "question": "List the titles of all invoices for customer with customerid 16.",
        "query": "SELECT T2.invoicedate FROM customers AS T1 INNER JOIN invoices AS T2 ON T1.customerid = T2.customerid WHERE T1.customerid = 16;"
    },
    {
        "question": "What is the total amount spent by the customer with customerid 2?",
        "query": "SELECT SUM(total) FROM invoices WHERE customerid = 2;"
    },
    {
        "question": "List all invoice items associated with invoiceid 37.",
        "query": "SELECT * FROM invoice_items WHERE invoiceid = 37;"
    },
    {
        "question": "What is the total quantity of all items sold in invoice 4?",
        "query": "SELECT SUM(quantity) FROM invoice_items WHERE invoiceid = 4;"
    },
    {
        "question": "Find the average weight of all dogs.",
        "query": "SELECT AVG(Weight) FROM dogs;"
    },
    {
        "question": "List the names of all dogs that are heavier than 20 kg.",
        "query": "SELECT Name FROM dogs WHERE Weight > 20;"
    },
    {
        "question": "What is the name of the oldest dog?",
        "query": "SELECT Name FROM dogs ORDER BY Age DESC LIMIT 1;"
    },
    {
        "question": "List the names and breeds of all dogs that are between 2 and 5 years old.",
        "query": "SELECT Name, Breed FROM dogs WHERE Age BETWEEN 2 AND 5;"
    },
    {
        "question": "How many dogs are of the breed 'Golden Retriever'?",
        "query": "SELECT COUNT(*) FROM dogs WHERE Breed = 'Golden Retriever';"
    },
    {
        "question": "What is the average age of dogs of the 'Labrador Retriever' breed?",
        "query": "SELECT AVG(Age) FROM dogs WHERE Breed = 'Labrador Retriever';"
    },
    {
        "question": "List the names of all dogs in descending order of their weight.",
        "query": "SELECT Name FROM dogs ORDER BY Weight DESC;"
    },
    {
        "question": "Find the name and age of the youngest dog.",
        "query": "SELECT Name, Age FROM dogs ORDER BY Age ASC LIMIT 1;"
    },
    {
        "question": "List the breeds of dogs that have a weight greater than the average weight of all dogs.",
        "query": "SELECT Breed FROM dogs WHERE Weight > (SELECT AVG(Weight) FROM dogs);"
    },
    {
        "question": "How many dogs are there for each breed?",
        "query": "SELECT Breed, COUNT(*) FROM dogs GROUP BY Breed;"
    },
    {
        "question": "List the names and ages of all dogs that are older than the average age of all dogs.",
        "query": "SELECT Name, Age FROM dogs WHERE Age > (SELECT AVG(Age) FROM dogs);"
    },
    {
        "question": "What is the maximum weight of a dog?",
        "query": "SELECT MAX(Weight) FROM dogs;"
    },
    {
        "question": "What is the minimum age of a dog?",
        "query": "SELECT MIN(Age) FROM dogs;"
    },
    {
        "question": "List the names and breeds of all dogs in ascending order of their age.",
        "query": "SELECT Name, Breed FROM dogs ORDER BY Age ASC;"
    },
    {
        "question": "What are the different breeds of dogs in the database?",
        "query": "SELECT DISTINCT Breed FROM dogs;"
    },
    {
        "question": "What are the names of the tracks in the 'Music' playlist?",
        "query": "SELECT T3.name FROM playlists AS T1 INNER JOIN playlist_track AS T2 ON T1.playlistid = T2.playlistid INNER JOIN tracks AS T3 ON T2.trackid = T3.trackid WHERE T1.name = 'Music';"
    },
    {
        "question": "What is the average unit price of tracks in the 'Heavy Metal Classic' playlist?",
        "query": "SELECT AVG(T2.unit_price) FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id WHERE T1.playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Heavy Metal Classic');"
    },
    {
        "question": "List the names of all playlists that contain tracks by the composer 'Johann Sebastian Bach'.",
        "query": "SELECT T3.name FROM tracks AS T1 INNER JOIN playlist_tracks AS T2 ON T1.track_id = T2.track_id INNER JOIN playlists AS T3 ON T2.playlist_id = T3.playlist_id WHERE T1.composer = 'Johann Sebastian Bach';"
    },
    {
        "question": "What is the total cost to purchase all tracks in the 'TV Shows' playlist?",
        "query": "SELECT SUM(T1.unit_price) FROM tracks AS T1 INNER JOIN playlist_tracks AS T2 ON T1.track_id = T2.track_id WHERE T2.playlist_id = ( SELECT playlist_id FROM playlists WHERE name = 'TV Shows' );"
    },
    {
        "question": "Find the names of all playlists that have at least one track longer than 5 minutes (300000 milliseconds).",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN playlist_tracks AS T3 ON T1.track_id = T3.track_id INNER JOIN playlists AS T2 ON T3.playlist_id = T2.playlist_id WHERE T1.milliseconds > 300000 GROUP BY T2.name;"
    },
    {
        "question": "List all states in sampledata15.",
        "query": "SELECT DISTINCT state FROM sampledata15"
    },
    {
        "question": "What are the different commodities (commod) present in sampledata15?",
        "query": "SELECT DISTINCT commod FROM sampledata15"
    },
    {
        "question": "Find the unique years in sampledata15.",
        "query": "SELECT DISTINCT year FROM sampledata15"
    },
    {
        "question": "What are the distinct months represented in sampledata15?",
        "query": "SELECT DISTINCT month FROM sampledata15"
    },
    {
        "question": "List all the different days recorded in sampledata15.",
        "query": "SELECT DISTINCT day FROM sampledata15"
    },
    {
        "question": "What are the unique site values in sampledata15?",
        "query": "SELECT DISTINCT site FROM sampledata15"
    },
    {
        "question": "Find the different source IDs (source_id) in sampledata15.",
        "query": "SELECT DISTINCT source_id FROM sampledata15"
    },
    {
        "question": "What are the various varieties of produce listed in sampledata15?",
        "query": "SELECT DISTINCT variety FROM sampledata15"
    },
    {
        "question": "List the unique origins in sampledata15.",
        "query": "SELECT DISTINCT origin FROM sampledata15"
    },
    {
        "question": "What are the different countries represented in sampledata15?",
        "query": "SELECT DISTINCT country FROM sampledata15"
    },
    {
        "question": "Find the unique distribution types (disttype) in sampledata15.",
        "query": "SELECT DISTINCT disttype FROM sampledata15"
    },
    {
        "question": "What are the distinct commodity types (commtype) in sampledata15?",
        "query": "SELECT DISTINCT commtype FROM sampledata15"
    },
    {
        "question": "List all the different claims in sampledata15.",
        "query": "SELECT DISTINCT claim FROM sampledata15"
    },
    {
        "question": "What are the unique growing states (growst) in sampledata15?",
        "query": "SELECT DISTINCT growst FROM sampledata15"
    },
    {
        "question": "Find the different packing states (packst) in sampledata15.",
        "query": "SELECT DISTINCT packst FROM sampledata15"
    },
    {
        "question": "What are the various distribution states (distst) listed in sampledata15?",
        "query": "SELECT DISTINCT distst FROM sampledata15"
    },
    {
        "question": "How many samples are there in sampledata15?",
        "query": "SELECT COUNT(*) FROM sampledata15"
    },
    {
        "question": "How many distinct commodities are in sampledata15?",
        "query": "SELECT COUNT(DISTINCT commod) FROM sampledata15"
    },
    {
        "question": "What is the total quantity of all samples in sampledata15?",
        "query": "SELECT SUM(quantity) FROM sampledata15"
    },
    {
        "question": "What is the average quantity of samples in sampledata15?",
        "query": "SELECT AVG(quantity) FROM sampledata15"
    },
    {
        "question": "What is the maximum quantity of a sample in sampledata15?",
        "query": "SELECT MAX(quantity) FROM sampledata15"
    },
    {
        "question": "What is the minimum quantity of a sample in sampledata15?",
        "query": "SELECT MIN(quantity) FROM sampledata15"
    },
    {
        "question": "List all sample details from sampledata15 where the state is 'CA'.",
        "query": "SELECT * FROM sampledata15 WHERE state = 'CA'"
    },
    {
        "question": "Find all samples in sampledata15 with commodity 'PE'.",
        "query": "SELECT * FROM sampledata15 WHERE commod = 'PE'"
    },
    {
        "question": "List all samples from sampledata15 where the origin is '1'.",
        "query": "SELECT * FROM sampledata15 WHERE origin = '1'"
    },
    {
        "question": "Find all samples in sampledata15 with distribution type 'L'.",
        "query": "SELECT * FROM sampledata15 WHERE disttype = 'L'"
    },
    {
        "question": "List all samples from sampledata15 where the commodity type is 'FR'.",
        "query": "SELECT * FROM sampledata15 WHERE commtype = 'FR'"
    },
    {
        "question": "Find all samples in sampledata15 with claim 'PO'.",
        "query": "SELECT * FROM sampledata15 WHERE claim = 'PO'"
    },
    {
        "question": "List all samples from sampledata15 where the growing state is 'WI'.",
        "query": "SELECT * FROM sampledata15 WHERE growst = 'WI'"
    },
    {
        "question": "Find all samples in sampledata15 with packing state 'WA'.",
        "query": "SELECT * FROM sampledata15 WHERE packst = 'WA'"
    },
    {
        "question": "Show the commod and commtype for each sample in sampledata15.",
        "query": "SELECT commod, commtype FROM sampledata15"
    },
    {
        "question": "List the state, year, and month for each sample in sampledata15.",
        "query": "SELECT state, year, month FROM sampledata15"
    },
    {
        "question": "Display the site, variety, and origin for each sample in sampledata15.",
        "query": "SELECT site, variety, origin FROM sampledata15"
    },
    {
        "question": "Show the country, disttype, and claim for each sample in sampledata15.",
        "query": "SELECT country, disttype, claim FROM sampledata15"
    },
    {
        "question": "List the quantity, growst, and packst for each sample in sampledata15.",
        "query": "SELECT quantity, growst, packst FROM sampledata15"
    },
    {
        "question": "Find the concentration (concen) and limit of detection (lod) for each result in resultsdata15.",
        "query": "SELECT concen, lod FROM resultsdata15"
    },
    {
        "question": "List the pest code (pestcode) and test class (testclass) for each result in resultsdata15.",
        "query": "SELECT pestcode, testclass FROM resultsdata15"
    },
    {
        "question": "Display the concentration unit (conunit) and confirmation method (confmethod) for each result in resultsdata15.",
        "query": "SELECT conunit, confmethod FROM resultsdata15"
    },
    {
        "question": "Show the annotation (annotate), quantitation (quantitate), and mean for each result in resultsdata15.",
        "query": "SELECT annotate, quantitate, mean FROM resultsdata15"
    },
    {
        "question": "List the extract and determination (determin) for each result in resultsdata15.",
        "query": "SELECT extract, determin FROM resultsdata15"
    },
    {
        "question": "Find all samples in sampledata15 with a quantity greater than 20.",
        "query": "SELECT * FROM sampledata15 WHERE quantity > 20"
    },
    {
        "question": "List all results in resultsdata15 with a concentration less than 0.1.",
        "query": "SELECT * FROM resultsdata15 WHERE concen < 0.1"
    },
    {
        "question": "Find all samples in sampledata15 from the year '15' and month '03'.",
        "query": "SELECT * FROM sampledata15 WHERE year = '15' AND month = '03'"
    },
    {
        "question": "List all results in resultsdata15 with a confirmation method of 'GT' or 'LU'.",
        "query": "SELECT * FROM resultsdata15 WHERE confmethod = 'GT' OR confmethod = 'LU'"
    },
    {
        "question": "Find all samples in sampledata15 with a commodity of 'PE' and an origin of '1'.",
        "query": "SELECT * FROM sampledata15 WHERE commod = 'PE' AND origin = '1'"
    },
    {
        "question": "For each sample, display the sample primary key (sample_pk), commodity (commod), and lab from which the results came from.",
        "query": "SELECT sample_pk, commod, lab FROM resultsdata15"
    },
    {
        "question": "What is the pestcode and concen for each sample?",
        "query": "SELECT pestcode, concen FROM resultsdata15"
    },
    {
        "question": "Show the sample_pk, testclass, and conunit for every sample.",
        "query": "SELECT sample_pk, testclass, conunit FROM resultsdata15"
    },
    {
        "question": "List the sample_pk, confmethod, and annotate for all samples.",
        "query": "SELECT sample_pk, confmethod, annotate FROM resultsdata15"
    },
    {
        "question": "Display the sample_pk, quantitate, mean, and extract for every sample.",
        "query": "SELECT sample_pk, quantitate, mean, extract FROM resultsdata15"
    },
    {
        "question": "What is the commod and commtype from sampledata15 for samples with sample_pk greater than 5000?",
        "query": "SELECT commod, commtype FROM sampledata15 WHERE sample_pk > 5000"
    },
    {
        "question": "List the state, year, and month from sampledata15 where the quantity is less than 10.",
        "query": "SELECT state, year, month FROM sampledata15 WHERE quantity < 10"
    },
    {
        "question": "Retrieve all columns from sampledata15 where the origin is '2' and the disttype is 'R'.",
        "query": "SELECT * FROM sampledata15 WHERE origin = '2' AND disttype = 'R'"
    },
    {
        "question": "Get all columns from sampledata15 where the growst is 'CA' or the packst is 'NY'.",
        "query": "SELECT * FROM sampledata15 WHERE growst = 'CA' OR packst = 'NY'"
    },
    {
        "question": "What are the different varieties of produce in sampledata15 where the state is 'CA'?",
        "query": "SELECT DISTINCT variety FROM sampledata15 WHERE state = 'CA'"
    },
    {
        "question": "How many samples are there in sampledata15 with a commodity type of 'FR'?",
        "query": "SELECT COUNT(*) FROM sampledata15 WHERE commtype = 'FR'"
    },
    {
        "question": "What is the average quantity of samples in sampledata15 where the origin is '1'?",
        "query": "SELECT AVG(quantity) FROM sampledata15 WHERE origin = '1'"
    },
    {
        "question": "What is the maximum concentration found in resultsdata15 for the pestcode '058'?",
        "query": "SELECT MAX(concen) FROM resultsdata15 WHERE pestcode = '058'"
    },
    {
        "question": "How many different labs are represented in resultsdata15?",
        "query": "SELECT COUNT(DISTINCT lab) FROM resultsdata15"
    },
    {
        "question": "What is the average LOD (lod) for samples tested by lab 'FL1'?",
        "query": "SELECT AVG(lod) FROM resultsdata15 WHERE lab = 'FL1'"
    },
    {
        "question": "List the commod, lab, and concen from resultsdata15 where the testclass is 'F'.",
        "query": "SELECT commod, lab, concen FROM resultsdata15 WHERE testclass = 'F'"
    },
    {
        "question": "What is the pestcode and mean for samples with a conunit of 'M'?",
        "query": "SELECT pestcode, mean FROM resultsdata15 WHERE conunit = 'M'"
    },
    {
        "question": "List the sample_pk, commod, and concen for samples where the confmethod is 'GT' and the annotate is 'QV'.",
        "query": "SELECT sample_pk, commod, concen FROM resultsdata15 WHERE confmethod = 'GT' AND annotate = 'QV'"
    },
    {
        "question": "What distinct commodity types (commtype) are present in both sampledata15 and resultsdata15?",
        "query": "SELECT DISTINCT commtype FROM sampledata15 INTERSECT SELECT DISTINCT commtype FROM resultsdata15"
    },
    {
        "question": "List all sample details from sampledata15 along with their corresponding test results from resultsdata15.",
        "query": "SELECT * FROM sampledata15 AS T1 INNER JOIN resultsdata15 AS T2 ON T1.sample_pk = T2.sample_pk"
    },
    {
        "question": "For each sample in sampledata15, display the state, commod, and the corresponding lab from resultsdata15.",
        "query": "SELECT T1.state, T1.commod, T2.lab FROM sampledata15 AS T1 INNER JOIN resultsdata15 AS T2 ON T1.sample_pk = T2.sample_pk"
    },
    {
        "question": "Show the variety, origin from sampledata15 and the pestcode, concen from resultsdata15 for each matching sample.",
        "query": "SELECT T1.variety, T1.origin, T2.pestcode, T2.concen FROM sampledata15 AS T1 INNER JOIN resultsdata15 AS T2 ON T1.sample_pk = T2.sample_pk"
    },
    {
        "question": "List all samples from 'CA' in sampledata15 and their corresponding test results (concen, lod) from resultsdata15.",
        "query": "SELECT T1.*, T2.concen, T2.lod FROM sampledata15 AS T1 INNER JOIN resultsdata15 AS T2 ON T1.sample_pk = T2.sample_pk WHERE T1.state = 'CA'"
    },
    {
        "question": "Find all samples with commod 'PE' in sampledata15 and their corresponding lab and pestcode from resultsdata15.",
        "query": "SELECT T1.*, T2.lab, T2.pestcode FROM sampledata15 AS T1 INNER JOIN resultsdata15 AS T2 ON T1.sample_pk = T2.sample_pk WHERE T1.commod = 'PE'"
    },
    {
        "question": "What is the name of the longest track in the database?",
        "query": "SELECT Name FROM tracks ORDER BY Milliseconds DESC LIMIT 1;"
    },
    {
        "question": "What is the average length of a track in the 'Jazz' playlist?",
        "query": "SELECT AVG(Milliseconds) FROM tracks WHERE TrackId IN (SELECT TrackId FROM playlist_tracks WHERE PlaylistId = (SELECT PlaylistId FROM playlists WHERE Name = 'Jazz'));"
    },
    {
        "question": "How many playlists contain the track 'Enter Sandman'?",
        "query": "SELECT COUNT(DISTINCT PlaylistId) FROM playlist_tracks WHERE TrackId = (SELECT TrackId FROM tracks WHERE Name = 'Enter Sandman');"
    },
    {
        "question": "List the names of all tracks composed by 'AC/DC' that are included in any playlist.",
        "query": "SELECT T1.Name FROM tracks AS T1 INNER JOIN playlist_tracks AS T2 ON T1.TrackId = T2.TrackId WHERE T1.Composer = 'AC/DC';"
    },
    {
        "question": "List the names of all tracks in the 'Classical' playlist.",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.id WHERE T1.playlist_id = (SELECT id FROM playlists WHERE name = 'Classical');"
    },
    {
        "question": "What is the total duration of all tracks in the 'Rock' playlist?",
        "query": "SELECT SUM(milliseconds) FROM tracks WHERE id IN (SELECT track_id FROM playlist_tracks WHERE playlist_id = (SELECT id FROM playlists WHERE name = 'Rock'));"
    },
    {
        "question": "What is the average duration of tracks in the 'Metal' playlist?",
        "query": "SELECT AVG(milliseconds) FROM tracks WHERE id IN (SELECT track_id FROM playlist_tracks WHERE playlist_id = (SELECT id FROM playlists WHERE name = 'Metal'));"
    },
    {
        "question": "List the names of all playlists that contain at least one track with 'Love' in the title.",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN playlists AS T2 ON T1.playlist_id = T2.id WHERE T1.track_id IN (SELECT id FROM tracks WHERE name LIKE '%Love%');"
    },
    {
        "question": "List the names of all customers who have purchased tracks from the 'Metal' genre.",
        "query": "SELECT T2.firstname, T2.lastname FROM invoice_items AS T1 INNER JOIN invoices AS T3 ON T1.invoiceid = T3.invoiceid INNER JOIN customers AS T2 ON T3.customerid = T2.customerid WHERE T1.trackid IN (SELECT trackid FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Metal'));"
    },
    {
        "question": "What is the name of the shortest track composed by 'Steven Tyler'?",
        "query": "SELECT name FROM tracks WHERE composer = 'Steven Tyler' ORDER BY milliseconds ASC LIMIT 1;"
    },
    {
        "question": "What is the total number of tracks sold for each genre?",
        "query": "SELECT T2.name, SUM(T1.quantity) FROM invoice_items AS T1 INNER JOIN tracks AS T3 ON T1.trackid = T3.trackid INNER JOIN genres AS T2 ON T3.genreid = T2.genreid GROUP BY T2.name;"
    },
    {
        "question": "What is the total revenue generated from sales of tracks composed by 'Angus Young'?",
        "query": "SELECT SUM(T1.unitprice * T1.quantity) FROM invoice_items AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid WHERE T2.composer = 'Angus Young';"
    },
    {
        "question": "Which customer has made the most purchases (in terms of quantity)?",
        "query": "SELECT FirstName, LastName FROM customers WHERE customerid = (SELECT customerid FROM invoices GROUP BY customerid ORDER BY SUM(quantity) DESC LIMIT 1);"
    },
    {
        "question": "What are the names of all the albums purchased by the customer with CustomerId 5?",
        "query": "SELECT T3.Title FROM Customer AS T1 INNER JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId INNER JOIN InvoiceLine AS T3 ON T2.InvoiceId = T3.InvoiceId INNER JOIN Track AS T4 ON T3.TrackId = T4.TrackId INNER JOIN Album AS T5 ON T4.AlbumId = T5.AlbumId WHERE T1.CustomerId = 5 GROUP BY T5.Title;"
    },
    {
        "question": "List the names of all the artists and the number of albums they have in the database.",
        "query": "SELECT Name, COUNT(AlbumId) FROM Artist INNER JOIN Album ON Artist.ArtistId = Album.ArtistId GROUP BY Name;"
    },
    {
        "question": "Which employee is the sales support agent for the customer with CustomerId 10?",
        "query": "SELECT T2.FirstName, T2.LastName FROM Customer AS T1 INNER JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.CustomerId = 10;"
    },
    {
        "question": "How many tracks belong to each genre?",
        "query": "SELECT T2.name, COUNT(T1.track_id) FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genre_id = T2.genre_id GROUP BY T2.name;"
    },
    {
        "question": "Find the names of all tracks that have the word 'Love' in their title.",
        "query": "SELECT name FROM tracks WHERE name LIKE '%Love%';"
    },
    {
        "question": "List the names of all tracks that belong to genres with the word 'Metal' in their name.",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genre_id = T2.genre_id WHERE T2.name LIKE '%Metal%';"
    },
    {
        "question": "What are the names of the tracks in the 'International' playlist?",
        "query": "SELECT T2.name FROM playlists AS T1 INNER JOIN playlist_track AS T3 ON T1.id = T3.playlist_id INNER JOIN tracks AS T2 ON T3.track_id = T2.id WHERE T1.name = 'International';"
    },
    {
        "question": "How many tracks are in the 'Grunge' playlist?",
        "query": "SELECT COUNT(*) FROM playlist_track AS T1 INNER JOIN playlists AS T2 ON T1.playlist_id = T2.id WHERE T2.name = 'Grunge';"
    },
    {
        "question": "What is the total price of all tracks in the 'Classical' playlist?",
        "query": "SELECT SUM(T2.unitprice) FROM playlists AS T1 INNER JOIN playlist_track AS T3 ON T1.id = T3.playlist_id INNER JOIN tracks AS T2 ON T3.track_id = T2.id WHERE T1.name = 'Classical';"
    },
    {
        "question": "What are the names of the tracks composed by 'Miles Davis'?",
        "query": "SELECT name FROM tracks WHERE composer = 'Miles Davis';"
    },
    {
        "question": "List the names of all playlists that contain a track composed by 'U2'.",
        "query": "SELECT T1.name FROM playlists AS T1 INNER JOIN playlist_track AS T3 ON T1.id = T3.playlist_id INNER JOIN tracks AS T2 ON T3.track_id = T2.id WHERE T2.composer = 'U2';"
    },
    {
        "question": "List the titles of all albums and the average price of tracks in each album.",
        "query": "SELECT T1.title, AVG(T2.unitprice) FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.title;"
    },
    {
        "question": "How many tracks are in the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT COUNT(*) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.album_id = T2.id WHERE T2.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "List the names of all customers from Canada.",
        "query": "SELECT first_name, last_name FROM customers WHERE country = 'Canada';"
    },
    {
        "question": "What is the total length of all the tracks on the album 'For Those About To Rock We Salute You' in seconds?",
        "query": "SELECT SUM(Milliseconds) / 1000 FROM Track WHERE AlbumId = (SELECT AlbumId FROM Album WHERE Title = 'For Those About To Rock We Salute You');"
    },
    {
        "question": "List the names of all the albums in the Rock genre.",
        "query": "SELECT Title FROM Album WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Rock');"
    },
    {
        "question": "How many tracks are there of each media type?",
        "query": "SELECT MediaTypeId, COUNT(*) FROM Track GROUP BY MediaTypeId;"
    },
    {
        "question": "List the names of all customers who made purchases in 2009.",
        "query": "SELECT FirstName, LastName FROM Customer WHERE CustomerId IN (SELECT CustomerId FROM Invoice WHERE strftime('%Y', InvoiceDate) = '2009');"
    },
    {
        "question": "What is the name of the artist who created the track with TrackId 1?",
        "query": "SELECT T2.Name FROM Track AS T1 INNER JOIN Album AS T3 ON T1.AlbumId = T3.AlbumId INNER JOIN Artist AS T2 ON T3.ArtistId = T2.ArtistId WHERE T1.TrackId = 1;"
    },
    {
        "question": "What is the total price of all the tracks in the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT SUM(UnitPrice) FROM Track WHERE AlbumId = (SELECT AlbumId FROM Album WHERE Title = 'For Those About To Rock We Salute You');"
    },
    {
        "question": "List the names of all customers who live in Brazil and their support representative's name.",
        "query": "SELECT T1.FirstName, T1.LastName, T2.FirstName, T2.LastName FROM Customer AS T1 INNER JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.Country = 'Brazil';"
    },
    {
        "question": "List the names of all the tracks purchased by the customer with CustomerId 2.",
        "query": "SELECT T4.Name FROM Customer AS T1 INNER JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId INNER JOIN InvoiceLine AS T3 ON T2.InvoiceId = T3.InvoiceId INNER JOIN Track AS T4 ON T3.TrackId = T4.TrackId WHERE T1.CustomerId = 2;"
    },
    {
        "question": "List the names of all tracks that belong to the 'Rock' genre and are longer than 5 minutes.",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid INNER JOIN genres AS T3 ON T2.genreid = T3.genreid WHERE T3.name = 'Rock' AND T1.milliseconds > 300000;"
    },
    {
        "question": "What is the name of the shortest Rock track?",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid INNER JOIN genres AS T3 ON T2.genreid = T3.genreid WHERE T3.name = 'Rock' ORDER BY milliseconds ASC LIMIT 1;"
    },
    {
        "question": "What is the name and composer of the track with track_id 3?",
        "query": "SELECT name, composer FROM tracks WHERE track_id = 3;"
    },
    {
        "question": "List the names of all tracks that cost more than $1.",
        "query": "SELECT name FROM tracks WHERE unit_price > 1.0;"
    },
    {
        "question": "List the titles of all albums and the number of tracks they contain.",
        "query": "SELECT T2.title, COUNT(T1.track_id) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.album_id = T2.album_id GROUP BY T2.title;"
    },
    {
        "question": "Find the employee with the earliest hire date.",
        "query": "SELECT * FROM employees ORDER BY hire_date ASC LIMIT 1;"
    },
    {
        "question": "List the departments with an average salary greater than $60,000.",
        "query": "SELECT department FROM employees GROUP BY department HAVING AVG(salary) > 60000;"
    },
    {
        "question": "Which album has the track with the shortest milliseconds?",
        "query": "SELECT title FROM albums WHERE albumid = (SELECT albumid FROM tracks ORDER BY milliseconds ASC LIMIT 1);"
    },
    {
        "question": "What are the order IDs and order dates for all orders shipped via 'Speedy Express'?",
        "query": "SELECT OrderID, OrderDate FROM Orders WHERE ShipperID = (SELECT ShipperID FROM Shippers WHERE ShipperName = 'Speedy Express')"
    },
    {
        "question": "List all customers and their corresponding orders.",
        "query": "SELECT c.CustomerName, o.* FROM Customers c INNER JOIN Orders o ON c.CustomerID = o.CustomerID"
    },
    {
        "question": "List all orders with the corresponding customer name and shipper name.",
        "query": "SELECT c.CustomerName, s.ShipperName, o.* FROM Orders o INNER JOIN Customers c ON o.CustomerID = c.CustomerID INNER JOIN Shippers s ON o.ShipperID = s.ShipperID"
    },
    {
        "question": "What are the names of the products, their unit prices, and the names of their suppliers?",
        "query": "SELECT p.ProductName, p.Price, s.SupplierName FROM Products p INNER JOIN Suppliers s ON p.SupplierID = s.SupplierID"
    },
    {
        "question": "List all orders with the customer's name, the employee's name who processed the order, and the shipper's name.",
        "query": "SELECT c.CustomerName, e.LastName AS EmployeeName, s.ShipperName, o.* FROM Orders o INNER JOIN Customers c ON o.CustomerID = c.CustomerID INNER JOIN Employees e ON o.EmployeeID = e.EmployeeID INNER JOIN Shippers s ON o.ShipperID = s.ShipperID"
    },
    {
        "question": "What are the names of the employees and the number of orders they have processed?",
        "query": "SELECT e.LastName, COUNT(o.OrderID) AS NumberOfOrders FROM Employees e LEFT JOIN Orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.LastName"
    },
    {
        "question": "How many tracks are there in the playlist 'Brazilian Beats'?",
        "query": "SELECT COUNT(*) FROM playlist_tracks WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Brazilian Beats');"
    },
    {
        "question": "List the names of all tracks in the 'TV Shows' playlist.",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id WHERE T1.playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'TV Shows');"
    },
    {
        "question": "What is the total duration of all tracks in the '90\u2019s Music' playlist?",
        "query": "SELECT SUM(milliseconds) FROM tracks WHERE track_id IN (SELECT track_id FROM playlist_tracks WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE name = '90\u2019s Music'));"
    },
    {
        "question": "List the names of all playlists that contain tracks composed by 'Jimi Hendrix'.",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN tracks AS T3 ON T1.track_id = T3.track_id INNER JOIN playlists as T2 ON T1.playlist_id = T2.playlist_id WHERE T3.composer = 'Jimi Hendrix';"
    },
    {
        "question": "What is the average unit price of tracks in the 'Classical' playlist?",
        "query": "SELECT AVG(unit_price) FROM tracks WHERE track_id IN (SELECT track_id FROM playlist_tracks WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Classical'));"
    },
    {
        "question": "List the names of all artists and the number of tracks they have in the 'Movies' playlist.",
        "query": "SELECT T3.name, COUNT(*) FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id INNER JOIN artists AS T3 ON T2.artist_id = T3.artist_id WHERE T1.playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Movies') GROUP BY T3.artist_id;"
    },
    {
        "question": "What is the total length (in milliseconds) of all tracks in the 'Alternative & Punk' genre?",
        "query": "SELECT SUM(milliseconds) FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Alternative & Punk');"
    },
    {
        "question": "Which genre has the highest total sales revenue (unitprice * quantity sold), considering all tracks within that genre?",
        "query": "SELECT T3.name FROM invoice_items AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid INNER JOIN genres AS T3 ON T2.genreid = T3.genreid GROUP BY T3.name ORDER BY SUM(T1.unitprice * T1.quantity) DESC LIMIT 1;"
    },
    {
        "question": "What are the titles of albums released after 2010?",
        "query": "SELECT title FROM albums WHERE strftime('%Y', ReleaseDate) > '2010';"
    },
    {
        "question": "What is the total duration of all tracks in the album 'Let There Be Rock'?",
        "query": "SELECT SUM(T2.milliseconds) FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid WHERE T1.title = 'Let There Be Rock';"
    },
    {
        "question": "What is the total revenue generated from the sales of the album 'Big Ones'?",
        "query": "SELECT SUM(T3.quantity * T3.unitprice) FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid INNER JOIN invoice_items AS T3 ON T2.trackid = T3.trackid WHERE T1.title = 'Big Ones';"
    },
    {
        "question": "List the names of customers who purchased tracks from the album 'For Those About To Rock We Salute You'.",
        "query": "SELECT T4.firstname, T4.lastname FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.albumid = T2.albumid INNER JOIN invoice_items AS T3 ON T2.trackid = T3.trackid INNER JOIN invoices AS T4 ON T3.invoiceid = T4.invoiceid WHERE T1.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "Find the name and email of the customer who placed the order with order ID 1001.",
        "query": "SELECT c.name, c.email FROM customers c JOIN orders o ON c.id = o.customer_id WHERE o.id = 1001;"
    },
    {
        "question": "List all products with their respective categories.",
        "query": "SELECT p.name, c.name FROM products p JOIN categories c ON p.category_id = c.id;"
    },
    {
        "question": "What is the total amount spent by customer with ID 101 on all their orders?",
        "query": "SELECT SUM(oi.quantity * p.price) FROM order_items oi JOIN orders o ON oi.order_id = o.id JOIN products p ON oi.product_id = p.id WHERE o.customer_id = 101;"
    },
    {
        "question": "Which product was ordered most frequently?",
        "query": "SELECT p.name FROM products p JOIN order_items oi ON p.id = oi.product_id GROUP BY p.id ORDER BY SUM(oi.quantity) DESC LIMIT 1;"
    },
    {
        "question": "Find the categories that have more than 5 products.",
        "query": "SELECT c.name FROM categories c JOIN products p ON c.id = p.category_id GROUP BY c.id HAVING COUNT(p.id) > 5;"
    },
    {
        "question": "Find the customer who spent the most money across all orders.",
        "query": "SELECT c.name FROM customers c JOIN orders o ON c.id = o.customer_id JOIN order_items oi ON o.id = oi.order_id JOIN products p ON oi.product_id = p.id GROUP BY c.id ORDER BY SUM(oi.quantity * p.price) DESC LIMIT 1;"
    },
    {
        "question": "List the products that have never been ordered.",
        "query": "SELECT name FROM products EXCEPT SELECT p.name FROM products p JOIN order_items oi ON p.id = oi.product_id;"
    },
    {
        "question": "What is the average unit price of tracks in the 'Pop' playlist?",
        "query": "SELECT AVG(unit_price) FROM tracks WHERE track_id IN (SELECT track_id FROM playlist_tracks WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Pop'));"
    },
    {
        "question": "List the names of all playlists that contain tracks by the artist 'AC/DC'.",
        "query": "SELECT T3.name FROM artists AS T1 INNER JOIN albums AS T2 ON T1.artist_id = T2.artist_id INNER JOIN tracks AS T3 ON T2.album_id = T3.album_id WHERE T1.name = 'AC/DC' INTERSECT SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN playlists AS T2 ON T1.playlist_id = T2.playlist_id;"
    },
    {
        "question": "List the names of all artists whose tracks appear in the 'Heavy Metal' playlist.",
        "query": "SELECT T1.name FROM artists AS T1 INNER JOIN albums AS T2 ON T1.artist_id = T2.artist_id INNER JOIN tracks AS T3 ON T2.album_id = T3.album_id WHERE T3.track_id IN (SELECT track_id FROM playlist_tracks WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Heavy Metal'));"
    },
    {
        "question": "Find the name and price of all products in the 'Electronics' category.",
        "query": "SELECT productName, price FROM Products WHERE category = 'Electronics';"
    },
    {
        "question": "List the order IDs and order dates for all orders placed by customer with customerID 1.",
        "query": "SELECT orderID, orderDate FROM Orders WHERE customerID = 1;"
    },
    {
        "question": "What is the total quantity of product 'Laptop' ordered in all orders?",
        "query": "SELECT SUM(quantity) FROM OrderItems WHERE productID = (SELECT productID FROM Products WHERE productName = 'Laptop');"
    },
    {
        "question": "Find the names of customers who have placed orders for products in the 'Books' category.",
        "query": "SELECT T2.customerName FROM OrderItems AS T1 INNER JOIN Orders AS T2 ON T1.orderID = T2.orderID INNER JOIN Products AS T3 ON T1.productID = T3.productID WHERE T3.category = 'Books' GROUP BY T2.customerID;"
    },
    {
        "question": "List the names of products that have been ordered by at least two different customers.",
        "query": "SELECT T3.productName FROM OrderItems AS T1 INNER JOIN Orders AS T2 ON T1.orderID = T2.orderID INNER JOIN Products AS T3 ON T1.productID = T3.productID GROUP BY T3.productID HAVING COUNT(DISTINCT T2.customerID) >= 2;"
    },
    {
        "question": "List the product names and quantities ordered in order with orderID 10.",
        "query": "SELECT T2.productName, T1.quantity FROM OrderItems AS T1 INNER JOIN Products AS T2 ON T1.productID = T2.productID WHERE T1.orderID = 10;"
    },
    {
        "question": "What is the total revenue generated from orders placed in the last month (assuming current date is 2024-07-20)?",
        "query": "SELECT SUM(quantity * (SELECT price FROM Products WHERE Products.productID = OrderItems.productID)) FROM OrderItems WHERE orderID IN (SELECT orderID FROM Orders WHERE orderDate BETWEEN '2024-06-20' AND '2024-07-20');"
    },
    {
        "question": "List the names of all the artists and the number of tracks they have composed.",
        "query": "SELECT composer, COUNT(*) FROM tracks WHERE composer IS NOT NULL GROUP BY composer;"
    },
    {
        "question": "What is the name of the genre with the highest average track duration?",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid GROUP BY T2.name ORDER BY AVG(T1.milliseconds) DESC LIMIT 1;"
    },
    {
        "question": "List the albums by 'Iron Maiden' along with their release dates.",
        "query": "SELECT title, release_date FROM albums WHERE artist_id = (SELECT artist_id FROM artists WHERE name = 'Iron Maiden');"
    },
    {
        "question": "What is the name of the most popular genre in terms of tracks sold?",
        "query": "SELECT T3.Name FROM InvoiceLine AS T1 INNER JOIN Track AS T2 ON T1.TrackId = T2.TrackId INNER JOIN Genre AS T3 ON T2.GenreId = T3.GenreId GROUP BY T3.Name ORDER BY SUM(T1.Quantity) DESC LIMIT 1;"
    },
    {
        "question": "What are the names of all the playlists created by the customer with CustomerId 10?",
        "query": "SELECT T2.Name FROM PlaylistTrack AS T1 INNER JOIN Playlist AS T2 ON T1.PlaylistId = T2.PlaylistId WHERE T2.PlaylistId IN (SELECT PlaylistId FROM Playlist WHERE CustomerId = 10);"
    },
    {
        "question": "List the names of all tracks by 'AC/DC', along with their album titles.",
        "query": "SELECT T1.name, T3.title FROM tracks AS T1 INNER JOIN albums AS T3 ON T1.albumid = T3.albumid WHERE T1.composer = 'AC/DC';"
    },
    {
        "question": "List all tracks from the album 'Let There Be Rock'.",
        "query": "SELECT t.Name FROM Track AS t JOIN Album AS alb ON t.AlbumId = alb.AlbumId WHERE alb.Title = 'Let There Be Rock';"
    },
    {
        "question": "What are the names of the tracks in the playlist '90s Music'?",
        "query": "SELECT t.Name FROM Track AS t JOIN PlaylistTrack AS pt ON t.TrackId = pt.TrackId JOIN Playlist AS p ON pt.PlaylistId = p.PlaylistId WHERE p.Name = '90s Music';"
    },
    {
        "question": "What are the titles of albums released after 1990?",
        "query": "SELECT title FROM albums WHERE strftime('%Y', SUBSTR(releasedate, 1, 4)) > '1990';"
    },
    {
        "question": "How many tracks are there on the album 'Let There Be Rock'?",
        "query": "SELECT COUNT(*) FROM Track AS T1 INNER JOIN Album AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.Title = 'Let There Be Rock';"
    },
    {
        "question": "What is the total length of all the tracks on the album 'Big Ones'?",
        "query": "SELECT SUM(Milliseconds) FROM Track AS T1 INNER JOIN Album AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.Title = 'Big Ones';"
    },
    {
        "question": "What albums has the artist 'AC/DC' made?",
        "query": "SELECT T2.Title FROM Artist AS T1 INNER JOIN Album AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Name = 'AC/DC';"
    },
    {
        "question": "What is the average length of tracks in the Metal genre?",
        "query": "SELECT AVG(Milliseconds) FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Metal');"
    },
    {
        "question": "How many tracks are on the playlist '999'?",
        "query": "SELECT COUNT(*) FROM PlaylistTrack WHERE PlaylistId = (SELECT PlaylistId FROM Playlist WHERE Name = '999');"
    },
    {
        "question": "How many employees report to the employee with EmployeeId 2?",
        "query": "SELECT COUNT(*) FROM Employee WHERE ReportsTo = 2;"
    },
    {
        "question": "List the albums released in 1967.",
        "query": "SELECT title FROM albums WHERE release_year = 1967"
    },
    {
        "question": "List the tracks that are longer than 3 minutes.",
        "query": "SELECT name FROM tracks WHERE duration > 180"
    },
    {
        "question": "What is the shortest track on the 'White Album'?",
        "query": "SELECT name FROM tracks WHERE album = 'White Album' ORDER BY duration ASC LIMIT 1"
    },
    {
        "question": "What is the total duration of all tracks released in 1969?",
        "query": "SELECT SUM(T2.duration) FROM albums AS T1 JOIN tracks AS T2 ON T1.title = T2.album WHERE T1.release_year = 1969"
    },
    {
        "question": "What are the names of all the tracks in the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT T3.Name FROM Album AS T1 INNER JOIN Track AS T3 ON T1.AlbumId = T3.AlbumId WHERE T1.Title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "List all tracks purchased by the customer with CustomerId 5.",
        "query": "SELECT t.Name FROM Track AS t JOIN InvoiceLine AS il ON t.TrackId = il.TrackId JOIN Invoice AS i ON il.InvoiceId = i.InvoiceId WHERE i.CustomerId = 5;"
    },
    {
        "question": "What is the total cost of all the tracks in the playlist 'Brazilian Music'?",
        "query": "SELECT SUM(T2.unitprice) FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.trackid = T2.trackid WHERE T1.playlistid = (SELECT playlistid FROM playlists WHERE name = 'Brazilian Music');"
    },
    {
        "question": "What is the total number of tracks sold by each media type?",
        "query": "SELECT T2.name, SUM(T1.quantity) FROM invoice_items AS T1 INNER JOIN media_types AS T2 ON T1.mediatypeid = T2.mediatypeid GROUP BY T2.name;"
    },
    {
        "question": "What is the name of the customer who has spent the most money?",
        "query": "SELECT T2.firstname, T2.lastname FROM invoices AS T1 INNER JOIN customers AS T2 ON T1.customerid = T2.customerid ORDER BY T1.total DESC LIMIT 1;"
    },
    {
        "question": "Find the first name, last name, and email of all employees in the 'Sales' department.",
        "query": "SELECT first_name, last_name, email FROM employees WHERE department = 'Sales';"
    },
    {
        "question": "List the employees who earn more than $80,000.",
        "query": "SELECT first_name, last_name FROM employees WHERE salary > 80000;"
    },
    {
        "question": "Find the employee with the lowest salary.",
        "query": "SELECT first_name, last_name FROM employees ORDER BY salary ASC LIMIT 1;"
    },
    {
        "question": "List the employees in the 'Marketing' department sorted by their last names in alphabetical order.",
        "query": "SELECT first_name, last_name FROM employees WHERE department = 'Marketing' ORDER BY last_name ASC;"
    },
    {
        "question": "List the employees who were hired in the year 2022.",
        "query": "SELECT first_name, last_name FROM employees WHERE strftime('%Y', hire_date) = '2022';"
    },
    {
        "question": "Find the number of employees hired in each year.",
        "query": "SELECT strftime('%Y', hire_date) AS 'Year', COUNT(*) FROM employees GROUP BY 'Year';"
    },
    {
        "question": "List the employees whose first name starts with 'J'.",
        "query": "SELECT first_name, last_name FROM employees WHERE first_name LIKE 'J%';"
    },
    {
        "question": "Find the employees whose salary is between $60,000 and $70,000.",
        "query": "SELECT first_name, last_name FROM employees WHERE salary BETWEEN 60000 AND 70000;"
    },
    {
        "question": "Find the name and birth date of all employees who work in the 'Sales' department.",
        "query": "SELECT emp_name, birth_date FROM employees WHERE dept_id = (SELECT dept_id FROM departments WHERE dept_name = 'Sales');"
    },
    {
        "question": "Find the name of the employee with the highest salary.",
        "query": "SELECT emp_name FROM employees ORDER BY salary DESC LIMIT 1;"
    },
    {
        "question": "List the names of all employees who have a salary greater than the average salary.",
        "query": "SELECT emp_name FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);"
    },
    {
        "question": "List the names of all employees and their managers' names.",
        "query": "SELECT e.emp_name, m.emp_name AS manager_name FROM employees e LEFT JOIN employees m ON e.mgr_id = m.emp_id;"
    },
    {
        "question": "Find the names of all employees who work in the same department as 'John Smith'.",
        "query": "SELECT emp_name FROM employees WHERE dept_id = (SELECT dept_id FROM employees WHERE emp_name = 'John Smith') AND emp_name != 'John Smith';"
    },
    {
        "question": "List the names of all departments and the total salary of all employees in each department.",
        "query": "SELECT d.dept_name, SUM(e.salary) AS total_salary FROM departments d LEFT JOIN employees e ON d.dept_id = e.dept_id GROUP BY d.dept_name;"
    },
    {
        "question": "What are the names and email addresses of all customers who live in 'New York'?",
        "query": "SELECT Name, Email FROM Customers WHERE City = 'New York'"
    },
    {
        "question": "What are the order IDs for all orders placed by the customer with CustomerID 1?",
        "query": "SELECT OrderID FROM Orders WHERE CustomerID = 1"
    },
    {
        "question": "What is the total amount for order with OrderID 101?",
        "query": "SELECT TotalAmount FROM Orders WHERE OrderID = 101"
    },
    {
        "question": "List the names of products that have been ordered.",
        "query": "SELECT T2.ProductName FROM OrderItems AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "question": "What is the name of the customer who placed order with OrderID 102?",
        "query": "SELECT T2.Name FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.OrderID = 102"
    },
    {
        "question": "What are the names of the products and their corresponding quantities in order with OrderID 103?",
        "query": "SELECT T2.ProductName, T1.Quantity FROM OrderItems AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.OrderID = 103"
    },
    {
        "question": "List the names of artists and their albums.",
        "query": "SELECT artists.name, albums.title FROM artists INNER JOIN albums ON artists.artist_id = albums.artist_id;"
    },
    {
        "question": "What is the total sales amount for each customer?",
        "query": "SELECT customers.first_name, customers.last_name, SUM(invoices.total) FROM customers INNER JOIN invoices ON customers.customer_id = invoices.customer_id GROUP BY customers.customer_id;"
    },
    {
        "question": "List the tracks on the album 'For Those About To Rock We Salute You'.",
        "query": "SELECT tracks.name FROM tracks INNER JOIN albums ON tracks.album_id = albums.album_id WHERE albums.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "What is the total number of invoices?",
        "query": "SELECT COUNT(*) FROM invoices;"
    },
    {
        "question": "What is the capacity of the stadium named 'Estadio Santiago Bernab\u00e9u'?",
        "query": "SELECT capacity FROM stadiums WHERE name = 'Estadio Santiago Bernab\u00e9u';"
    },
    {
        "question": "Which stadium has the highest capacity?",
        "query": "SELECT name FROM stadiums ORDER BY capacity DESC LIMIT 1;"
    },
    {
        "question": "What are the names and capacities of stadiums with a capacity greater than 60,000?",
        "query": "SELECT name, capacity FROM stadiums WHERE capacity > 60000;"
    },
    {
        "question": "List the names of stadiums in ascending order of their capacity.",
        "query": "SELECT name FROM stadiums ORDER BY capacity ASC;"
    },
    {
        "question": "How many stadiums are there in total?",
        "query": "SELECT COUNT(*) FROM stadiums;"
    },
    {
        "question": "Find the names of stadiums with capacities between 50,000 and 70,000.",
        "query": "SELECT name FROM stadiums WHERE capacity BETWEEN 50000 AND 70000;"
    },
    {
        "question": "List the names and capacities of all stadiums located in 'Madrid'.",
        "query": "SELECT name, capacity FROM stadiums WHERE location = 'Madrid';"
    },
    {
        "question": "Which customer has made the most purchases (based on the number of invoices)?",
        "query": "SELECT first_name, last_name FROM customers WHERE customer_id = (SELECT customer_id FROM invoices GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1);"
    },
    {
        "question": "What is the total revenue generated from each album?",
        "query": "SELECT albums.title, SUM(invoice_items.quantity * tracks.unit_price) FROM albums INNER JOIN tracks ON albums.album_id = tracks.album_id INNER JOIN invoice_items ON tracks.track_id = invoice_items.track_id GROUP BY albums.title;"
    },
    {
        "question": "What are the names of the playlists that contain the track 'For Those About To Rock (We Salute You)'?",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN playlist_tracks AS T3 ON T1.trackid = T3.trackid INNER JOIN playlists AS T2 ON T3.playlistid = T2.playlistid WHERE T1.name = 'For Those About To Rock (We Salute You)';"
    },
    {
        "question": "What is the email address of the customer named Luis Gonzalez?",
        "query": "SELECT Email FROM Customer WHERE FirstName = 'Luis' AND LastName = 'Gonzalez';"
    },
    {
        "question": "What are the names of all the invoices issued to the customer with CustomerId 1?",
        "query": "SELECT InvoiceId FROM Invoice WHERE CustomerId = 1;"
    },
    {
        "question": "What is the total amount of the invoice with InvoiceId 1?",
        "query": "SELECT Total FROM Invoice WHERE InvoiceId = 1;"
    },
    {
        "question": "List all invoices issued in 2009.",
        "query": "SELECT * FROM Invoice WHERE strftime('%Y', InvoiceDate) = '2009';"
    },
    {
        "question": "What is the name of the artist who recorded the track 'Let It Be'?",
        "query": "SELECT T2.Name FROM Track AS T1 INNER JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Name = 'Let It Be';"
    },
    {
        "question": "List all tracks in the genre 'Rock'.",
        "query": "SELECT T2.Name FROM Genre AS T1 INNER JOIN Track AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Rock';"
    },
    {
        "question": "What is the total length of all tracks in the playlist 'Music'?",
        "query": "SELECT SUM(T3.Milliseconds) FROM Playlist AS T1 INNER JOIN PlaylistTrack AS T2 ON T1.PlaylistId = T2.PlaylistId INNER JOIN Track AS T3 ON T2.TrackId = T3.TrackId WHERE T1.Name = 'Music';"
    },
    {
        "question": "List all tracks purchased by the customer named Luis Gonzalez.",
        "query": "SELECT T4.Name FROM Customer AS T1 INNER JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId INNER JOIN InvoiceLine AS T3 ON T2.InvoiceId = T3.InvoiceId INNER JOIN Track AS T4 ON T3.TrackId = T4.TrackId WHERE T1.FirstName = 'Luis' AND T1.LastName = 'Gonzalez';"
    },
    {
        "question": "What is the email address of the customer named 'Astrid Gruber'?",
        "query": "SELECT email FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber';"
    },
    {
        "question": "What is the total amount spent by the customer with the highest support rep id?",
        "query": "SELECT SUM(total) FROM invoices WHERE customer_id = (SELECT customer_id FROM customers ORDER BY support_rep_id DESC LIMIT 1);"
    },
    {
        "question": "List the names of all tracks purchased by the customer 'Helena Hol\u00fd'.",
        "query": "SELECT T3.name FROM customers AS T1 INNER JOIN invoices AS T2 ON T1.customer_id = T2.customer_id INNER JOIN invoice_items AS T3 ON T2.invoice_id = T3.invoice_id INNER JOIN tracks AS T4 ON T3.track_id = T4.track_id WHERE T1.first_name = 'Helena' AND T1.last_name = 'Hol\u00fd';"
    },
    {
        "question": "List all tracks from the album 'For Those About To Rock We Salute You'.",
        "query": "SELECT t.Name FROM Track AS t JOIN Album AS a ON t.AlbumId = a.AlbumId WHERE a.Title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "Who is the supervisor of the employee with EmployeeId 5?",
        "query": "SELECT e2.FirstName, e2.LastName FROM Employee AS e1 JOIN Employee AS e2 ON e1.ReportsTo = e2.EmployeeId WHERE e1.EmployeeId = 5;"
    },
    {
        "question": "List all invoices and the customer's country.",
        "query": "SELECT i.InvoiceId, c.Country FROM Invoice AS i JOIN Customer AS c ON i.CustomerId = c.CustomerId;"
    },
    {
        "question": "What are the names of the artists and the titles of the albums they have released?",
        "query": "SELECT artists.name, albums.title FROM artists INNER JOIN albums ON artists.artistid = albums.artistid;"
    },
    {
        "question": "What are the names of the tracks by the artist 'AC/DC'?",
        "query": "SELECT T2.Name FROM Artist AS T1 INNER JOIN Album AS T2 ON T1.ArtistId = T2.ArtistId INNER JOIN Track AS T3 ON T2.AlbumId = T3.AlbumId WHERE T1.Name = 'AC/DC';"
    },
    {
        "question": "What is the total length of the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT SUM(Milliseconds) FROM Track WHERE AlbumId = (SELECT AlbumId FROM Album WHERE Title = 'For Those About To Rock We Salute You');"
    },
    {
        "question": "What is the total revenue generated from the sales of tracks by the artist 'Led Zeppelin'?",
        "query": "SELECT SUM(T3.UnitPrice * T2.Quantity) FROM Artist AS T1 INNER JOIN InvoiceLine AS T2 ON T1.ArtistId = (SELECT ArtistId FROM Album WHERE AlbumId = T2.TrackId) INNER JOIN Track as T3 ON T3.TrackId = T2.TrackId WHERE T1.Name = 'Led Zeppelin';"
    },
    {
        "question": "List the names and email addresses of all customers who have purchased tracks from the genre 'Rock'.",
        "query": "SELECT DISTINCT T2.FirstName, T2.LastName, T2.Email FROM Track AS T1 INNER JOIN InvoiceLine AS T3 ON T1.TrackId = T3.TrackId INNER JOIN Invoice AS T4 ON T3.InvoiceId = T4.InvoiceId INNER JOIN Customer AS T2 ON T4.CustomerId = T2.CustomerId WHERE T1.GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Rock');"
    },
    {
        "question": "Find the name and birth year of the artist who created the artwork titled 'The Starry Night'.",
        "query": "SELECT artist_name, birth_year FROM artists INNER JOIN artworks ON artists.artist_id = artworks.artist_id WHERE artwork_title = 'The Starry Night';"
    },
    {
        "question": "List all artworks created in the 20th century, along with their titles, creation years, and artists' names.",
        "query": "SELECT artwork_title, creation_year, artist_name FROM artworks INNER JOIN artists ON artworks.artist_id = artists.artist_id WHERE creation_year BETWEEN 1901 AND 2000;"
    },
    {
        "question": "What is the average acquisition price of artworks acquired by the museum in the year 2020?",
        "query": "SELECT AVG(acquisition_price) FROM acquisitions WHERE acquisition_year = 2020;"
    },
    {
        "question": "List the names of artists born after 1950 who have created artworks in the 'Impressionism' style.",
        "query": "SELECT artist_name FROM artists INNER JOIN artworks ON artists.artist_id = artworks.artist_id WHERE birth_year > 1950 AND artwork_style = 'Impressionism';"
    },
    {
        "question": "Find the total number of artworks currently on display at the museum.",
        "query": "SELECT COUNT(artwork_id) FROM artworks WHERE on_display = 'Yes';"
    },
    {
        "question": "List the titles and acquisition years of all artworks acquired by the museum after the year 2000, sorted by acquisition year in descending order.",
        "query": "SELECT artwork_title, acquisition_year FROM acquisitions INNER JOIN artworks ON acquisitions.artwork_id = artworks.artwork_id WHERE acquisition_year > 2000 ORDER BY acquisition_year DESC;"
    },
    {
        "question": "Which artwork has the highest acquisition price, and what is the name of the artist who created it?",
        "query": "SELECT artwork_title, artist_name FROM artworks INNER JOIN artists ON artists.artist_id = artworks.artist_id INNER JOIN acquisitions ON artworks.artwork_id = acquisitions.artwork_id ORDER BY acquisition_price DESC LIMIT 1;"
    },
    {
        "question": "List the names of all artists whose artworks are currently not on display at the museum.",
        "query": "SELECT artist_name FROM artists INNER JOIN artworks ON artists.artist_id = artworks.artist_id WHERE on_display = 'No';"
    },
    {
        "question": "Find the acquisition price, acquisition year, and title of the artwork with the ID 'AW003'.",
        "query": "SELECT acquisition_price, acquisition_year, artwork_title FROM acquisitions INNER JOIN artworks ON acquisitions.artwork_id = artworks.artwork_id WHERE artworks.artwork_id = 'AW003';"
    },
    {
        "question": "List all artists and their birth countries who have created 'Sculpture' artworks.",
        "query": "SELECT artist_name, birth_country FROM artists INNER JOIN artworks ON artists.artist_id = artworks.artist_id WHERE artwork_type = 'Sculpture';"
    },
    {
        "question": "Which playlist contains the track 'Dazed and Confused'?",
        "query": "SELECT playlists.name FROM playlists INNER JOIN playlist_tracks ON playlists.playlist_id = playlist_tracks.playlist_id INNER JOIN tracks ON playlist_tracks.track_id = tracks.track_id WHERE tracks.name = 'Dazed and Confused';"
    },
    {
        "question": "List all tracks that are not included in any playlist.",
        "query": "SELECT name FROM tracks EXCEPT SELECT tracks.name FROM tracks INNER JOIN playlist_tracks ON tracks.track_id = playlist_tracks.track_id;"
    },
    {
        "question": "What is the name of the shortest track in the 'Metal' playlist?",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id WHERE T1.playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Metal') ORDER BY T2.milliseconds ASC LIMIT 1;"
    },
    {
        "question": "List the names of all the tracks in the 'Rock' genre.",
        "query": "SELECT T2.Name FROM genres AS T1 INNER JOIN tracks AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = 'Rock';"
    },
    {
        "question": "List all the tracks on the album 'For Those About To Rock We Salute You'.",
        "query": "SELECT T2.Name FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.AlbumId = T2.AlbumId WHERE T1.Title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "What is the total length of all tracks in the database?",
        "query": "SELECT SUM(Milliseconds) FROM tracks;"
    },
    {
        "question": "List the names of all playlists created by the customer with CustomerId 5.",
        "query": "SELECT Name FROM playlists WHERE CustomerId = 5;"
    },
    {
        "question": "Who is the manager of the employee with EmployeeId 3?",
        "query": "SELECT T2.FirstName, T2.LastName FROM employees AS T1 INNER JOIN employees AS T2 ON T1.ReportsTo = T2.EmployeeId WHERE T1.EmployeeId = 3;"
    },
    {
        "question": "How many customers are supported by each sales support agent?",
        "query": "SELECT SupportRepId, COUNT(*) AS CustomerCount FROM customers GROUP BY SupportRepId;"
    },
    {
        "question": "List all invoices with a billing address in Germany.",
        "query": "SELECT * FROM invoices WHERE BillingCountry = 'Germany';"
    },
    {
        "question": "List all the albums by 'Iron Maiden' along with their titles.",
        "query": "SELECT al.Title FROM Album AS al JOIN Artist AS ar ON al.ArtistId = ar.ArtistId WHERE ar.Name = 'Iron Maiden';"
    },
    {
        "question": "What is the total number of tracks in the album 'Let There Be Rock'?",
        "query": "SELECT COUNT(*) FROM Track AS t JOIN Album AS al ON t.AlbumId = al.AlbumId WHERE al.Title = 'Let There Be Rock';"
    },
    {
        "question": "Which customer spent the most money in the Chinook store?",
        "query": "SELECT CustomerId FROM Invoice ORDER BY Total DESC LIMIT 1;"
    },
    {
        "question": "What are the names of the top 5 most popular genres in terms of number of tracks?",
        "query": "SELECT Genre.Name FROM Genre JOIN Track ON Genre.GenreId = Track.GenreId GROUP BY Genre.Name ORDER BY COUNT(Track.TrackId) DESC LIMIT 5;"
    },
    {
        "question": "Which employee is responsible for the most number of customers?",
        "query": "SELECT SupportRepId FROM Customer GROUP BY SupportRepId ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "question": "What is the total cost of all the tracks in the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT SUM(unitprice * quantity) FROM invoice_items WHERE invoiceid IN (SELECT invoiceid FROM invoices WHERE customerid IN (SELECT customerid FROM customers WHERE country = 'USA'));"
    },
    {
        "question": "List the names of the customers who have purchased tracks composed by 'AC/DC'.",
        "query": "SELECT T3.firstname, T3.lastname FROM tracks AS T1 INNER JOIN invoice_items AS T2 ON T1.trackid = T2.trackid INNER JOIN invoices AS T4 ON T2.invoiceid = T4.invoiceid INNER JOIN customers AS T3 ON T4.customerid = T3.customerid WHERE T1.composer = 'AC/DC';"
    },
    {
        "question": "List the names of the tracks that belong to the 'Alternative & Punk' genre and have a unit price greater than $0.99.",
        "query": "SELECT T1.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid INNER JOIN invoice_items AS T3 ON T1.trackid = T3.trackid WHERE T2.name = 'Alternative & Punk' AND T3.unitprice > 0.99;"
    },
    {
        "question": "List the names of the genres and the number of tracks in each genre, ordered by the number of tracks in ascending order.",
        "query": "SELECT T2.name, COUNT(T1.trackid) FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid GROUP BY T2.name ORDER BY COUNT(T1.trackid) ASC;"
    },
    {
        "question": "What is the total revenue generated from invoices in 2011?",
        "query": "SELECT SUM(total) FROM invoices WHERE strftime('%Y', invoicedate) = '2011';"
    },
    {
        "question": "List the names of departments that have more than 5 employees.",
        "query": "SELECT name FROM departments WHERE id IN (SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(*) > 5);"
    },
    {
        "question": "List the names of departments and the number of employees in each department.",
        "query": "SELECT departments.name, COUNT(employees.id) AS num_employees FROM departments LEFT JOIN employees ON departments.id = employees.department_id GROUP BY departments.name;"
    },
    {
        "question": "What is the total salary expense for each department?",
        "query": "SELECT departments.name, SUM(employees.salary) FROM employees JOIN departments ON employees.department_id = departments.id GROUP BY departments.name;"
    },
    {
        "question": "Find the names of employees who have a salary greater than the average salary of their department.",
        "query": "SELECT name FROM employees WHERE salary > (SELECT AVG(salary) FROM employees AS e2 WHERE e2.department_id = employees.department_id);"
    },
    {
        "question": "What are the names of the tracks on the album 'Let There Be Rock'?",
        "query": "SELECT T2.name FROM Album AS T1 INNER JOIN Track AS T2 ON T1.album_id = T2.album_id WHERE T1.title = 'Let There Be Rock';"
    },
    {
        "question": "How many tracks are there on the album 'Big Ones'?",
        "query": "SELECT COUNT(*) FROM Track WHERE album_id = (SELECT album_id FROM Album WHERE title = 'Big Ones');"
    },
    {
        "question": "What is the average length of a track on the album 'Jagged Little Pill' in milliseconds?",
        "query": "SELECT AVG(milliseconds) FROM Track WHERE album_id = (SELECT album_id FROM Album WHERE title = 'Jagged Little Pill');"
    },
    {
        "question": "List the names of all tracks that are longer than 5 minutes (300000 milliseconds).",
        "query": "SELECT name FROM Track WHERE milliseconds > 300000;"
    },
    {
        "question": "What is the name of the artist whose albums have the highest average track length?",
        "query": "SELECT T2.name FROM Track AS T1 INNER JOIN Album AS T3 ON T1.album_id = T3.album_id INNER JOIN Artist AS T2 ON T3.artist_id = T2.artist_id GROUP BY T2.name ORDER BY AVG(T1.milliseconds) DESC LIMIT 1;"
    },
    {
        "question": "What are the titles of albums composed by 'Angus Young'?",
        "query": "SELECT title FROM albums WHERE albumid IN (SELECT albumid FROM tracks WHERE composer = 'Angus Young');"
    },
    {
        "question": "List the names of all albums and their corresponding genres.",
        "query": "SELECT T1.title, T2.name FROM albums AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid;"
    },
    {
        "question": "What are the names of the tracks in the album with the highest number of tracks?",
        "query": "SELECT name FROM tracks WHERE albumid = (SELECT albumid FROM tracks GROUP BY albumid ORDER BY COUNT(*) DESC LIMIT 1);"
    },
    {
        "question": "List the album titles and the number of tracks in each album, ordered by the number of tracks in descending order.",
        "query": "SELECT T2.title, COUNT(T1.trackid) FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid GROUP BY T1.albumid ORDER BY COUNT(T1.trackid) DESC;"
    },
    {
        "question": "What is the total duration of all tracks composed by 'AC/DC'?",
        "query": "SELECT SUM(milliseconds) FROM tracks WHERE composer = 'AC/DC';"
    },
    {
        "question": "List the names of tracks and their respective album titles for tracks composed by 'AC/DC'.",
        "query": "SELECT T1.name, T2.title FROM tracks AS T1 INNER JOIN albums AS T2 ON T1.albumid = T2.albumid WHERE T1.composer = 'AC/DC';"
    },
    {
        "question": "What are the names and unit prices of tracks from the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT name, unitprice FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'For Those About To Rock We Salute You');"
    },
    {
        "question": "List the titles of albums in the 'Metal' genre.",
        "query": "SELECT title FROM albums WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Metal');"
    },
    {
        "question": "List the names of products that cost more than $10.",
        "query": "SELECT Name FROM Products WHERE Price > 10"
    },
    {
        "question": "List the order IDs and total amounts for orders placed by customer 'Jane Smith'.",
        "query": "SELECT OrderID, TotalAmount FROM Orders WHERE CustomerID = (SELECT CustomerID FROM Customers WHERE Name = 'Jane Smith')"
    },
    {
        "question": "What are the names of products included in order #123?",
        "query": "SELECT T2.Name FROM OrderItems AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.OrderID = 123"
    },
    {
        "question": "How many orders has 'John Doe' placed?",
        "query": "SELECT COUNT(*) FROM Orders WHERE CustomerID = (SELECT CustomerID FROM Customers WHERE Name = 'John Doe')"
    },
    {
        "question": "Which customers have placed orders for 'Laptop'?",
        "query": "SELECT T3.Name FROM OrderItems AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Orders AS T3 ON T1.OrderID = T3.OrderID WHERE T2.Name = 'Laptop'"
    },
    {
        "question": "What is the most expensive product ordered by 'Jane Smith'?",
        "query": "SELECT T2.Name FROM Orders AS T1 INNER JOIN OrderItems AS T3 ON T1.OrderID = T3.OrderID INNER JOIN Products AS T2 ON T3.ProductID = T2.ProductID WHERE T1.CustomerID = (SELECT CustomerID FROM Customers WHERE Name = 'Jane Smith') ORDER BY T2.Price DESC LIMIT 1"
    },
    {
        "question": "Which customer has placed the largest order (in terms of total amount)?",
        "query": "SELECT T2.Name FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY T1.TotalAmount DESC LIMIT 1"
    },
    {
        "question": "What is the average unit price of tracks in the 'Brazilian Music' playlist?",
        "query": "SELECT AVG(unit_price) FROM tracks WHERE track_id IN (SELECT track_id FROM playlist_tracks WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'Brazilian Music'));"
    },
    {
        "question": "List all playlists that contain tracks composed by 'Miles Davis'.",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 INNER JOIN playlists AS T2 ON T1.playlist_id = T2.playlist_id WHERE T1.track_id IN (SELECT track_id FROM tracks WHERE composer = 'Miles Davis');"
    },
    {
        "question": "How many playlists contain tracks that cost more than $0.99?",
        "query": "SELECT COUNT(DISTINCT playlist_id) FROM playlist_tracks WHERE track_id IN (SELECT track_id FROM tracks WHERE unit_price > 0.99);"
    },
    {
        "question": "List the names of playlists that have at least one track in common with the 'TV Shows' playlist.",
        "query": "SELECT T3.name FROM playlist_tracks AS T1 INNER JOIN playlist_tracks AS T2 ON T1.track_id = T2.track_id INNER JOIN playlists AS T3 ON T2.playlist_id = T3.playlist_id WHERE T1.playlist_id = (SELECT playlist_id FROM playlists WHERE name = 'TV Shows') AND T2.playlist_id != (SELECT playlist_id FROM playlists WHERE name = 'TV Shows');"
    },
    {
        "question": "Find the name and genre of all albums released in 2010.",
        "query": "SELECT title, genre FROM albums WHERE release_year = 2010;"
    },
    {
        "question": "What is the average duration of songs in the album 'Thriller'?",
        "query": "SELECT AVG(duration) FROM songs WHERE album_id = (SELECT album_id FROM albums WHERE title = 'Thriller');"
    },
    {
        "question": "Find the names of all songs in the 'Pop' genre with a duration longer than 4 minutes.",
        "query": "SELECT song_name FROM songs WHERE genre = 'Pop' AND duration > 240;"
    },
    {
        "question": "Which album has the longest duration song?",
        "query": "SELECT albums.title FROM albums INNER JOIN songs ON albums.album_id = songs.album_id ORDER BY songs.duration DESC LIMIT 1;"
    },
    {
        "question": "List the names of all artists and the titles of their albums released before 2000.",
        "query": "SELECT artist_name, title FROM artists INNER JOIN albums ON artists.artist_id = albums.artist_id WHERE release_year < 2000;"
    },
    {
        "question": "How many songs are there in the 'Hip Hop' genre?",
        "query": "SELECT COUNT(*) FROM songs WHERE genre = 'Hip Hop';"
    },
    {
        "question": "What is the total duration of all songs in the album 'Back in Black'?",
        "query": "SELECT SUM(duration) FROM songs WHERE album_id = (SELECT album_id FROM albums WHERE title = 'Back in Black');"
    },
    {
        "question": "Find the name and release year of the album with the shortest duration song.",
        "query": "SELECT albums.title, albums.release_year FROM albums INNER JOIN songs ON albums.album_id = songs.album_id ORDER BY songs.duration ASC LIMIT 1;"
    },
    {
        "question": "List the names of all songs and their respective genres from albums released after 2015.",
        "query": "SELECT song_name, genre FROM songs WHERE album_id IN (SELECT album_id FROM albums WHERE release_year > 2015);"
    },
    {
        "question": "Show the SQL statement that created the 'table_name' table.",
        "query": "SELECT sql FROM sqlite_master WHERE type='table' AND name='table_name';"
    },
    {
        "question": "Check if a table named 'my_table' exists in the database.",
        "query": "SELECT EXISTS (SELECT 1 FROM sqlite_master WHERE type='table' AND name='my_table');"
    },
    {
        "question": "What are the names of all the indices on the table 'table_name'?",
        "query": "SELECT name FROM sqlite_master WHERE type='index' AND tbl_name='table_name';"
    },
    {
        "question": "List the names of all albums released in 1967.",
        "query": "SELECT album_name FROM albums WHERE release_year = 1967"
    },
    {
        "question": "What is the total duration of all tracks on the album 'Sgt. Pepper's Lonely Hearts Club Band'?",
        "query": "SELECT SUM(duration) FROM tracks WHERE album_id = (SELECT id FROM albums WHERE album_name = 'Sgt. Pepper\\'s Lonely Hearts Club Band')"
    },
    {
        "question": "What is the average duration of tracks on the album 'The White Album'?",
        "query": "SELECT AVG(duration) FROM tracks WHERE album_id = (SELECT id FROM albums WHERE album_name = 'The White Album')"
    },
    {
        "question": "List the names of all tracks that are longer than 5 minutes.",
        "query": "SELECT track_name FROM tracks WHERE duration > 300"
    },
    {
        "question": "Which album was released the earliest?",
        "query": "SELECT album_name FROM albums ORDER BY release_year ASC LIMIT 1"
    },
    {
        "question": "List the names of all albums and the number of tracks on each album.",
        "query": "SELECT album_name, (SELECT COUNT(*) FROM tracks WHERE album_id = albums.id) AS track_count FROM albums"
    },
    {
        "question": "Which products have been ordered by customers located in 'New York'?",
        "query": "SELECT p.product_name FROM Products p INNER JOIN OrderItems oi ON p.product_id = oi.product_id INNER JOIN Orders o ON oi.order_id = o.order_id INNER JOIN Customers c ON o.customer_id = c.customer_id WHERE c.customer_city = 'New York'"
    },
    {
        "question": "What is the average order amount for orders placed in 2023?",
        "query": "SELECT AVG(order_amount) FROM Orders WHERE strftime('%Y', order_date) = '2023'"
    },
    {
        "question": "List the customer names and their total order amounts for customers who have spent more than $500 in total.",
        "query": "SELECT c.customer_name, SUM(o.order_amount) AS total_spent FROM Customers c INNER JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name HAVING total_spent > 500"
    },
    {
        "question": "Which customer placed the order with the highest amount?",
        "query": "SELECT c.customer_name FROM Customers c INNER JOIN Orders o ON c.customer_id = o.customer_id ORDER BY o.order_amount DESC LIMIT 1"
    },
    {
        "question": "How many orders have been placed for each product?",
        "query": "SELECT p.product_name, COUNT(oi.order_id) AS num_orders FROM Products p INNER JOIN OrderItems oi ON p.product_id = oi.product_id GROUP BY p.product_name"
    },
    {
        "question": "List the customer city and the total number of orders placed by customers in each city.",
        "query": "SELECT c.customer_city, COUNT(o.order_id) AS num_orders FROM Customers c INNER JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_city"
    },
    {
        "question": "What is the name of the genre with the highest average track bytes?",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genreid = T2.genreid GROUP BY T2.name ORDER BY AVG(T1.bytes) DESC LIMIT 1;"
    },
    {
        "question": "What are the names of the tracks on 'Revolver' that are longer than 3 minutes?",
        "query": "SELECT name FROM tracks WHERE album = 'Revolver' AND milliseconds > 180000"
    },
    {
        "question": "List the tracks on 'Sgt. Pepper's Lonely Hearts Club Band' in order of their position on the album.",
        "query": "SELECT name FROM tracks WHERE album = 'Sgt. Pepper\\'s Lonely Hearts Club Band' ORDER BY track_number"
    },
    {
        "question": "What is the title of the shortest track on 'Abbey Road'?",
        "query": "SELECT name FROM tracks WHERE album = 'Abbey Road' ORDER BY milliseconds ASC LIMIT 1"
    },
    {
        "question": "What is the name of the longest track on the album with the earliest release date?",
        "query": "SELECT T2.name FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.title = T2.album WHERE T1.release_date = ( SELECT MIN(release_date) FROM albums) ORDER BY T2.milliseconds DESC LIMIT 1"
    },
    {
        "question": "Find the album titles and the number of tracks for albums with more than 10 tracks.",
        "query": "SELECT album, COUNT(*) AS num_tracks FROM tracks GROUP BY album HAVING num_tracks > 10"
    },
    {
        "question": "How many tracks are in the playlist 'Music'.",
        "query": "SELECT COUNT(*) FROM PlaylistTrack pt JOIN Playlist p ON pt.PlaylistId = p.PlaylistId WHERE p.Name = 'Music';"
    },
    {
        "question": "List the names of all tracks in the 'Grunge' genre that are longer than 5 minutes.",
        "query": "SELECT t.Name FROM Track t JOIN Genre g ON t.GenreId = g.GenreId WHERE g.Name = 'Grunge' AND t.Milliseconds > 300000;"
    },
    {
        "question": "List the names of all albums released in 2010.",
        "query": "SELECT Title FROM Album WHERE strftime('%Y', ReleaseDate) = '2010';"
    },
    {
        "question": "List the names of the artists whose tracks have been purchased by the customer with CustomerId 10.",
        "query": "SELECT ar.Name FROM Artist ar JOIN Album al ON ar.ArtistId = al.ArtistId JOIN Track t ON al.AlbumId = t.AlbumId JOIN InvoiceLine il ON t.TrackId = il.TrackId JOIN Invoice i ON il.InvoiceId = i.InvoiceId WHERE i.CustomerId = 10 GROUP BY ar.ArtistId;"
    },
    {
        "question": "List the names and email addresses of all customers who have purchased tracks from the 'Alternative & Punk' genre.",
        "query": "SELECT DISTINCT Customer.FirstName, Customer.LastName, Customer.Email FROM Customer INNER JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId INNER JOIN InvoiceLine ON Invoice.InvoiceId = InvoiceLine.InvoiceId INNER JOIN Track ON InvoiceLine.TrackId = Track.TrackId INNER JOIN Genre ON Track.GenreId = Genre.GenreId WHERE Genre.Name = 'Alternative & Punk';"
    },
    {
        "question": "What are the top 5 most popular genres based on the number of tracks sold?",
        "query": "SELECT Genre.Name FROM Genre INNER JOIN Track ON Genre.GenreId = Track.GenreId INNER JOIN InvoiceLine ON Track.TrackId = InvoiceLine.TrackId GROUP BY Genre.Name ORDER BY SUM(InvoiceLine.Quantity) DESC LIMIT 5;"
    },
    {
        "question": "Find the first name, last name, and salary of all employees.",
        "query": "SELECT first_name, last_name, salary FROM employees;"
    },
    {
        "question": "Find the names of all employees who work in the 'Sales' department.",
        "query": "SELECT first_name, last_name FROM employees WHERE department_id = (SELECT department_id FROM departments WHERE name = 'Sales');"
    },
    {
        "question": "Find the names of all employees who have a salary greater than the average salary of their department.",
        "query": "SELECT T1.first_name, T1.last_name FROM employees AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.salary > (SELECT AVG(salary) FROM employees WHERE department_id = T1.department_id);"
    },
    {
        "question": "Find the first name, last name and hire date of all employees who were hired in the year 2000.",
        "query": "SELECT first_name, last_name, hire_date FROM employees WHERE strftime('%Y', hire_date) = '2000';"
    },
    {
        "question": "Find the names of customers who have placed orders in the past month.",
        "query": "SELECT customerName FROM Customers WHERE customerID IN (SELECT customerID FROM Orders WHERE orderDate >= date('now', '-1 month'));"
    },
    {
        "question": "List the products that have a price greater than the average price of all products.",
        "query": "SELECT productName FROM Products WHERE price > (SELECT AVG(price) FROM Products);"
    },
    {
        "question": "What is the total revenue generated from sales of products in the 'Clothing' category?",
        "query": "SELECT SUM(price * quantity) FROM OrderItems WHERE productID IN (SELECT productID FROM Products WHERE category = 'Clothing');"
    },
    {
        "question": "Find the customer name and email address of the customer who placed the order with orderID 10.",
        "query": "SELECT customerName, email FROM Customers WHERE customerID = (SELECT customerID FROM Orders WHERE orderID = 10);"
    },
    {
        "question": "List the order IDs and total amounts for all orders, including the customer name.",
        "query": "SELECT T1.orderID, SUM(T2.quantity * T3.price) AS totalAmount, T4.customerName FROM Orders AS T1 INNER JOIN OrderItems AS T2 ON T1.orderID = T2.orderID INNER JOIN Products AS T3 ON T2.productID = T3.productID INNER JOIN Customers AS T4 ON T1.customerID = T4.customerID GROUP BY T1.orderID;"
    },
    {
        "question": "Which product category has the highest average price?",
        "query": "SELECT category FROM Products GROUP BY category ORDER BY AVG(price) DESC LIMIT 1;"
    },
    {
        "question": "What are the names of all the genres?",
        "query": "SELECT name FROM genres;"
    },
    {
        "question": "What is the total price of all tracks on the album 'For Those About To Rock We Salute You'?",
        "query": "SELECT SUM(unitprice) FROM tracks WHERE albumid = (SELECT albumid FROM albums WHERE title = 'For Those About To Rock We Salute You');"
    },
    {
        "question": "List the names of all artists who have albums in the 'Metal' genre.",
        "query": "SELECT T2.name FROM albums AS T1 INNER JOIN artists AS T2 ON T1.artistid = T2.artistid WHERE T1.albumid IN (SELECT albumid FROM tracks WHERE genreid = (SELECT genreid FROM genres WHERE name = 'Metal'));"
    },
    {
        "question": "What is the name of the genre with the shortest average track length?",
        "query": "SELECT name FROM genres WHERE genreid = (SELECT genreid FROM tracks GROUP BY genreid ORDER BY AVG(milliseconds) ASC LIMIT 1);"
    },
    {
        "question": "Find the track with the longest duration.",
        "query": "SELECT track_name FROM tracks ORDER BY milliseconds DESC LIMIT 1"
    },
    {
        "question": "What is the total duration of music in the 'Rock' genre?",
        "query": "SELECT SUM(milliseconds) FROM tracks WHERE genre_id = (SELECT genre_id FROM genres WHERE name = 'Rock')"
    },
    {
        "question": "Find the most expensive track.",
        "query": "SELECT track_name FROM tracks ORDER BY unit_price DESC LIMIT 1"
    },
    {
        "question": "Find the album with the most tracks.",
        "query": "SELECT title FROM albums WHERE album_id = (SELECT album_id FROM tracks GROUP BY album_id ORDER BY COUNT(track_id) DESC LIMIT 1)"
    },
    {
        "question": "List all tracks that are longer than the average track length.",
        "query": "SELECT track_name FROM tracks WHERE milliseconds > (SELECT AVG(milliseconds) FROM tracks)"
    },
    {
        "question": "Which genre has the highest average track price?",
        "query": "SELECT T2.name FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genre_id = T2.genre_id GROUP BY T2.name ORDER BY AVG(T1.unit_price) DESC LIMIT 1;"
    },
    {
        "question": "List the names of all tracks that are longer than 6 minutes (360000 milliseconds).",
        "query": "SELECT name FROM tracks WHERE milliseconds > 360000;"
    },
    {
        "question": "What are the names and composers of tracks in the 'Rock' genre?",
        "query": "SELECT T1.name, T1.composer FROM tracks AS T1 INNER JOIN genres AS T2 ON T1.genre_id = T2.genre_id WHERE T2.name = 'Rock';"
    },
    {
        "question": "What is the total cost of all tracks purchased by the customer with customer_id 1?",
        "query": "SELECT SUM(T2.unit_price) FROM invoice_items AS T1 INNER JOIN tracks AS T2 ON T1.track_id = T2.track_id INNER JOIN invoices AS T3 ON T1.invoice_id = T3.invoice_id WHERE T3.customer_id = 1;"
    },
    {
        "question": "List the names of all tracks on the 'For Those About To Rock We Salute You' album.",
        "query": "SELECT T2.name FROM albums AS T1 INNER JOIN tracks AS T2 ON T1.album_id = T2.album_id WHERE T1.title = 'For Those About To Rock We Salute You';"
    },
    {
        "question": "What is the contact name and city for the customer 'Alfreds Futterkiste'?",
        "query": "SELECT contact_name, city FROM Customers WHERE customer_name = 'Alfreds Futterkiste';"
    },
    {
        "question": "What are the names of the products ordered in order number 10248?",
        "query": "SELECT T2.product_name FROM OrderDetails AS T1 INNER JOIN Products AS T2 ON T1.product_id = T2.product_id WHERE T1.order_id = 10248;"
    },
    {
        "question": "What is the total quantity of 'Chai' ordered across all orders?",
        "query": "SELECT SUM(quantity) FROM OrderDetails WHERE product_id = (SELECT product_id FROM Products WHERE product_name = 'Chai');"
    },
    {
        "question": "List all customers who have placed orders shipped via 'Speedy Express'.",
        "query": "SELECT T2.customer_name FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.shipper_id = (SELECT shipper_id FROM Shippers WHERE shipper_name = 'Speedy Express');"
    },
    {
        "question": "What is the average unit price of products supplied by 'Exotic Liquids'?",
        "query": "SELECT AVG(unit_price) FROM Products WHERE supplier_id = (SELECT supplier_id FROM Suppliers WHERE supplier_name = 'Exotic Liquids');"
    },
    {
        "question": "What are the names of the products that have a unit price greater than $20?",
        "query": "SELECT product_name FROM Products WHERE unit_price > 20;"
    },
    {
        "question": "List the customer name and order date for all orders shipped to 'Germany'.",
        "query": "SELECT T2.customer_name, T1.order_date FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.ship_country = 'Germany';"
    },
    {
        "question": "Which supplier supplies 'Queso Manchego La Pastora'?",
        "query": "SELECT T2.supplier_name FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.supplier_id = T2.supplier_id WHERE T1.product_name = 'Queso Manchego La Pastora';"
    },
    {
        "question": "What are the names and quantities of products ordered in order '10248'?",
        "query": "SELECT T2.product_name, T1.quantity FROM OrderDetails AS T1 INNER JOIN Products AS T2 ON T1.product_id = T2.product_id WHERE T1.order_id = 10248;"
    },
    {
        "question": "List all categories and the number of products in each category.",
        "query": "SELECT T1.category_name, COUNT(T2.product_id) FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_name;"
    },
    {
        "question": "What is the total revenue generated from sales of 'Gorgonzola Moliteri'?",
        "query": "SELECT SUM(T1.unit_price * T1.quantity) FROM OrderDetails AS T1 INNER JOIN Products AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = 'Gorgonzola Moliteri';"
    },
    {
        "question": "List all orders placed by customers from 'Brazil'.",
        "query": "SELECT * FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE country = 'Brazil');"
    },
    {
        "question": "Which playlist has the largest total duration of tracks?",
        "query": "SELECT playlists.name FROM playlists INNER JOIN playlist_tracks ON playlists.playlistid = playlist_tracks.playlistid INNER JOIN tracks ON playlist_tracks.trackid = tracks.trackid GROUP BY playlists.name ORDER BY SUM(tracks.milliseconds) DESC LIMIT 1;"
    },
    {
        "question": "List the titles of albums with a total track duration greater than 30 minutes (1800000 milliseconds).",
        "query": "SELECT title FROM albums WHERE albumid IN (SELECT albumid FROM tracks GROUP BY albumid HAVING SUM(milliseconds) > 1800000);"
    },
    {
        "question": "What are the names of the artists who have composed tracks for the album 'Let There Be Rock'?",
        "query": "SELECT T2.name FROM albums AS T1 INNER JOIN tracks AS T3 ON T1.albumid = T3.albumid INNER JOIN artists AS T2 ON T3.composer = T2.name WHERE T1.title = 'Let There Be Rock' GROUP BY T2.name;"
    },
    {
        "question": "What is the total revenue generated from sales of the track 'Highway Star'?",
        "query": "SELECT SUM(unitprice * quantity) FROM invoice_items WHERE trackid = (SELECT trackid FROM tracks WHERE name = 'Highway Star');"
    },
    {
        "question": "What is the total cost of all the tracks in the '90\u2019s Music' playlist?",
        "query": "SELECT SUM(tracks.unitprice) FROM tracks INNER JOIN playlist_tracks ON tracks.id = playlist_tracks.track_id INNER JOIN playlists ON playlist_tracks.playlist_id = playlists.id WHERE playlists.name = '90\u2019s Music';"
    },
    {
        "question": "What are the titles of the albums by AC/DC that cost more than $0.99 per track?",
        "query": "SELECT albums.title FROM albums INNER JOIN tracks ON albums.id = tracks.album_id WHERE albums.title LIKE '%AC/DC%' AND tracks.unitprice > 0.99 GROUP BY albums.title;"
    },
    {
        "question": "What is the total revenue generated from sales of tracks composed by Angus Young?",
        "query": "SELECT SUM(tracks.unitprice * invoice_items.quantity) FROM tracks INNER JOIN invoice_items ON tracks.id = invoice_items.track_id WHERE tracks.composer = 'Angus Young';"
    },
    {
        "question": "List the names of all the playlists created by the customer with CustomerId 5.",
        "query": "SELECT Name FROM Playlist WHERE CustomerId = 5;"
    },
    {
        "question": "List the names of all the rock albums.",
        "query": "SELECT T2.Title FROM Genre AS T1 INNER JOIN Track AS T3 ON T1.GenreId = T3.GenreId INNER JOIN Album AS T2 ON T3.AlbumId = T2.AlbumId WHERE T1.Name = 'Rock' GROUP BY T2.Title;"
    },
    {
        "question": "What is the average length of a track in the album 'Let There Be Rock'?",
        "query": "SELECT AVG(Milliseconds) FROM Track AS T1 INNER JOIN Album AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.Title = 'Let There Be Rock';"
    },
    {
        "question": "How many invoices were generated in the month of March 2009?",
        "query": "SELECT COUNT(*) FROM Invoice WHERE InvoiceDate LIKE '2009-03%';"
    },
    {
        "question": "List the names of all the customers who have purchased the track 'Dazed and Confused'.",
        "query": "SELECT T3.FirstName, T3.LastName FROM Track AS T1 INNER JOIN InvoiceLine AS T2 ON T1.TrackId = T2.TrackId INNER JOIN Invoice AS T4 ON T2.InvoiceId = T4.InvoiceId INNER JOIN Customer AS T3 ON T4.CustomerId = T3.CustomerId WHERE T1.Name = 'Dazed and Confused' GROUP BY T3.CustomerId;"
    },
    {
        "question": "What is the total revenue generated from sales of tracks in the 'Classical' genre?",
        "query": "SELECT SUM(T4.unit_price * T4.quantity) FROM genres AS T1 INNER JOIN tracks AS T2 ON T1.genre_id = T2.genre_id INNER JOIN invoice_items AS T4 ON T2.track_id = T4.track_id WHERE T1.name = 'Classical';"
    },
    {
        "question": "How many employees were born after 1980?",
        "query": "SELECT COUNT(*) FROM employees WHERE birth_year > 1980;"
    },
    {
        "question": "What is the total salary paid to all employees in the 'Marketing' department?",
        "query": "SELECT SUM(e.salary) FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.name = 'Marketing';"
    },
    {
        "question": "Find the name of the youngest employee in each department.",
        "query": "SELECT e.name FROM employees e JOIN (SELECT department_id, MAX(birth_year) as max_birth_year FROM employees GROUP BY department_id) as sub ON e.department_id = sub.department_id AND e.birth_year = sub.max_birth_year;"
    },
    {
        "question": "Find the name and artist of all tracks with a danceability score greater than 0.8.",
        "query": "SELECT name, artists FROM tracks WHERE danceability > 0.8"
    },
    {
        "question": "What is the average energy of tracks released in 1975?",
        "query": "SELECT AVG(energy) FROM tracks WHERE release_date LIKE '1975%'"
    },
    {
        "question": "List the names of all artists who have released a track with a valence greater than 0.9 and an acousticness less than 0.1.",
        "query": "SELECT artists FROM tracks WHERE valence > 0.9 AND acousticness < 0.1"
    },
    {
        "question": "Find the track with the highest speechiness score.",
        "query": "SELECT name FROM tracks ORDER BY speechiness DESC LIMIT 1"
    },
    {
        "question": "What is the name and duration of the shortest track in the dataset?",
        "query": "SELECT name, duration_ms FROM tracks ORDER BY duration_ms ASC LIMIT 1"
    },
    {
        "question": "List the names of all tracks with a tempo between 120 and 140 beats per minute.",
        "query": "SELECT name FROM tracks WHERE tempo BETWEEN 120 AND 140"
    },
    {
        "question": "What is the average loudness of tracks with a liveness score greater than 0.7?",
        "query": "SELECT AVG(loudness) FROM tracks WHERE liveness > 0.7"
    },
    {
        "question": "Find the release date and name of the track with the lowest instrumentalness score.",
        "query": "SELECT release_date, name FROM tracks ORDER BY instrumentalness ASC LIMIT 1"
    },
    {
        "question": "List the artists and names of all tracks released in the 1980s with a key of C#.",
        "query": "SELECT artists, name FROM tracks WHERE release_date LIKE '198%' AND key = 1"
    },
    {
        "question": "What is the average danceability score of tracks with a time signature of 4/4?",
        "query": "SELECT AVG(danceability) FROM tracks WHERE time_signature = 4"
    },
    {
        "question": "List the first name and last name of employees whose salary is greater than $50,000.",
        "query": "SELECT first_name, last_name FROM employees WHERE salary > 50000;"
    },
    {
        "question": "List the employees who were hired in the year 2023.",
        "query": "SELECT first_name, last_name FROM employees WHERE strftime('%Y', hire_date) = '2023';"
    },
    {
        "question": "Find the first name, last name, and hire date of the most recently hired employee.",
        "query": "SELECT first_name, last_name, hire_date FROM employees ORDER BY hire_date DESC LIMIT 1;"
    },
    {
        "question": "Find the first name, last name, and salary of employees whose salary is between $40,000 and $70,000.",
        "query": "SELECT first_name, last_name, salary FROM employees WHERE salary BETWEEN 40000 AND 70000;"
    },
    {
        "question": "List the employees who are not in the 'Sales' or 'Marketing' departments.",
        "query": "SELECT first_name, last_name FROM employees WHERE department NOT IN ('Sales', 'Marketing');"
    },
    {
        "question": "What is the name of the artist who performed the track with TrackId 1?",
        "query": "SELECT T2.Name FROM Track AS T1 INNER JOIN Album AS T3 ON T1.AlbumId = T3.AlbumId INNER JOIN Artist AS T2 ON T3.ArtistId = T2.ArtistId WHERE T1.TrackId = 1"
    },
    {
        "question": "What is the total cost of all the tracks in the '90s Music' playlist?",
        "query": "SELECT SUM(T2.UnitPrice) FROM PlaylistTrack AS T1 INNER JOIN Track AS T2 ON T1.TrackId = T2.TrackId WHERE T1.PlaylistId = (SELECT PlaylistId FROM Playlist WHERE Name = '90s Music')"
    },
    {
        "question": "What is the total number of invoices generated in the Chinook database?",
        "query": "SELECT COUNT(*) FROM Invoice"
    },
    {
        "question": "Which customer has spent the most money in the Chinook store (based on invoice totals)?",
        "query": "SELECT T2.FirstName, T2.LastName FROM Invoice AS T1 INNER JOIN Customer AS T2 ON T1.CustomerId = T2.CustomerId GROUP BY T1.CustomerId ORDER BY SUM(T1.Total) DESC LIMIT 1"
    },
    {
        "question": "List the names of all the employees in the Chinook database.",
        "query": "SELECT FirstName, LastName FROM Employee"
    },
    {
        "question": "Which employee has the highest birth date?",
        "query": "SELECT FirstName, LastName FROM Employee ORDER BY BirthDate DESC LIMIT 1"
    },
    {
        "question": "How many tracks are there in the 'Heavy Metal Classic' playlist?",
        "query": "SELECT COUNT(*) FROM PlaylistTrack WHERE PlaylistId = (SELECT PlaylistId FROM Playlist WHERE Name = 'Heavy Metal Classic')"
    },
    {
        "question": "What is the average unit price of tracks in the 'TV Shows' genre?",
        "query": "SELECT AVG(UnitPrice) FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'TV Shows')"
    },
    {
        "question": "List all order details with product names and supplier names.",
        "query": "SELECT od.*, p.ProductName, s.SupplierName FROM OrderDetails AS od JOIN Products AS p ON od.ProductID = p.ProductID JOIN Suppliers AS s ON p.SupplierID = s.SupplierID"
    },
    {
        "question": "What is the total amount spent by each customer on all orders?",
        "query": "SELECT c.CustomerName, SUM(od.Quantity * p.Price) AS TotalSpent FROM Customers AS c JOIN Orders AS o ON c.CustomerID = o.CustomerID JOIN OrderDetails AS od ON o.OrderID = od.OrderID JOIN Products AS p ON od.ProductID = p.ProductID GROUP BY c.CustomerName"
    },
    {
        "question": "Which supplier supplies the product 'Chang'?",
        "query": "SELECT s.SupplierName FROM Suppliers AS s JOIN Products AS p ON s.SupplierID = p.SupplierID WHERE p.ProductName = 'Chang'"
    },
    {
        "question": "Find the albums released after 2010.",
        "query": "SELECT title FROM albums WHERE strftime('%Y', substr(releasedate, 1, 4)) > '2010';"
    },
    {
        "question": "List all nuclear power plants in the United States.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Country = 'United States'"
    },
    {
        "question": "What are the names and capacities of all operational nuclear power plants?",
        "query": "SELECT Name, Capacity FROM nuclear_power_plants WHERE Status = 'Operational'"
    },
    {
        "question": "How many nuclear power plants are currently under construction?",
        "query": "SELECT COUNT(*) FROM nuclear_power_plants WHERE Status = 'Under Construction'"
    },
    {
        "question": "List the names and countries of all nuclear power plants with a BWR reactor type.",
        "query": "SELECT Name, Country FROM nuclear_power_plants WHERE ReactorType = 'BWR'"
    },
    {
        "question": "What is the average capacity of nuclear power plants in France?",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE Country = 'France'"
    },
    {
        "question": "Find the names of all nuclear power plants that started construction after 1980.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ConstructionStartAt > '1980-12-31'"
    },
    {
        "question": "List all nuclear power plants that were operational before 1970.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE OperationalFrom < '1970-01-01'"
    },
    {
        "question": "What is the maximum capacity of a nuclear power plant in Japan?",
        "query": "SELECT MAX(Capacity) FROM nuclear_power_plants WHERE Country = 'Japan'"
    },
    {
        "question": "List the names and reactor types of all nuclear power plants in China.",
        "query": "SELECT Name, ReactorType FROM nuclear_power_plants WHERE Country = 'China'"
    },
    {
        "question": "How many nuclear power plants are there in each country?",
        "query": "SELECT Country, COUNT(*) FROM nuclear_power_plants GROUP BY Country"
    },
    {
        "question": "List the names and statuses of all nuclear power plants with a capacity greater than 1000.",
        "query": "SELECT Name, Status FROM nuclear_power_plants WHERE Capacity > 1000"
    },
    {
        "question": "What is the minimum capacity of a nuclear power plant in Russia?",
        "query": "SELECT MIN(Capacity) FROM nuclear_power_plants WHERE Country = 'Russia'"
    },
    {
        "question": "Find the names of all nuclear power plants that were operational between 1970 and 1980.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE OperationalFrom BETWEEN '1970-01-01' AND '1980-12-31'"
    },
    {
        "question": "List all nuclear power plants with a CANDU reactor model.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ReactorModel LIKE '%CANDU%'"
    },
    {
        "question": "What is the total capacity of all nuclear power plants in Germany?",
        "query": "SELECT SUM(Capacity) FROM nuclear_power_plants WHERE Country = 'Germany'"
    },
    {
        "question": "List the names and construction start dates of all nuclear power plants in South Korea.",
        "query": "SELECT Name, ConstructionStartAt FROM nuclear_power_plants WHERE Country = 'South Korea'"
    },
    {
        "question": "How many nuclear power plants are there with each reactor type?",
        "query": "SELECT ReactorType, COUNT(*) FROM nuclear_power_plants GROUP BY ReactorType"
    },
    {
        "question": "List the names and operational to dates of all nuclear power plants in Canada.",
        "query": "SELECT Name, OperationalTo FROM nuclear_power_plants WHERE Country = 'Canada'"
    },
    {
        "question": "What is the average capacity of nuclear power plants with a PWR reactor type?",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE ReactorType = 'PWR'"
    },
    {
        "question": "Find the names of all nuclear power plants that were shut down before 2000.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Status = 'Shutdown' AND OperationalTo < '2000-01-01'"
    },
    {
        "question": "List all nuclear power plants with a capacity between 500 and 1000.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Capacity BETWEEN 500 AND 1000"
    },
    {
        "question": "What is the total capacity of all operational nuclear power plants in the United States?",
        "query": "SELECT SUM(Capacity) FROM nuclear_power_plants WHERE Country = 'United States' AND Status = 'Operational'"
    },
    {
        "question": "List the names and reactor models of all nuclear power plants in India.",
        "query": "SELECT Name, ReactorModel FROM nuclear_power_plants WHERE Country = 'India'"
    },
    {
        "question": "How many nuclear power plants are there in each status category?",
        "query": "SELECT Status, COUNT(*) FROM nuclear_power_plants GROUP BY Status"
    },
    {
        "question": "List the names and operational from dates of all nuclear power plants in Brazil.",
        "query": "SELECT Name, OperationalFrom FROM nuclear_power_plants WHERE Country = 'Brazil'"
    },
    {
        "question": "What is the average capacity of nuclear power plants with a VVER reactor model?",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE ReactorModel LIKE '%VVER%'"
    },
    {
        "question": "Find the names of all nuclear power plants that started construction after 1990 and are currently operational.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ConstructionStartAt > '1990-12-31' AND Status = 'Operational'"
    },
    {
        "question": "List all nuclear power plants with a capacity greater than 1000 and a PWR reactor type.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Capacity > 1000 AND ReactorType = 'PWR'"
    },
    {
        "question": "What is the total capacity of all shutdown nuclear power plants in Japan?",
        "query": "SELECT SUM(Capacity) FROM nuclear_power_plants WHERE Country = 'Japan' AND Status = 'Shutdown'"
    },
    {
        "question": "List the names and construction start dates of all nuclear power plants in France with a capacity greater than 500.",
        "query": "SELECT Name, ConstructionStartAt FROM nuclear_power_plants WHERE Country = 'France' AND Capacity > 500"
    },
    {
        "question": "How many nuclear power plants are there with each reactor model?",
        "query": "SELECT ReactorModel, COUNT(*) FROM nuclear_power_plants GROUP BY ReactorModel"
    },
    {
        "question": "List the names and operational to dates of all nuclear power plants in Germany with a BWR reactor type.",
        "query": "SELECT Name, OperationalTo FROM nuclear_power_plants WHERE Country = 'Germany' AND ReactorType = 'BWR'"
    },
    {
        "question": "What is the average capacity of nuclear power plants that started construction after 1980?",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE ConstructionStartAt > '1980-12-31'"
    },
    {
        "question": "Find the names of all nuclear power plants that were operational before 1970 and have a capacity greater than 500.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE OperationalFrom < '1970-01-01' AND Capacity > 500"
    },
    {
        "question": "List all nuclear power plants with a capacity between 500 and 1000 and a PWR reactor type.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Capacity BETWEEN 500 AND 1000 AND ReactorType = 'PWR'"
    },
    {
        "question": "What is the total capacity of all operational nuclear power plants in China with a CANDU reactor model?",
        "query": "SELECT SUM(Capacity) FROM nuclear_power_plants WHERE Country = 'China' AND Status = 'Operational' AND ReactorModel LIKE '%CANDU%'"
    },
    {
        "question": "List the names and reactor models of all nuclear power plants in Russia with a capacity greater than 1000.",
        "query": "SELECT Name, ReactorModel FROM nuclear_power_plants WHERE Country = 'Russia' AND Capacity > 1000"
    },
    {
        "question": "How many nuclear power plants are there in each country with a BWR reactor type?",
        "query": "SELECT Country, COUNT(*) FROM nuclear_power_plants WHERE ReactorType = 'BWR' GROUP BY Country"
    },
    {
        "question": "List the names and operational from dates of all nuclear power plants in the United States with a capacity between 500 and 1000.",
        "query": "SELECT Name, OperationalFrom FROM nuclear_power_plants WHERE Country = 'United States' AND Capacity BETWEEN 500 AND 1000"
    },
    {
        "question": "What is the average capacity of nuclear power plants with a VVER reactor model and a capacity greater than 800?",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE ReactorModel LIKE '%VVER%' AND Capacity > 800"
    },
    {
        "question": "Find the names of all nuclear power plants that started construction after 1990 and are currently shutdown.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ConstructionStartAt > '1990-12-31' AND Status = 'Shutdown'"
    },
    {
        "question": "List all nuclear power plants with a capacity greater than 1000 and a CANDU reactor model.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Capacity > 1000 AND ReactorModel LIKE '%CANDU%'"
    },
    {
        "question": "What is the total capacity of all shutdown nuclear power plants in Germany with a PWR reactor type?",
        "query": "SELECT SUM(Capacity) FROM nuclear_power_plants WHERE Country = 'Germany' AND Status = 'Shutdown' AND ReactorType = 'PWR'"
    },
    {
        "question": "List the names and construction start dates of all nuclear power plants in Japan with a capacity between 500 and 1000.",
        "query": "SELECT Name, ConstructionStartAt FROM nuclear_power_plants WHERE Country = 'Japan' AND Capacity BETWEEN 500 AND 1000"
    },
    {
        "question": "How many nuclear power plants are there with each reactor model in the United States?",
        "query": "SELECT ReactorModel, COUNT(*) FROM nuclear_power_plants WHERE Country = 'United States' GROUP BY ReactorModel"
    },
    {
        "question": "List the names and operational to dates of all nuclear power plants in China with a PWR reactor type and a capacity greater than 800.",
        "query": "SELECT Name, OperationalTo FROM nuclear_power_plants WHERE Country = 'China' AND ReactorType = 'PWR' AND Capacity > 800"
    },
    {
        "question": "What is the average capacity of nuclear power plants that started construction before 1980 and are currently operational?",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE ConstructionStartAt < '1980-01-01' AND Status = 'Operational'"
    },
    {
        "question": "Find the names of all nuclear power plants that were operational between 1970 and 1980 and have a capacity less than 500.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE OperationalFrom BETWEEN '1970-01-01' AND '1980-12-31' AND Capacity < 500"
    },
    {
        "question": "List all nuclear power plants with a capacity between 500 and 1000 and a BWR reactor type in Japan.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Capacity BETWEEN 500 AND 1000 AND ReactorType = 'BWR' AND Country = 'Japan'"
    },
    {
        "question": "What is the total capacity of all operational nuclear power plants in France with a PWR reactor type and a capacity greater than 1000?",
        "query": "SELECT SUM(Capacity) FROM nuclear_power_plants WHERE Country = 'France' AND Status = 'Operational' AND ReactorType = 'PWR' AND Capacity > 1000"
    },
    {
        "question": "List the names and reactor models of all nuclear power plants in Germany with a capacity less than 500 and a BWR reactor type.",
        "query": "SELECT Name, ReactorModel FROM nuclear_power_plants WHERE Country = 'Germany' AND Capacity < 500 AND ReactorType = 'BWR'"
    },
    {
        "question": "How many nuclear power plants are there in each country with a CANDU reactor model and a capacity greater than 800?",
        "query": "SELECT Country, COUNT(*) FROM nuclear_power_plants WHERE ReactorModel LIKE '%CANDU%' AND Capacity > 800 GROUP BY Country"
    },
    {
        "question": "List the names and operational from dates of all nuclear power plants in the United States with a PWR reactor type and a capacity between 500 and 1000.",
        "query": "SELECT Name, OperationalFrom FROM nuclear_power_plants WHERE Country = 'United States' AND ReactorType = 'PWR' AND Capacity BETWEEN 500 AND 1000"
    },
    {
        "question": "What is the average capacity of nuclear power plants with a VVER reactor model, a capacity greater than 800, and are currently operational?",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE ReactorModel LIKE '%VVER%' AND Capacity > 800 AND Status = 'Operational'"
    },
    {
        "question": "Find the latest LastUpdatedAt value.",
        "query": "SELECT MAX(LastUpdatedAt) FROM nuclear_power_plants"
    },
    {
        "question": "What are the distinct sources of information for the nuclear power plants?",
        "query": "SELECT DISTINCT Source FROM nuclear_power_plants"
    },
    {
        "question": "List the names of nuclear power plants with 'VVER' in their ReactorModel.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ReactorModel LIKE '%VVER%'"
    },
    {
        "question": "Find the number of nuclear power plants with a capacity greater than the average capacity.",
        "query": "SELECT COUNT(*) FROM nuclear_power_plants WHERE Capacity > (SELECT AVG(Capacity) FROM nuclear_power_plants)"
    },
    {
        "question": "What is the earliest ConstructionStartAt date for nuclear power plants in the 'United States'?",
        "query": "SELECT MIN(ConstructionStartAt) FROM nuclear_power_plants WHERE Country = 'United States'"
    },
    {
        "question": "List the names and countries of nuclear power plants that are not 'Operational'.",
        "query": "SELECT Name, Country FROM nuclear_power_plants WHERE Status != 'Operational'"
    },
    {
        "question": "Find the average capacity of nuclear power plants grouped by their status.",
        "query": "SELECT Status, AVG(Capacity) FROM nuclear_power_plants GROUP BY Status"
    },
    {
        "question": "What are the names of the nuclear power plants in the United States that have a capacity greater than 1000?",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Country = 'United States' AND Capacity > 1000"
    },
    {
        "question": "How many nuclear power plants are currently operational?",
        "query": "SELECT COUNT(*) FROM nuclear_power_plants WHERE Status = 'Operational'"
    },
    {
        "question": "What is the average capacity of nuclear power plants that were constructed before 1980 and are currently operational?",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE Status = 'Operational' AND ConstructionStartAt < '1980-01-01'"
    },
    {
        "question": "What are the names and reactor types of all nuclear power plants in the United States?",
        "query": "SELECT Name, ReactorType FROM nuclear_power_plants WHERE Country = 'United States'"
    },
    {
        "question": "List the names, capacity, and construction start dates of all 'Operational' nuclear power plants in France.",
        "query": "SELECT Name, Capacity, ConstructionStartAt FROM nuclear_power_plants WHERE Country = 'France' AND Status = 'Operational'"
    },
    {
        "question": "Find the number of nuclear power plants that are currently 'Under Construction' in China.",
        "query": "SELECT COUNT(*) FROM nuclear_power_plants WHERE Country = \\"
    },
    {
        "question": "What is the average capacity of all nuclear power plants with a BWR reactor type?",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE ReactorType = 'BWR'"
    },
    {
        "question": "List the names and countries of nuclear power plants that started construction after 2000-01-01 and have a capacity greater than 1000.",
        "query": "SELECT Name, Country FROM nuclear_power_plants WHERE ConstructionStartAt > '2000-01-01' AND Capacity > 1000"
    },
    {
        "question": "Find the latest update date for the Gundremmingen-A nuclear power plant.",
        "query": "SELECT LastUpdatedAt FROM nuclear_power_plants WHERE Name = 'Gundremmingen-A'"
    },
    {
        "question": "List the names of all nuclear power plants that have been shut down.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Status = 'Shutdown'"
    },
    {
        "question": "What is the name and reactor model of the nuclear power plant with the highest capacity?",
        "query": "SELECT Name, ReactorModel FROM nuclear_power_plants ORDER BY Capacity DESC LIMIT 1"
    },
    {
        "question": "List all nuclear power plants with a CANDU reactor model, sorted by their construction start date.",
        "query": "SELECT * FROM nuclear_power_plants WHERE ReactorModel LIKE '%CANDU%' ORDER BY ConstructionStartAt"
    },
    {
        "question": "What are the names and statuses of all nuclear power plants in the United States?",
        "query": "SELECT Name, Status FROM nuclear_power_plants WHERE Country = 'United States'"
    },
    {
        "question": "List the names and capacities of all operational nuclear power plants in France.",
        "query": "SELECT Name, Capacity FROM nuclear_power_plants WHERE Country = 'France' AND Status = 'Operational'"
    },
    {
        "question": "Find the reactor types and models of all nuclear power plants that started construction after 1980-01-01.",
        "query": "SELECT ReactorType, ReactorModel FROM nuclear_power_plants WHERE ConstructionStartAt > '1980-01-01'"
    },
    {
        "question": "What is the name and capacity of the nuclear power plant with the earliest construction start date?",
        "query": "SELECT Name, Capacity FROM nuclear_power_plants ORDER BY ConstructionStartAt ASC LIMIT 1"
    },
    {
        "question": "List the names of all nuclear power plants that are either under construction or planned.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Status IN ('Under Construction', 'Planned')"
    },
    {
        "question": "What are the names and reactor types of all nuclear power plants with a capacity greater than 1000?",
        "query": "SELECT Name, ReactorType FROM nuclear_power_plants WHERE Capacity > 1000"
    },
    {
        "question": "Find the average capacity of all operational nuclear power plants.",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE Status = 'Operational'"
    },
    {
        "question": "List the countries with nuclear power plants that have been shut down.",
        "query": "SELECT DISTINCT Country FROM nuclear_power_plants WHERE Status = 'Shutdown'"
    },
    {
        "question": "What is the latest update date for the nuclear power plant named 'Gravelines-1'?",
        "query": "SELECT LastUpdatedAt FROM nuclear_power_plants WHERE Name = 'Gravelines-1'"
    },
    {
        "question": "List the names of all nuclear power plants with a 'BWR' reactor type and a capacity greater than 500.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ReactorType = 'BWR' AND Capacity > 500"
    },
    {
        "question": "What are the names and construction start dates of all nuclear power plants with unknown reactor models?",
        "query": "SELECT Name, ConstructionStartAt FROM nuclear_power_plants WHERE ReactorModel = ''"
    },
    {
        "question": "List the names of all nuclear power plants with an operational period between 1980-01-01 and 1990-01-01.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE OperationalFrom >= '1980-01-01' AND OperationalTo <= '1990-01-01'"
    },
    {
        "question": "What is the minimum and maximum capacity of nuclear power plants in China?",
        "query": "SELECT MIN(Capacity), MAX(Capacity) FROM nuclear_power_plants WHERE Country = \\"
    },
    {
        "question": "What are the names and capacities of all operational nuclear power plants in the United States?",
        "query": "SELECT Name, Capacity FROM nuclear_power_plants WHERE Country = 'United States' AND Status = 'Operational'"
    },
    {
        "question": "List the reactor types and models of all nuclear power plants in France, sorted by construction start date.",
        "query": "SELECT ReactorType, ReactorModel FROM nuclear_power_plants WHERE Country = 'France' ORDER BY ConstructionStartAt"
    },
    {
        "question": "How many nuclear power plants are currently under construction in China?",
        "query": "SELECT COUNT(*) FROM nuclear_power_plants WHERE Country = 'People\\'s Republic of China' AND Status = 'Under Construction'"
    },
    {
        "question": "Find the latitude and longitude of the nuclear power plant named 'Trino Vercellese'.",
        "query": "SELECT Latitude, Longitude FROM nuclear_power_plants WHERE Name = 'Trino Vercellese'"
    },
    {
        "question": "List the names and countries of all nuclear power plants that have been shut down, ordered by capacity in descending order.",
        "query": "SELECT Name, Country FROM nuclear_power_plants WHERE Status = 'Shutdown' ORDER BY Capacity DESC"
    },
    {
        "question": "Which nuclear power plant has the latest last updated date?",
        "query": "SELECT Name FROM nuclear_power_plants ORDER BY LastUpdatedAt DESC LIMIT 1"
    },
    {
        "question": "How many nuclear power plants using the CANDU 850 reactor model are there?",
        "query": "SELECT COUNT(*) FROM nuclear_power_plants WHERE ReactorModel = 'CANDU 850'"
    },
    {
        "question": "Find the names of all nuclear power plants whose construction started between 1970 and 1980.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ConstructionStartAt BETWEEN '1970-01-01' AND '1979-12-31'"
    },
    {
        "question": "What is the total capacity of all operational nuclear power plants in the European Union?",
        "query": "SELECT SUM(Capacity) FROM nuclear_power_plants WHERE Country IN ('Czech Republic', 'Belgium', 'Spain', 'France') AND Status='Operational'"
    },
    {
        "question": "List all nuclear power plants with a capacity greater than 1000 MW, along with their country and status.",
        "query": "SELECT Name, Country, Status FROM nuclear_power_plants WHERE Capacity > 1000"
    },
    {
        "question": "What are the different reactor types used in nuclear power plants in Japan?",
        "query": "SELECT DISTINCT ReactorType FROM nuclear_power_plants WHERE Country LIKE '%Japan%'"
    },
    {
        "question": "Find the names and construction start dates of all nuclear power plants with 'VVER' in their reactor model.",
        "query": "SELECT Name, ConstructionStartAt FROM nuclear_power_plants WHERE ReactorModel LIKE '%VVER%'"
    },
    {
        "question": "Which countries have nuclear power plants with unknown reactor types?",
        "query": "SELECT DISTINCT Country FROM nuclear_power_plants WHERE ReactorType = ''"
    },
    {
        "question": "List the names of nuclear power plants that started construction before 1970 and are now shut down.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ConstructionStartAt < '1970-01-01' AND Status = 'Shutdown'"
    },
    {
        "question": "What are the latitude and longitude coordinates of the Gravelines-1 nuclear power plant?",
        "query": "SELECT Latitude, Longitude FROM nuclear_power_plants WHERE Name = 'Gravelines-1'"
    },
    {
        "question": "Which nuclear power plants have a reactor type of 'PWR'?",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ReactorType = 'PWR'"
    },
    {
        "question": "Which nuclear power plants started construction after 2000?",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ConstructionStartAt > '2000-01-01'"
    },
    {
        "question": "What is the status of the Shin Wolsong-2 nuclear power plant?",
        "query": "SELECT Status FROM nuclear_power_plants WHERE Name = 'Shin Wolsong-2'"
    },
    {
        "question": "Which nuclear power plants have a reactor model of 'CANDU 6'?",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ReactorModel = 'CANDU 6'"
    },
    {
        "question": "What is the capacity of the Gundremmingen-A nuclear power plant?",
        "query": "SELECT Capacity FROM nuclear_power_plants WHERE Name = 'Gundremmingen-A'"
    },
    {
        "question": "List the countries with nuclear power plants that are under construction.",
        "query": "SELECT DISTINCT Country FROM nuclear_power_plants WHERE Status = 'Under Construction'"
    },
    {
        "question": "Which nuclear power plant was last updated on '2017-02-10'?",
        "query": "SELECT Name FROM nuclear_power_plants WHERE LastUpdatedAt LIKE '2017-02-10%'"
    },
    {
        "question": "List the names and reactor types of all nuclear power plants in France.",
        "query": "SELECT Name, ReactorType FROM nuclear_power_plants WHERE Country = 'France'"
    },
    {
        "question": "What is the source of information for the Oskarshamn-2 nuclear power plant data?",
        "query": "SELECT Source FROM nuclear_power_plants WHERE Name = 'Oskarshamn-2'"
    },
    {
        "question": "Which nuclear power plants have an operational 'To' date before 1990?",
        "query": "SELECT Name FROM nuclear_power_plants WHERE OperationalTo < '1990-01-01'"
    },
    {
        "question": "List the names of nuclear power plants with a capacity greater than 1000.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Capacity > 1000"
    },
    {
        "question": "Find the nuclear power plants that are located in Czech Republic and are currently operational.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Country = 'Czech Republic' AND Status = 'Operational'"
    },
    {
        "question": "What is the status of the nuclear power plant with the earliest construction start date?",
        "query": "SELECT Status FROM nuclear_power_plants ORDER BY ConstructionStartAt LIMIT 1"
    },
    {
        "question": "List all nuclear power plants that have been shut down, along with their operational start and end dates.",
        "query": "SELECT Name, OperationalFrom, OperationalTo FROM nuclear_power_plants WHERE Status = 'Shutdown'"
    },
    {
        "question": "List the countries and the number of nuclear power plants they have, sorted by the number of plants in descending order.",
        "query": "SELECT Country, COUNT(*) AS NumberOfPlants FROM nuclear_power_plants GROUP BY Country ORDER BY NumberOfPlants DESC"
    },
    {
        "question": "What is the name and status of the nuclear power plant with the highest capacity?",
        "query": "SELECT Name, Status FROM nuclear_power_plants ORDER BY Capacity DESC LIMIT 1"
    },
    {
        "question": "List all operational nuclear power plants with a capacity greater than 1000 MW.",
        "query": "SELECT * FROM nuclear_power_plants WHERE Status = 'Operational' AND Capacity > 1000"
    },
    {
        "question": "Find the number of nuclear power plants that are either planned or under construction.",
        "query": "SELECT COUNT(*) FROM nuclear_power_plants WHERE Status IN ('Planned', 'Under Construction')"
    },
    {
        "question": "What is the average capacity of all operational nuclear power plants in France?",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE Status = 'Operational' AND Country = 'France'"
    },
    {
        "question": "Find the names of all nuclear power plants whose construction started before 1970.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ConstructionStartAt < '1970-01-01'"
    },
    {
        "question": "List the countries and the number of nuclear power plants they have in each status.",
        "query": "SELECT Country, Status, COUNT(*) FROM nuclear_power_plants GROUP BY Country, Status"
    },
    {
        "question": "What are the names, capacity, and status of nuclear power plants whose operational start date is after 2000-01-01?",
        "query": "SELECT Name, Capacity, Status FROM nuclear_power_plants WHERE OperationalFrom > '2000-01-01'"
    },
    {
        "question": "Find the latest update time for each nuclear power plant.",
        "query": "SELECT Name, MAX(LastUpdatedAt) FROM nuclear_power_plants GROUP BY Name"
    },
    {
        "question": "Find all nuclear power plants that were operational between 1980 and 1990.",
        "query": "SELECT * FROM nuclear_power_plants WHERE OperationalFrom <= '1990-12-31' AND OperationalTo >= '1980-01-01'"
    },
    {
        "question": "List the reactor types and models of all nuclear power plants in France that are either operational or under construction.",
        "query": "SELECT ReactorType, ReactorModel FROM nuclear_power_plants WHERE Country = 'France' AND (Status = 'Operational' OR Status = 'Under Construction')"
    },
    {
        "question": "What is the average capacity of nuclear power plants in Japan?",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE Country = 'Japan'"
    },
    {
        "question": "Find the names and construction start dates of all nuclear power plants with a capacity greater than 1000 MW.",
        "query": "SELECT Name, ConstructionStartAt FROM nuclear_power_plants WHERE Capacity > 1000"
    },
    {
        "question": "What is the name and status of the nuclear power plant with the earliest construction start date?",
        "query": "SELECT Name, Status FROM nuclear_power_plants ORDER BY ConstructionStartAt ASC LIMIT 1"
    },
    {
        "question": "How many nuclear power plants are currently planned or under construction in China?",
        "query": "SELECT COUNT(*) FROM nuclear_power_plants WHERE Country = 'China' AND (Status = 'Planned' OR Status = 'Under Construction')"
    },
    {
        "question": "Find the names of all nuclear power plants that use a BWR reactor type.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ReactorType = 'BWR'"
    },
    {
        "question": "What is the latest update date for the nuclear power plant named 'Fukushima Daiichi 1'?",
        "query": "SELECT LastUpdatedAt FROM nuclear_power_plants WHERE Name = 'Fukushima Daiichi 1'"
    },
    {
        "question": "List the names and countries of all nuclear power plants with a CANDU reactor model.",
        "query": "SELECT Name, Country FROM nuclear_power_plants WHERE ReactorModel LIKE 'CANDU%'"
    },
    {
        "question": "Find the names and countries of nuclear power plants with a capacity greater than 1000 MW.",
        "query": "SELECT Name, Country FROM nuclear_power_plants WHERE Capacity > 1000"
    },
    {
        "question": "List the countries with nuclear power plants that have been shut down, along with the number of shut down plants in each country.",
        "query": "SELECT Country, COUNT(*) FROM nuclear_power_plants WHERE Status = 'Shutdown' GROUP BY Country"
    },
    {
        "question": "List all nuclear power plants, their status, and their sources, sorted by country.",
        "query": "SELECT Name, Status, Source FROM nuclear_power_plants ORDER BY Country"
    },
    {
        "question": "Find the names and construction start dates of all cancelled or suspended nuclear power plant projects in Spain.",
        "query": "SELECT Name, ConstructionStartAt FROM nuclear_power_plants WHERE Country = 'Spain' AND (Status = 'Cancelled Construction' OR Status = 'Suspended Construction')"
    },
    {
        "question": "List the reactor types and models of all cancelled nuclear power plant projects in France.",
        "query": "SELECT ReactorType, ReactorModel FROM nuclear_power_plants WHERE Country = 'France' AND Status = 'Cancelled Construction'"
    },
    {
        "question": "Find the latitude and longitude of the nuclear power plant named 'Qinshan-3-2 (Qinshan 7)'.",
        "query": "SELECT Latitude, Longitude FROM nuclear_power_plants WHERE Name = 'Qinshan-3-2 (Qinshan 7)'"
    },
    {
        "question": "What is the status and construction start date of the 'Shin Wolsong-2' nuclear power plant?",
        "query": "SELECT Status, ConstructionStartAt FROM nuclear_power_plants WHERE Name = 'Shin Wolsong-2'"
    },
    {
        "question": "List all nuclear power plants in Czech Republic with their operational start and end dates.",
        "query": "SELECT Name, OperationalFrom, OperationalTo FROM nuclear_power_plants WHERE Country = 'Czech Republic'"
    },
    {
        "question": "Which nuclear power plants have a capacity greater than 1000?",
        "query": "SELECT Name FROM nuclear_power_plants WHERE CAST(Capacity AS REAL) > 1000"
    },
    {
        "question": "What are the different reactor types used in nuclear power plants in Spain?",
        "query": "SELECT DISTINCT ReactorType FROM nuclear_power_plants WHERE Country = 'Spain'"
    },
    {
        "question": "Find the names and sources of information for all nuclear power plants that were last updated after 2016.",
        "query": "SELECT Name, Source FROM nuclear_power_plants WHERE LastUpdatedAt > '2016-12-31T23:59:59'"
    },
    {
        "question": "List the countries and the number of nuclear power plants they have in 'Planned' status.",
        "query": "SELECT Country, COUNT(*) FROM nuclear_power_plants WHERE Status = 'Planned' GROUP BY Country"
    },
    {
        "question": "What is the average capacity of operational nuclear power plants in Belgium?",
        "query": "SELECT AVG(CAST(Capacity AS REAL)) FROM nuclear_power_plants WHERE Country = 'Belgium' AND Status = 'Operational'"
    },
    {
        "question": "Find the nuclear power plant with the earliest construction start date.",
        "query": "SELECT Name FROM nuclear_power_plants ORDER BY ConstructionStartAt ASC LIMIT 1"
    },
    {
        "question": "List all nuclear power plants with a 'BWR' reactor type, ordered by their capacity in descending order.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ReactorType = 'BWR' ORDER BY CAST(Capacity AS REAL) DESC"
    },
    {
        "question": "How many nuclear power plants are either 'Operational' or 'Under Construction'?",
        "query": "SELECT COUNT(*) FROM nuclear_power_plants WHERE Status IN ('Operational', 'Under Construction')"
    },
    {
        "question": "List the names of all nuclear power plants that have 'WNA' in their source.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Source LIKE '%WNA%'"
    },
    {
        "question": "What are the names and reactor types of all nuclear power plants in the United States that are currently operational? (Hints: United States is the name of the country; operational is the status of the power plant)",
        "query": "SELECT Name, ReactorType FROM nuclear_power_plants WHERE Country = 'United States' AND Status = 'Operational'"
    },
    {
        "question": "List the names, capacity, and construction start dates of all nuclear power plants in France, sorted by capacity in descending order. (Hints: France is the name of the country)",
        "query": "SELECT Name, Capacity, ConstructionStartAt FROM nuclear_power_plants WHERE Country = 'France' ORDER BY Capacity DESC"
    },
    {
        "question": "Find the average capacity of operational nuclear power plants in the Czech Republic. (Hints: Czech Republic is the name of the country; operational is the status of the power plant)",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE Country = 'Czech Republic' AND Status = 'Operational'"
    },
    {
        "question": "List the countries with nuclear power plants that have a capacity greater than 1000. (Hints: )",
        "query": "SELECT DISTINCT Country FROM nuclear_power_plants WHERE Capacity > 1000"
    },
    {
        "question": "How many nuclear power plants are either under construction or planned? (Hints: )",
        "query": "SELECT COUNT(*) FROM nuclear_power_plants WHERE Status = 'Under Construction' OR Status = 'Planned'"
    },
    {
        "question": "Find the names and countries of all nuclear power plants with a BWR reactor type that were operational before 1980. (Hints: BWR is the reactor type)",
        "query": "SELECT Name, Country FROM nuclear_power_plants WHERE ReactorType = 'BWR' AND OperationalFrom < '1980-01-01'"
    },
    {
        "question": "List the different reactor models used in operational nuclear power plants in Spain. (Hints: Spain is the name of the country; operational is the status of the power plant)",
        "query": "SELECT DISTINCT ReactorModel FROM nuclear_power_plants WHERE Country = 'Spain' AND Status = 'Operational'"
    },
    {
        "question": "What is the total capacity of all cancelled or suspended nuclear power plant projects in Belgium? (Hints: Belgium is the name of the country; cancelled or suspended is the status of the power plant)",
        "query": "SELECT SUM(Capacity) FROM nuclear_power_plants WHERE Country = 'Belgium' AND (Status = 'Cancelled Construction' OR Status = 'Suspended Construction')"
    },
    {
        "question": "List the names, capacity, and construction start dates of all cancelled nuclear power plant projects in France. (Hints: cancelled nuclear power plant projects are where status = 'Cancelled Construction')",
        "query": "SELECT Name, Capacity, ConstructionStartAt FROM nuclear_power_plants WHERE Country = 'France' AND Status = 'Cancelled Construction'"
    },
    {
        "question": "Find the number of nuclear power plants in each country. (Hints: each country means grouping by country)",
        "query": "SELECT Country, COUNT(*) AS NumberOfPlants FROM nuclear_power_plants GROUP BY Country"
    },
    {
        "question": "What is the average capacity of operational nuclear reactors in Japan? (Hints: operational is where status = 'Operational')",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE Country = 'Japan' AND Status = 'Operational'"
    },
    {
        "question": "Find the name and capacity of the nuclear power plant with the latest construction start date. (Hints: latest construction start date means finding the maximum of construction start at)",
        "query": "SELECT Name, Capacity FROM nuclear_power_plants ORDER BY ConstructionStartAt DESC LIMIT 1"
    },
    {
        "question": "What is the total capacity of all planned nuclear power plants in China? (Hints: planned is where status = 'Planned')",
        "query": "SELECT SUM(Capacity) FROM nuclear_power_plants WHERE Country = 'China' AND Status = 'Planned'"
    },
    {
        "question": "List the names and reactor models of all nuclear power plants that have been shut down. (Hints: shut down is where status = 'Shutdown')",
        "query": "SELECT Name, ReactorModel FROM nuclear_power_plants WHERE Status = 'Shutdown'"
    },
    {
        "question": "Find the name and country of the nuclear power plant with the earliest operational start date. (Hints: earliest operational start date means finding the minimum of operational from)",
        "query": "SELECT Name, Country FROM nuclear_power_plants ORDER BY OperationalFrom ASC LIMIT 1"
    },
    {
        "question": "How many nuclear power plants are currently under construction in Russia? (Hints: under construction is where status = 'Under Construction')",
        "query": "SELECT COUNT(*) FROM nuclear_power_plants WHERE Country = 'Russia' AND Status = 'Under Construction'"
    },
    {
        "question": "List the names of all nuclear power plants currently in operation.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Status = 'Operational'"
    },
    {
        "question": "What is the total capacity of all nuclear power plants in the United States?",
        "query": "SELECT SUM(Capacity) FROM nuclear_power_plants WHERE Country = 'United States'"
    },
    {
        "question": "Find the name and reactor type of all nuclear power plants that started construction after 2000-01-01.",
        "query": "SELECT Name, ReactorType FROM nuclear_power_plants WHERE ConstructionStartAt > '2000-01-01'"
    },
    {
        "question": "List all nuclear power plants that are either planned or under construction in China.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Country = 'People\\'s Republic of China' AND (Status = 'Planned' OR Status = 'Under Construction')"
    },
    {
        "question": "Find the names and countries of all nuclear power plants with a CANDU 850 reactor model.",
        "query": "SELECT Name, Country FROM nuclear_power_plants WHERE ReactorModel = 'CANDU 850'"
    },
    {
        "question": "List all nuclear power plants that were operational before 1980-01-01.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE OperationalFrom < '1980-01-01'"
    },
    {
        "question": "Find the names and capacities of all nuclear power plants in France that have been shut down.",
        "query": "SELECT Name, Capacity FROM nuclear_power_plants WHERE Country = 'France' AND Status = 'Shutdown'"
    },
    {
        "question": "List the reactor types and models of all nuclear power plants in the United Kingdom.",
        "query": "SELECT ReactorType, ReactorModel FROM nuclear_power_plants WHERE Country = 'United Kingdom of Great Britain and Northern Ireland'"
    },
    {
        "question": "What are the names, reactor types, and capacities of all operational nuclear power plants in the United States?",
        "query": "SELECT Name, ReactorType, Capacity FROM nuclear_power_plants WHERE Country = 'United States' AND Status = 'Operational'"
    },
    {
        "question": "List the names and construction start dates of all nuclear power plants in France, sorted by construction start date in ascending order.",
        "query": "SELECT Name, ConstructionStartAt FROM nuclear_power_plants WHERE Country = 'France' ORDER BY ConstructionStartAt ASC"
    },
    {
        "question": "Find the number of nuclear power plants that are either planned or under construction in China.",
        "query": "SELECT COUNT(*) FROM nuclear_power_plants WHERE Country = 'People\\'s Republic of China' AND (Status = 'Planned' OR Status = 'Under Construction')"
    },
    {
        "question": "Find the name and status of the nuclear power plant with the latest construction start date.",
        "query": "SELECT Name, Status FROM nuclear_power_plants ORDER BY ConstructionStartAt DESC LIMIT 1"
    },
    {
        "question": "What is the total capacity of all nuclear power plants in Japan?",
        "query": "SELECT SUM(Capacity) FROM nuclear_power_plants WHERE Country = 'Japan'"
    },
    {
        "question": "Find the name, country, and capacity of the nuclear power plant with the highest capacity.",
        "query": "SELECT Name, Country, Capacity FROM nuclear_power_plants ORDER BY Capacity DESC LIMIT 1"
    },
    {
        "question": "List the countries with nuclear power plants that have a 'VVER V-428' reactor model.",
        "query": "SELECT DISTINCT Country FROM nuclear_power_plants WHERE ReactorModel = 'VVER V-428'"
    },
    {
        "question": "What is the name and capacity of the nuclear power plant with the earliest operational start date?",
        "query": "SELECT Name, Capacity FROM nuclear_power_plants ORDER BY OperationalFrom ASC LIMIT 1"
    },
    {
        "question": "What is the average capacity of nuclear power plants by country?",
        "query": "SELECT Country, AVG(Capacity) FROM nuclear_power_plants GROUP BY Country"
    },
    {
        "question": "What are the names and statuses of nuclear power plants in China that started construction after 2000?",
        "query": "SELECT Name, Status FROM nuclear_power_plants WHERE Country = 'People\\'s Republic of China' AND ConstructionStartAt > '2000-01-01'"
    },
    {
        "question": "What is the latest update date for the 'Shin Wolsong-2' nuclear power plant?",
        "query": "SELECT LastUpdatedAt FROM nuclear_power_plants WHERE Name = 'Shin Wolsong-2'"
    },
    {
        "question": "Find the names and reactor types of all nuclear power plants with a 'CANDU 850' reactor model.",
        "query": "SELECT Name, ReactorType FROM nuclear_power_plants WHERE ReactorModel = 'CANDU 850'"
    },
    {
        "question": "List the names and capacities of all nuclear power plants in France, sorted by capacity in descending order. (Hints: France is the name of the country)",
        "query": "SELECT Name, Capacity FROM nuclear_power_plants WHERE Country = 'France' ORDER BY Capacity DESC"
    },
    {
        "question": "List the names and construction start dates of all nuclear power plants with a BWR reactor type, ordered by construction start date. (Hints: BWR is the reactor type)",
        "query": "SELECT Name, ConstructionStartAt FROM nuclear_power_plants WHERE ReactorType = 'BWR' ORDER BY ConstructionStartAt"
    },
    {
        "question": "What is the name and status of the nuclear power plant with the latest last update date? (Hints: )",
        "query": "SELECT Name, Status FROM nuclear_power_plants ORDER BY LastUpdatedAt DESC LIMIT 1"
    },
    {
        "question": "List all nuclear power plants that started construction after 2000 and are not yet operational. (Hints: not yet operational means Status should not be 'Operational')",
        "query": "SELECT * FROM nuclear_power_plants WHERE ConstructionStartAt >= '2000-01-01' AND Status != 'Operational'"
    },
    {
        "question": "What is the name and country of the nuclear power plant with the earliest operational start date? (Hints: )",
        "query": "SELECT Name, Country FROM nuclear_power_plants ORDER BY OperationalFrom LIMIT 1"
    },
    {
        "question": "What is the total capacity of all nuclear power plants in Japan that are either operational or under construction?",
        "query": "SELECT SUM(Capacity) FROM nuclear_power_plants WHERE Country = 'Japan' AND (Status = 'Operational' OR Status = 'Under Construction')"
    },
    {
        "question": "How many nuclear power plants of each reactor type are there in Russia?",
        "query": "SELECT ReactorType, COUNT(*) FROM nuclear_power_plants WHERE Country = 'Russia' GROUP BY ReactorType"
    },
    {
        "question": "Find the names and countries of all nuclear power plants that started construction after 1980 and are currently operational.",
        "query": "SELECT Name, Country FROM nuclear_power_plants WHERE ConstructionStartAt > '1980-01-01' AND Status = 'Operational'"
    },
    {
        "question": "List the names and construction start dates of all nuclear power plants with a CANDU 850 reactor model.",
        "query": "SELECT Name, ConstructionStartAt FROM nuclear_power_plants WHERE ReactorModel = 'CANDU 850'"
    },
    {
        "question": "Find the names and statuses of all nuclear power plants that have been shut down.",
        "query": "SELECT Name, Status FROM nuclear_power_plants WHERE Status = 'Shutdown'"
    },
    {
        "question": "List the names, capacity, and construction start dates of all cancelled nuclear power plants worldwide, ordered by capacity in descending order. (Hints: )",
        "query": "SELECT Name, Capacity, ConstructionStartAt FROM nuclear_power_plants WHERE Status = 'Cancelled Construction' ORDER BY Capacity DESC"
    },
    {
        "question": "What is the average capacity of operational nuclear power plants in France? (Hints: )",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE Country = 'France' AND Status = 'Operational'"
    },
    {
        "question": "List all nuclear power plants with a BWR reactor type that were operational before 1980. (Hints: )",
        "query": "SELECT * FROM nuclear_power_plants WHERE ReactorType = 'BWR' AND OperationalFrom < '1980-01-01'"
    },
    {
        "question": "What is the name and status of the nuclear power plant with the earliest construction start date? (Hints: )",
        "query": "SELECT Name, Status FROM nuclear_power_plants ORDER BY ConstructionStartAt LIMIT 1"
    },
    {
        "question": "Find all nuclear power plants whose construction started between 1970 and 1980. (Hints: )",
        "query": "SELECT * FROM nuclear_power_plants WHERE ConstructionStartAt BETWEEN '1970-01-01' AND '1979-12-31'"
    },
    {
        "question": "What are the different reactor models used in operational nuclear power plants in Japan? (Hints: )",
        "query": "SELECT DISTINCT ReactorModel FROM nuclear_power_plants WHERE Country = 'Japan' AND Status = 'Operational'"
    },
    {
        "question": "List the names, capacity, and construction start dates of all nuclear power plants in France that have a BWR reactor type. (Hints: France is the name of the country)",
        "query": "SELECT Name, Capacity, ConstructionStartAt FROM nuclear_power_plants WHERE Country = 'France' AND ReactorType = 'BWR'"
    },
    {
        "question": "What is the name and reactor model of the nuclear power plant with the earliest construction start date? (Hints: )",
        "query": "SELECT Name, ReactorModel FROM nuclear_power_plants ORDER BY ConstructionStartAt ASC LIMIT 1"
    },
    {
        "question": "List the countries and the number of nuclear power plants they have in each status category. (Hints: )",
        "query": "SELECT Country, Status, COUNT(*) AS NumberOfPlants FROM nuclear_power_plants GROUP BY Country, Status"
    },
    {
        "question": "Which country has the highest number of planned nuclear power plants? (Hints: Planned is the name of the status)",
        "query": "SELECT Country FROM nuclear_power_plants WHERE Status = 'Planned' GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "List the names and construction start dates of all nuclear power plants in France, sorted by construction start date.",
        "query": "SELECT Name, ConstructionStartAt FROM nuclear_power_plants WHERE Country = 'France' ORDER BY ConstructionStartAt"
    },
    {
        "question": "List all nuclear power plants that were operational from a date after January 1, 1980.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE OperationalFrom > '1980-01-01'"
    },
    {
        "question": "What are the names and statuses of nuclear power plants in the Czech Republic with a reactor model of 'VVER V-428'?",
        "query": "SELECT Name, Status FROM nuclear_power_plants WHERE Country = 'Czech Republic' AND ReactorModel = 'VVER V-428'"
    },
    {
        "question": "Find the number of cancelled nuclear power plant projects in Spain.",
        "query": "SELECT COUNT(*) FROM nuclear_power_plants WHERE Country = 'Spain' AND Status = 'Cancelled Construction'"
    },
    {
        "question": "List the names and sources of information for all nuclear power plants with unknown reactor types.",
        "query": "SELECT Name, Source FROM nuclear_power_plants WHERE ReactorType = ''"
    },
    {
        "question": "Find the names of all nuclear power plants with a BWR reactor type, ordered by their construction start date. (Hints: BWR is the reactor type)",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ReactorType = 'BWR' ORDER BY ConstructionStartAt"
    },
    {
        "question": "How many nuclear power plants are there in each country? (Hints: )",
        "query": "SELECT Country, COUNT(Id) FROM nuclear_power_plants GROUP BY Country"
    },
    {
        "question": "List the names and reactor models of all nuclear power plants that are currently under construction. (Hints: Under Construction is the status)",
        "query": "SELECT Name, ReactorModel FROM nuclear_power_plants WHERE Status = 'Under Construction'"
    },
    {
        "question": "Find all nuclear power plants with a capacity between 500 and 1000, ordered by capacity in descending order. (Hints: )",
        "query": "SELECT Name, Capacity FROM nuclear_power_plants WHERE Capacity BETWEEN 500 AND 1000 ORDER BY Capacity DESC"
    },
    {
        "question": "What is the average capacity of operational nuclear power plants in the People's Republic of China? (Hints: People's Republic of China is the country)",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE Country = 'People\\'s Republic of China' AND Status = 'Operational'"
    },
    {
        "question": "Find the names of all nuclear power plants with a reactor model of 'EPR' that are either operational or under construction. (Hints: EPR is the reactor model)",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ReactorModel = 'EPR' AND (Status = 'Operational' OR Status = 'Under Construction')"
    },
    {
        "question": "List the names, countries, and statuses of all nuclear power plants whose construction started after 1980. (Hints: )",
        "query": "SELECT Name, Country, Status FROM nuclear_power_plants WHERE ConstructionStartAt >= '1981-01-01'"
    },
    {
        "question": "What are the names and capacities of all nuclear power plants in the United States? (Hints: United States is the country)",
        "query": "SELECT Name, Capacity FROM nuclear_power_plants WHERE Country = 'United States'"
    },
    {
        "question": "List the names and reactor types of all operational nuclear power plants. (Hints: operational power plants mean status = operational)",
        "query": "SELECT Name, ReactorType FROM nuclear_power_plants WHERE Status = 'Operational'"
    },
    {
        "question": "Find the name and construction start date of the nuclear power plant with ID '656'. (Hints: ID '656' is the plant ID)",
        "query": "SELECT Name, ConstructionStartAt FROM nuclear_power_plants WHERE Id = '656'"
    },
    {
        "question": "List the names of all nuclear power plants that are currently under construction. (Hints: under construction are those with status = 'Under Construction')",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Status = 'Under Construction'"
    },
    {
        "question": "Find the capacity and reactor model of the 'Qinshan-3-2 (Qinshan 7)' nuclear power plant. (Hints: 'Qinshan-3-2 (Qinshan 7)' is the plant name)",
        "query": "SELECT Capacity, ReactorModel FROM nuclear_power_plants WHERE Name = 'Qinshan-3-2 (Qinshan 7)'"
    },
    {
        "question": "What is the status and source of information for the 'Shin Wolsong-2' nuclear power plant? (Hints: 'Shin Wolsong-2' is the plant name)",
        "query": "SELECT Status, Source FROM nuclear_power_plants WHERE Name = 'Shin Wolsong-2'"
    },
    {
        "question": "List all nuclear power plants in Czech Republic that have been shut down. (Hints: shut down means Status = 'Shutdown'; Czech Republic is the country name)",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Country = 'Czech Republic' AND Status = 'Shutdown'"
    },
    {
        "question": "What are the names, reactor types, and capacities of nuclear power plants in France that are operational? (Hints: operational means Status = 'Operational'; France is the country name)",
        "query": "SELECT Name, ReactorType, Capacity FROM nuclear_power_plants WHERE Country = 'France' AND Status = 'Operational'"
    },
    {
        "question": "Find the construction start date and operational start date for all nuclear power plants with a BWR reactor type. (Hints: BWR is the reactor type)",
        "query": "SELECT ConstructionStartAt, OperationalFrom FROM nuclear_power_plants WHERE ReactorType = 'BWR'"
    },
    {
        "question": "Find the names of nuclear power plants that started construction after 2000-01-01 and are currently under construction.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ConstructionStartAt > '2000-01-01' AND Status = 'Under Construction'"
    },
    {
        "question": "List the reactor types and models of all nuclear power plants in France.",
        "query": "SELECT ReactorType, ReactorModel FROM nuclear_power_plants WHERE Country = 'France'"
    },
    {
        "question": "List the names and construction start dates of all cancelled nuclear power plant projects in Spain.",
        "query": "SELECT Name, ConstructionStartAt FROM nuclear_power_plants WHERE Country = 'Spain' AND Status = 'Cancelled Construction'"
    },
    {
        "question": "List all nuclear power plants in France, sorted by their capacity in descending order. (Hints: France is the country)",
        "query": "SELECT * FROM nuclear_power_plants WHERE Country = 'France' ORDER BY Capacity DESC"
    },
    {
        "question": "Find the nuclear power plant with the earliest construction start date. (Hints: )",
        "query": "SELECT * FROM nuclear_power_plants ORDER BY ConstructionStartAt ASC LIMIT 1"
    },
    {
        "question": "List the names and statuses of all nuclear power plants with a BWR reactor type. (Hints: BWR is the reactor type)",
        "query": "SELECT Name, Status FROM nuclear_power_plants WHERE ReactorType = 'BWR'"
    },
    {
        "question": "What is the name and capacity of the nuclear power plant with the highest capacity? (Hints: )",
        "query": "SELECT Name, Capacity FROM nuclear_power_plants ORDER BY Capacity DESC LIMIT 1"
    },
    {
        "question": "List all nuclear power plants that were operational before 1980. (Hints: )",
        "query": "SELECT * FROM nuclear_power_plants WHERE OperationalFrom < '1980-01-01'"
    },
    {
        "question": "List the reactor types and models of all nuclear power plants in France that have been shut down.",
        "query": "SELECT ReactorType, ReactorModel FROM nuclear_power_plants WHERE Country = 'France' AND Status = 'Shutdown'"
    },
    {
        "question": "Find the names and construction start dates of all nuclear power plants with a capacity greater than 1000.",
        "query": "SELECT Name, ConstructionStartAt FROM nuclear_power_plants WHERE CAST(Capacity AS INT) > 1000"
    },
    {
        "question": "List the countries with nuclear power plants that have a CANDU reactor model.",
        "query": "SELECT DISTINCT Country FROM nuclear_power_plants WHERE ReactorModel LIKE '%CANDU%'"
    },
    {
        "question": "What is the latest update date for the nuclear power plant named 'Trino Vercellese'?",
        "query": "SELECT LastUpdatedAt FROM nuclear_power_plants WHERE Name = 'Trino Vercellese'"
    },
    {
        "question": "How many nuclear power plants in the United Kingdom have an operational status and a capacity greater than 600?",
        "query": "SELECT COUNT(*) FROM nuclear_power_plants WHERE Country = 'United Kingdom of Great Britain and Northern Ireland' AND Status = 'Operational' AND CAST(Capacity AS INT) > 600"
    },
    {
        "question": "What are the names, countries, and statuses of all nuclear power plants with a construction start date after 2000-01-01?",
        "query": "SELECT Name, Country, Status FROM nuclear_power_plants WHERE ConstructionStartAt > '2000-01-01'"
    },
    {
        "question": "List the reactor types of all nuclear power plants in Japan that are not operational.",
        "query": "SELECT DISTINCT ReactorType FROM nuclear_power_plants WHERE Country = 'Japan' AND Status != 'Operational'"
    },
    {
        "question": "List the names of all nuclear power plants in the United States that are currently operational.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Country = 'United States' AND Status = 'Operational'"
    },
    {
        "question": "What is the capacity of the nuclear power plant named 'Shin Wolsong-2'?",
        "query": "SELECT Capacity FROM nuclear_power_plants WHERE Name = 'Shin Wolsong-2'"
    },
    {
        "question": "Find the latitude and longitude of all nuclear power plants in France.",
        "query": "SELECT Latitude, Longitude FROM nuclear_power_plants WHERE Country = 'France'"
    },
    {
        "question": "List all reactor types and models used in nuclear power plants in Japan.",
        "query": "SELECT DISTINCT ReactorType, ReactorModel FROM nuclear_power_plants WHERE Country = 'Japan'"
    },
    {
        "question": "What is the average capacity of operational nuclear power plants in the People's Republic of China?",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE Country = \\"
    },
    {
        "question": "Find the country and status of the nuclear power plant with the earliest 'OperationalFrom' date.",
        "query": "SELECT Country, Status FROM nuclear_power_plants ORDER BY OperationalFrom ASC LIMIT 1"
    },
    {
        "question": "List the countries with the most number of 'Shutdown' nuclear power plants.",
        "query": "SELECT Country FROM nuclear_power_plants WHERE Status = 'Shutdown' GROUP BY Country ORDER BY COUNT(*) DESC"
    },
    {
        "question": "List the names and reactor types of all nuclear power plants in the United Kingdom that have a capacity greater than 600.",
        "query": "SELECT Name, ReactorType FROM nuclear_power_plants WHERE Country = 'United Kingdom of Great Britain and Northern Ireland' AND Capacity > 600"
    },
    {
        "question": "What are the different statuses of nuclear power plants in Czech Republic?",
        "query": "SELECT DISTINCT Status from nuclear_power_plants WHERE Country='Czech Republic'"
    },
    {
        "question": "Find the names of all nuclear power plants that have 'WNA' as their source and were operational from a date before '1980-01-01'.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Source LIKE '%WNA%' AND OperationalFrom < '1980-01-01'"
    },
    {
        "question": "What is the total capacity of all nuclear power plants in Japan that use the EPR reactor model?",
        "query": "SELECT SUM(Capacity) FROM nuclear_power_plants WHERE Country = 'Japan' and ReactorModel = 'EPR'"
    },
    {
        "question": "List the countries with nuclear power plants that have a 'Suspended Construction' status, ordered alphabetically.",
        "query": "SELECT DISTINCT Country FROM nuclear_power_plants WHERE Status = 'Suspended Construction' ORDER BY Country"
    },
    {
        "question": "Which reactor type is the most common among operational nuclear power plants?",
        "query": "SELECT ReactorType FROM nuclear_power_plants WHERE Status = 'Operational' GROUP BY ReactorType ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "question": "What are the names and statuses of nuclear power plants in Germany that started construction after 1980?",
        "query": "SELECT Name, Status FROM nuclear_power_plants WHERE Country = 'Germany' AND ConstructionStartAt > '1980-01-01'"
    },
    {
        "question": "Find the names and capacities of all CANDU reactors that are not operational.",
        "query": "SELECT Name, Capacity FROM nuclear_power_plants WHERE ReactorModel LIKE 'CANDU%' AND Status != 'Operational'"
    },
    {
        "question": "Find the names and construction start dates of all nuclear power plants with a BWR reactor type. (Hints: BWR is the reactor type)",
        "query": "SELECT Name, ConstructionStartAt FROM nuclear_power_plants WHERE ReactorType = 'BWR'"
    },
    {
        "question": "Find the names and countries of all nuclear power plants whose construction started before 1970. (Hints:)",
        "query": "SELECT Name, Country FROM nuclear_power_plants WHERE ConstructionStartAt < '1970-01-01'"
    },
    {
        "question": "List all nuclear power plants that are located in China and have a capacity between 500 and 1000. (Hints: China is the country; capacity between 500 and 1000)",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Country = 'People\\'s Republic of China' AND Capacity BETWEEN 500 AND 1000"
    },
    {
        "question": "What are the different reactor models used in nuclear power plants located in Japan? (Hints: Japan is the country)",
        "query": "SELECT DISTINCT ReactorModel FROM nuclear_power_plants WHERE Country = 'Japan'"
    },
    {
        "question": "List the names and statuses of all nuclear power plants with a construction start date after 2000. (Hints:)",
        "query": "SELECT Name, Status FROM nuclear_power_plants WHERE ConstructionStartAt > '2000-01-01'"
    },
    {
        "question": "Which country has the highest number of nuclear power plants with 'Cancelled Construction' status? (Hints: Cancelled Construction is the status)",
        "query": "SELECT Country FROM nuclear_power_plants WHERE Status='Cancelled Construction' GROUP BY Country ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "question": "List the names of all nuclear power plants that have been shut down, along with their shutdown dates (OperationalTo).",
        "query": "SELECT Name, OperationalTo FROM nuclear_power_plants WHERE Status = 'Shutdown'"
    },
    {
        "question": "List all nuclear power plants with a CANDU 850 reactor model, showing their name, country, and capacity.",
        "query": "SELECT Name, Country, Capacity FROM nuclear_power_plants WHERE ReactorModel = 'CANDU 850'"
    },
    {
        "question": "Find the names and countries of all nuclear power plants whose construction started after 2000-01-01.",
        "query": "SELECT Name, Country FROM nuclear_power_plants WHERE ConstructionStartAt > '2000-01-01'"
    },
    {
        "question": "Find the names and construction start dates of all nuclear power plants with a BWR reactor type that are currently under construction.",
        "query": "SELECT Name, ConstructionStartAt FROM nuclear_power_plants WHERE ReactorType = 'BWR' AND Status = 'Under Construction'"
    },
    {
        "question": "What is the latest update date for the nuclear power plant 'Oskarshamn-2'?",
        "query": "SELECT LastUpdatedAt FROM nuclear_power_plants WHERE Name = 'Oskarshamn-2'"
    },
    {
        "question": "List the names and reactor models of all CANDU reactors.",
        "query": "SELECT Name, ReactorModel FROM nuclear_power_plants WHERE ReactorModel LIKE 'CANDU%'"
    },
    {
        "question": "Which countries have nuclear power plants with a capacity greater than 600?",
        "query": "SELECT DISTINCT Country FROM nuclear_power_plants WHERE Capacity > 600"
    },
    {
        "question": "List all nuclear power plants with 'VVER' in their reactor model.",
        "query": "SELECT * FROM nuclear_power_plants WHERE ReactorModel LIKE '%VVER%'"
    },
    {
        "question": "Find the names and capacities of the top 5 largest nuclear power plants.",
        "query": "SELECT Name, Capacity FROM nuclear_power_plants ORDER BY Capacity DESC LIMIT 5"
    },
    {
        "question": "List the names, capacity, and construction start dates of all BWR reactor type nuclear power plants. (Hints: BWR is the ReactorType)",
        "query": "SELECT Name, Capacity, ConstructionStartAt FROM nuclear_power_plants WHERE ReactorType = 'BWR'"
    },
    {
        "question": "List the names and capacities of nuclear power plants that started construction after 2000-01-01 and are currently operational. (Hints: Operational is the Status)",
        "query": "SELECT Name, Capacity FROM nuclear_power_plants WHERE ConstructionStartAt > '2000-01-01' AND Status = 'Operational'"
    },
    {
        "question": "List the names, capacity, and construction start dates of all nuclear power plants in France, sorted by construction start date in ascending order. (Hints: France is the country)",
        "query": "SELECT Name, Capacity, ConstructionStartAt FROM nuclear_power_plants WHERE Country = 'France' ORDER BY ConstructionStartAt ASC"
    },
    {
        "question": "Find the name and capacity of the nuclear power plant with the latest last update date. (Hints: )",
        "query": "SELECT Name, Capacity FROM nuclear_power_plants ORDER BY LastUpdatedAt DESC LIMIT 1"
    },
    {
        "question": "What is the name and status of the nuclear power plant with the earliest operational start date? (Hints: )",
        "query": "SELECT Name, Status FROM nuclear_power_plants ORDER BY OperationalFrom ASC LIMIT 1"
    },
    {
        "question": "List the names and reactor models of all Shutdown nuclear power plants in Czech Republic. (Hints: Shutdown is the status; Czech Republic is the country)",
        "query": "SELECT Name, ReactorModel FROM nuclear_power_plants WHERE Status = 'Shutdown' AND Country = 'Czech Republic'"
    },
    {
        "question": "What is the capacity of the 'Qinshan-3-2 (Qinshan 7)' nuclear power plant?",
        "query": "SELECT Capacity FROM nuclear_power_plants WHERE Name = 'Qinshan-3-2 (Qinshan 7)'"
    },
    {
        "question": "What is the name and status of the nuclear power plant that was last updated on '2017-02-10'?",
        "query": "SELECT Name, Status FROM nuclear_power_plants WHERE LastUpdatedAt LIKE '2017-02-10%'"
    },
    {
        "question": "What is the average capacity of all nuclear power plants in the United Kingdom?",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE Country = 'United Kingdom of Great Britain and Northern Ireland'"
    },
    {
        "question": "Find the names and capacities of the nuclear power plants with the highest capacity in each country.",
        "query": "SELECT Name, Capacity FROM nuclear_power_plants WHERE Capacity IN (SELECT MAX(Capacity) FROM nuclear_power_plants GROUP BY Country)"
    },
    {
        "question": "List the names of all nuclear power plants that have a construction start date but no operational from date.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ConstructionStartAt IS NOT NULL AND OperationalFrom IS NULL"
    },
    {
        "question": "What are the names and reactor types of nuclear power plants that are either under construction or planned?",
        "query": "SELECT Name, ReactorType FROM nuclear_power_plants WHERE Status IN ('Under Construction', 'Planned')"
    },
    {
        "question": "How many nuclear power plants of each reactor type are there in each country?",
        "query": "SELECT Country, ReactorType, COUNT(*) FROM nuclear_power_plants GROUP BY Country, ReactorType"
    },
    {
        "question": "How many nuclear power plants are currently under construction in France?",
        "query": "SELECT COUNT(*) FROM nuclear_power_plants WHERE Country = 'France' AND Status = 'Under Construction'"
    },
    {
        "question": "List the reactor types and models of all nuclear power plants in China.",
        "query": "SELECT ReactorType, ReactorModel FROM nuclear_power_plants WHERE Country = 'People\\'s Republic of China'"
    },
    {
        "question": "What is the total capacity of all shutdown nuclear power plants in the United Kingdom?",
        "query": "SELECT SUM(Capacity) FROM nuclear_power_plants WHERE Country = 'United Kingdom of Great Britain and Northern Ireland' AND Status = 'Shutdown'"
    },
    {
        "question": "List all nuclear power plants that use the BWR reactor type and have 'WNA' as their source.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ReactorType = 'BWR' AND Source = 'WNA'"
    },
    {
        "question": "Find the names of nuclear power plants that became operational after 2000 and before 2010.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE OperationalFrom BETWEEN '2000-01-01' AND '2009-12-31'"
    },
    {
        "question": "List all nuclear power plants in Czech Republic, showing their names, status, and construction start date.",
        "query": "SELECT Name, Status, ConstructionStartAt FROM nuclear_power_plants WHERE Country = 'Czech Republic'"
    },
    {
        "question": "What is the average capacity of nuclear power plants in Spain?",
        "query": "SELECT AVG(Capacity) FROM nuclear_power_plants WHERE Country = 'Spain'"
    },
    {
        "question": "What is the status and capacity of the nuclear power plant with ID '656'?",
        "query": "SELECT Status, Capacity FROM nuclear_power_plants WHERE Id = '656'"
    },
    {
        "question": "List all nuclear power plants in China, their construction start dates, and operational start dates.",
        "query": "SELECT Name, ConstructionStartAt, OperationalFrom FROM nuclear_power_plants WHERE Country = 'People\\'s Republic of China'"
    },
    {
        "question": "What are the different reactor types used in operational nuclear power plants?",
        "query": "SELECT DISTINCT ReactorType FROM nuclear_power_plants WHERE Status = 'Operational'"
    },
    {
        "question": "Find the names of all nuclear power plants whose construction started after 2000 and are currently operational.",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ConstructionStartAt >= '2000-01-01' AND Status = 'Operational'"
    },
    {
        "question": "List the names, reactor types, and construction start dates of all nuclear power plants in France that are either under construction or planned. (Hints: France is the country)",
        "query": "SELECT Name, ReactorType, ConstructionStartAt FROM nuclear_power_plants WHERE Country = 'France' AND (Status = 'Under Construction' OR Status = 'Planned')"
    },
    {
        "question": "Find the names and countries of all nuclear power plants with a BWR reactor type that were operational before 1980. (Hints: BWR is the reactor type; Operational is the status)",
        "query": "SELECT Name, Country FROM nuclear_power_plants WHERE ReactorType = 'BWR' AND Status = 'Operational' AND OperationalFrom < '1980-01-01'"
    },
    {
        "question": "List all nuclear power plants in China, their reactor models, and their operational status. (Hints: China can be People's Republic of China)",
        "query": "SELECT Name, ReactorModel, Status FROM nuclear_power_plants WHERE Country = \\"
    },
    {
        "question": "How many nuclear power plants are currently operational in each country? (Hints: Operational is the status)",
        "query": "SELECT Country, COUNT(*) FROM nuclear_power_plants WHERE Status = 'Operational' GROUP BY Country"
    },
    {
        "question": "Find the names and countries of all nuclear power plants that have been shut down. (Hints: Shutdown is the status)",
        "query": "SELECT Name, Country FROM nuclear_power_plants WHERE Status = 'Shutdown'"
    },
    {
        "question": "Which nuclear power plant in the United Kingdom has the latest last update date?",
        "query": "SELECT Name FROM nuclear_power_plants WHERE Country = 'United Kingdom of Great Britain and Northern Ireland' ORDER BY LastUpdatedAt DESC LIMIT 1"
    },
    {
        "question": "Find the latitude and longitude of the Gundremmingen-A nuclear power plant.",
        "query": "SELECT Latitude, Longitude FROM nuclear_power_plants WHERE Name = 'Gundremmingen-A'"
    },
    {
        "question": "What are the different statuses of nuclear power plants in Japan?",
        "query": "SELECT DISTINCT Status FROM nuclear_power_plants WHERE Country = 'Japan'"
    },
    {
        "question": "Which nuclear power plant has the earliest operational start date?",
        "query": "SELECT Name FROM nuclear_power_plants ORDER BY OperationalFrom ASC LIMIT 1"
    },
    {
        "question": "What is the total capacity of all nuclear power plants in Russia?",
        "query": "SELECT SUM(Capacity) FROM nuclear_power_plants WHERE Country = 'Russia'"
    },
    {
        "question": "List the names of all nuclear power plants, their reactor types, and their construction start dates, ordered by country.",
        "query": "SELECT Name, ReactorType, ConstructionStartAt FROM nuclear_power_plants ORDER BY Country"
    },
    {
        "question": "What are the names and statuses of all nuclear power plants that have a construction start date but no operational from date?",
        "query": "SELECT Name, Status FROM nuclear_power_plants WHERE ConstructionStartAt IS NOT NULL AND OperationalFrom IS NULL"
    },
    {
        "question": "What is the total capacity of all nuclear power plants currently under construction in China?",
        "query": "SELECT SUM(Capacity) FROM nuclear_power_plants WHERE Country = 'People\\'s Republic of China' AND Status = 'Under Construction'"
    },
    {
        "question": "What are the different reactor models used in the United Kingdom?",
        "query": "SELECT DISTINCT ReactorModel FROM nuclear_power_plants WHERE Country = 'United Kingdom of Great Britain and Northern Ireland'"
    },
    {
        "question": "What is the name and capacity of the nuclear power plant with Id '656'?",
        "query": "SELECT Name, Capacity FROM nuclear_power_plants WHERE Id = '656'"
    },
    {
        "question": "List the names and statuses of all nuclear power plants that started construction after 1980-01-01. (Hints: construction started after 1980-01-01 is ConstructionStartAt > '1980-01-01')",
        "query": "SELECT Name, Status FROM nuclear_power_plants WHERE ConstructionStartAt > '1980-01-01'"
    },
    {
        "question": "Which nuclear power plant has the highest capacity? (Hints: highest capacity implies using MAX)",
        "query": "SELECT Name FROM nuclear_power_plants ORDER BY Capacity DESC LIMIT 1"
    },
    {
        "question": "What is the name and status of the nuclear power plant with ID '656'? (Hints: id '656' is Id = '656')",
        "query": "SELECT Name, Status FROM nuclear_power_plants WHERE Id = '656'"
    },
    {
        "question": "What is the total capacity of all operational nuclear power plants worldwide? (Hints: Total capacity, operational plants implies using SUM and Status = 'Operational')",
        "query": "SELECT SUM(Capacity) FROM nuclear_power_plants WHERE Status = 'Operational'"
    },
    {
        "question": "Find the names of all nuclear power plants with a reactor model of 'EPR'. (Hints: reactor model of 'EPR' is ReactorModel = 'EPR')",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ReactorModel = 'EPR'"
    },
    {
        "question": "List the names and statuses of all nuclear power plants in Kazakhstan.",
        "query": "SELECT Name, Status FROM nuclear_power_plants WHERE Country = 'Kazakhstan'"
    },
    {
        "question": "What is the source of information for the Gundremmingen-A nuclear power plant data?",
        "query": "SELECT Source FROM nuclear_power_plants WHERE Name = 'Gundremmingen-A'"
    },
    {
        "question": "Which nuclear power plants have an unknown reactor type?",
        "query": "SELECT Name FROM nuclear_power_plants WHERE ReactorType IS NULL OR ReactorType = ''"
    },
    {
        "question": "List the names and capacities of nuclear power plants with a capacity greater than 1000.",
        "query": "SELECT Name, Capacity FROM nuclear_power_plants WHERE Capacity > 1000"
    }
]