question_id,selected_schema_with_connections
0,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`County Name` TEXT null, -- examples: `Alameda`
	`Enrollment (K-12)` REAL null, -- description: Enrollment (K-12) value description: K-12: 1st grade - 12nd grade
	`Free Meal Count (K-12)` REAL null, -- description: Free Meal Count (K-12) value description: eligible free rate = Free Meal Count / Enrollment
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, -- examples: `Alameda`
	School TEXT null, -- examples: `Alameda High`, `Alameda County Community`
);"
1,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`Educational Option Type` TEXT null, -- examples: `Continuation School`
	`Enrollment (Ages 5-17)` REAL null, -- description: Enrollment (Ages 5-17)
	`Free Meal Count (Ages 5-17)` REAL null, -- description: Free Meal Count (Ages 5-17) value description: eligible free rate = Free Meal Count / Enrollment
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `Continuation School`
);"
10,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	AvgScrRead INTEGER null, -- `average scores in Reading` description: average scores in Reading value description: average scores in Reading
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`FRPM Count (Ages 5-17)` REAL null, --
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, --
	School TEXT null, -- description: School
);"
11,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`Enrollment (K-12)` REAL null, -- description: Enrollment (K-12) value description: K-12: 1st grade - 12nd grade
	`Enrollment (Ages 5-17)` REAL null, -- description: Enrollment (Ages 5-17)
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `MethodSchools`
);"
12,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	NumTstTakr INTEGER not null, -- `Number of Test Takers` description: Number of Test Takers in this school value description: number of test takers in each school
	NumGE1500 INTEGER null, -- `Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500` description: Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 value description: Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500    Excellence Rate = NumGE1500 / NumTstTakr
);

CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`Enrollment (Ages 5-17)` REAL null, -- description: Enrollment (Ages 5-17)
	`Free Meal Count (Ages 5-17)` REAL null, -- description: Free Meal Count (Ages 5-17) value description: eligible free rate = Free Meal Count / Enrollment
);"
13,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	NumTstTakr INTEGER not null, -- `Number of Test Takers` description: Number of Test Takers in this school value description: number of test takers in each school
	NumGE1500 INTEGER null, -- `Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500` description: Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 value description: Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500    Excellence Rate = NumGE1500 / NumTstTakr
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `MethodSchools`
	Phone TEXT null, --
);"
14,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`Enrollment (Ages 5-17)` REAL null, -- description: Enrollment (Ages 5-17)
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	NCESSchool TEXT null, -- `National Center for Educational Statistics school identification number` description: This field represents the 5-digit NCES school identification number. The NCESSchool combined with the NCESDist form a unique 12-digit ID for each school.
	School TEXT null, -- examples: `MethodSchools`| description: School
);"
15,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	StatusType TEXT not null, -- examples: `Active`
	District TEXT not null, -- description: District
);

CREATE TABLE satscores
(
	cds TEXT not null primary key,
	AvgScrRead INTEGER null, -- `average scores in Reading` description: average scores in Reading value description: average scores in Reading
	foreign key (cds) references schools (CDSCode),
);"
16,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	StatusType TEXT not null, -- examples: `Merged`
	County TEXT not null, -- examples: `Alameda`| description: County name
	School TEXT null, -- examples: `Alameda High`| description: School
);

CREATE TABLE satscores
(
	cds TEXT not null primary key,
	NumTstTakr INTEGER not null, -- `Number of Test Takers` description: Number of Test Takers in this school value description: number of test takers in each school
	foreign key (cds) references schools (CDSCode),
);"
17,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	AvgScrWrite INTEGER null, -- `average scores in writing` description: average scores in writing value description: average scores in writing
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`Charter School Number` TEXT null, -- examples: `0499`| description: Charter School Number
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- description: School
	Charter INTEGER null, -- description: This field identifies a charter school. value description: The field is coded as follows:  ·       1 = The school is a charter  ·       0 = The school is not a charter
	CharterNum TEXT null, -- examples: `0499`| description: The charter school number, value description: 4-digit number assigned to a charter school.
);"
18,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	NumTstTakr INTEGER not null, -- `Number of Test Takers` description: Number of Test Takers in this school value description: number of test takers in each school
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, -- examples: `Contra Costa`| description: County name
	School TEXT null, -- examples: `Contra Costa Adult`| description: School
	FundingType TEXT null, -- examples: `Directly funded`| description: Indicates the charter school funding type value description: Values are as follows:  ·       Not in CS (California School) funding model  ·       Locally funded  ·       Directly funded
);"
19,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- description: School
	Phone TEXT null, -- description: Phone
);

CREATE TABLE satscores
(
	cds TEXT not null primary key,
	AvgScrMath INTEGER null, -- `average scores in Math` description: average scores in Math value description: average scores in Math
	foreign key (cds) references schools (CDSCode),
);"
2,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`District Name` TEXT null, -- examples: `Fresno County Office of Education`
	`Charter School (Y/N)` INTEGER null, -- description: Charter School (Y/N) value description: 0: N; 1: Y
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, -- examples: `Fresno`
	Zip TEXT null, --
	Charter INTEGER null, -- description: This field identifies a charter school. value description: The field is coded as follows:  ·       1 = The school is a charter  ·       0 = The school is not a charter
);"
20,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`County Name` TEXT null, -- examples: `Amador`
	`Low Grade` TEXT null, -- description: Low Grade
	`High Grade` TEXT null, -- description: High Grade
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `Amador High`| description: School
);"
21,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`County Name` TEXT null, -- examples: `Los Angeles`
	`Free Meal Count (K-12)` REAL null, -- description: Free Meal Count (K-12) value description: eligible free rate = Free Meal Count / Enrollment
	`FRPM Count (K-12)` REAL null, -- description: Free or Reduced Price Meal Count (K-12) value description: eligible FRPM rate = FRPM / Enrollment
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `MethodSchools`| description: School
);"
22,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	sname TEXT null, -- `school name` description: school name
	cname TEXT null, -- examples: `Contra Costa`| `county name` description: county name
	NumTstTakr INTEGER not null, -- `Number of Test Takers` description: Number of Test Takers in this school value description: number of test takers in each school
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `Contra Costa Adult`| description: School
);"
23,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`School Name` TEXT null, -- examples: `MethodSchools`
	`Enrollment (K-12)` REAL null, -- description: Enrollment (K-12) value description: K-12: 1st grade - 12nd grade
	`Enrollment (Ages 5-17)` REAL null, -- description: Enrollment (Ages 5-17)
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `MethodSchools`
	Street TEXT null, --
);"
24,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`School Name` TEXT null, -- examples: `MethodSchools`| description: School Name
	`Percent (%) Eligible Free (K-12)` REAL null, --
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE satscores
(
	cds TEXT not null primary key,
	NumGE1500 INTEGER null, -- `Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500` description: Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 value description: Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500    Excellence Rate = NumGE1500 / NumTstTakr
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `MethodSchools`| description: School
);"
25,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`County Name` TEXT null, -- examples: `Riverside`
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE satscores
(
	cds TEXT not null primary key,
	AvgScrMath INTEGER null, -- `average scores in Math` description: average scores in Math value description: average scores in Math
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `Riverside Adult`
	FundingType TEXT null, -- description: Indicates the charter school funding type value description: Values are as follows:  ·       Not in CS (California School) funding model  ·       Locally funded  ·       Directly funded
);"
26,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`County Name` TEXT null, -- examples: `Monterey`
	`School Name` TEXT null, -- examples: `MethodSchools`
	`FRPM Count (Ages 5-17)` REAL null, --
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `Monterey ROP`
	Street TEXT null, -- examples: `High School Class`
	City TEXT null, -- examples: `Monterey`
	Zip TEXT null, --
	State TEXT null, --
	EILName TEXT null, -- examples: `High School`
);"
27,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `MethodSchools`
	Phone TEXT null, -- description: Phone
	OpenDate DATE null, -- examples: `2006-08-28`
	ClosedDate DATE null, -- examples: `1989-06-30`| description: The date the school closed.
);

CREATE TABLE satscores
(
	cds TEXT not null primary key,
	AvgScrWrite INTEGER null, -- `average scores in writing` description: average scores in writing value description: average scores in writing
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`School Name` TEXT null, -- examples: `MethodSchools`
	foreign key (CDSCode) references schools (CDSCode),
);"
28,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`Enrollment (K-12)` REAL null, -- description: Enrollment (K-12) value description: K-12: 1st grade - 12nd grade
	`Enrollment (Ages 5-17)` REAL null, -- description: Enrollment (Ages 5-17)
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `MethodSchools`
	FundingType TEXT null, -- examples: `Locally funded`
	DOC TEXT not null, -- `District Ownership Code` description: District Ownership Code value description: The District Ownership Code (DOC) is the numeric code used to identify the category of the Administrative Authority. •       00 - County Office of Education •       02 – State Board of Education •       03 – Statewide Benefit Charter •       31 – State Special Schools •       34 – Non-school Location* •       52 – Elementary School District •       54 – Unified School District •       56 – High School District •       98 – Regional Occupational Center/Program (ROC/P)  *Only the California Education Authority has been included in the non-school location category.
	DOCType TEXT not null, --
);"
29,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`Enrollment (K-12)` REAL null, -- description: Enrollment (K-12) value description: K-12: 1st grade - 12nd grade
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, --
	OpenDate DATE null, -- examples: `2011-08-09`| description: The date the school opened.
	GSserved TEXT null, -- examples: `K-12`| `grade span served.` description: It is the lowest grade and the highest grade of student enrollment as reported in the most recent certified CALPADS Fall 1 data collection. Only K–12 enrollment is reported through CALPADS. This field may differ from the grade span offered. value description: 1.     Only K–12 enrollment is reported through CALPADS  2.     Note: Special programs at independent study, alternative education, and special education schools will often exceed the typical grade span for schools of that type
);"
3,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`FRPM Count (K-12)` REAL null, -- description: Free or Reduced Price Meal Count (K-12) value description: eligible FRPM rate = FRPM / Enrollment
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, --
	School TEXT null, -- description: School
	MailStreet TEXT null, -- description: MailStreet value description: The unabbreviated mailing address of the school, district, or administrative authority. Note: 1) Some entities (primarily closed or retired schools) may not have data in this field; 2) Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStreet cells with Street data.
);"
30,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`Enrollment (K-12)` REAL null, -- description: Enrollment (K-12) value description: K-12: 1st grade - 12nd grade
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	City TEXT null, --
);"
31,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`School Name` TEXT null, -- examples: `MethodSchools`
	`Enrollment (K-12)` REAL null, -- description: Enrollment (K-12) value description: K-12: 1st grade - 12nd grade
	`Free Meal Count (K-12)` REAL null, -- description: Free Meal Count (K-12) value description: eligible free rate = Free Meal Count / Enrollment
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `MethodSchools`
);"
32,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`Enrollment (K-12)` REAL null, -- description: Enrollment (K-12) value description: K-12: 1st grade - 12nd grade
	`FRPM Count (K-12)` REAL null, -- description: Free or Reduced Price Meal Count (K-12) value description: eligible FRPM rate = FRPM / Enrollment
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, --
	School TEXT null, -- examples: `MethodSchools`
	SOC TEXT null, -- `School Ownership Code` description: The School Ownership Code is a numeric code used to identify the type of school. value description: •      08 - Preschool       •       09 – Special Education Schools (Public) •      11 – Youth Authority Facilities (CEA) •       13 – Opportunity Schools •       14 – Juvenile Court Schools •       15 – Other County or District Programs •       31 – State Special Schools •       60 – Elementary School (Public) •       61 – Elementary School in 1 School District (Public) •       62 – Intermediate/Middle Schools (Public) •       63 – Alternative Schools of Choice •       64 – Junior High Schools (Public) •       65 – K-12 Schools (Public) •       66 – High Schools (Public) •       67 – High Schools in 1 School District (Public) •       68 – Continuation High Schools •       69 – District Community Day Schools •       70 – Adult Education Centers •       98 – Regional Occupational Center/Program (ROC/P)
);"
33,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`Free Meal Count (Ages 5-17)` REAL null, -- description: Free Meal Count (Ages 5-17) value description: eligible free rate = Free Meal Count / Enrollment
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, --
	School TEXT null, -- examples: `MethodSchools`| description: School
	Website TEXT null, -- description: The website address of the school, district, or administrative authority. value description: The website address of the school, district, or administrative authority.
);"
34,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`Enrollment (Ages 5-17)` REAL null, -- description: Enrollment (Ages 5-17)
	`Free Meal Count (Ages 5-17)` REAL null, -- description: Free Meal Count (Ages 5-17) value description: eligible free rate = Free Meal Count / Enrollment
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, --
	School TEXT null, --
	AdmFName1 TEXT null, -- examples: `Kacey`
	AdmLName1 TEXT null, -- examples: `Gibson`, `Free`
);"
35,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`Charter School (Y/N)` INTEGER null, -- description: Charter School (Y/N) value description: 0: N; 1: Y
	`Enrollment (K-12)` REAL null, -- description: Enrollment (K-12) value description: K-12: 1st grade - 12nd grade
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `Epic Charter School`
	AdmEmail1 TEXT null, -- `administrator's email address` description: administrator's email address value description: The superintendent’s or principal’s email address.    Only active and pending districts and schools will display administrator information, if applicable.
);"
36,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	NumGE1500 INTEGER null, -- `Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500` description: Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 value description: Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500    Excellence Rate = NumGE1500 / NumTstTakr
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, --
	AdmFName1 TEXT null, -- `administrator's first name` description: administrator's first name value description: The superintendent’s or principal’s first name.    Only active and pending districts and schools will display administrator information, if applicable.
	AdmLName1 TEXT null, -- examples: `Administration`| `administrator's last name` description: administrator's last name value description: The superintendent’s or principal’s last name.   Only active and pending districts and schools will display administrator information, if applicable.
	AdmFName2 TEXT null, --
	AdmLName2 TEXT null, -- examples: `Administrator`
	AdmFName3 TEXT null, --
	AdmLName3 TEXT null, --
);

CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	foreign key (CDSCode) references schools (CDSCode),
);"
37,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	NumTstTakr INTEGER not null, -- `Number of Test Takers` description: Number of Test Takers in this school value description: number of test takers in each school
	NumGE1500 INTEGER null, -- `Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500` description: Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 value description: Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500    Excellence Rate = NumGE1500 / NumTstTakr
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	Street TEXT null, --
	City TEXT null, --
	Zip TEXT null, --
	State TEXT null, --
);"
38,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, -- examples: `Los Angeles`| description: County name
	School TEXT null, -- examples: `Los Angeles County ROP`| description: School
	Website TEXT null, -- description: The website address of the school, district, or administrative authority. value description: The website address of the school, district, or administrative authority.
);

CREATE TABLE satscores
(
	cds TEXT not null primary key,
	NumTstTakr INTEGER not null, -- `Number of Test Takers` description: Number of Test Takers in this school value description: number of test takers in each school
	foreign key (cds) references schools (CDSCode),
);"
39,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, -- examples: `Fresno`
	School TEXT null, -- examples: `Fresno ROP`
	OpenDate DATE null, -- examples: `2003-08-28`| description: The date the school opened.
);

CREATE TABLE satscores
(
	cds TEXT not null primary key,
	NumTstTakr INTEGER not null, -- `Number of Test Takers` description: Number of Test Takers in this school value description: number of test takers in each school
	foreign key (cds) references schools (CDSCode),
);"
4,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`Charter School (Y/N)` INTEGER null, -- description: Charter School (Y/N) value description: 0: N; 1: Y
	`Charter Funding Type` TEXT null, -- examples: `Directly funded`
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `Epic Charter School`
	Phone TEXT null, --
	OpenDate DATE null, -- examples: `1997-09-01`
);"
40,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`District Name` TEXT null, -- examples: `Fresno Unified`| description: District Name
	`School Name` TEXT null, -- examples: `Fresno High`| description: School Name
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE satscores
(
	cds TEXT not null primary key,
	sname TEXT null, -- examples: `Fresno High`| `school name` description: school name
	dname TEXT null, -- examples: `Fresno Unified`| `district name` description: district segment
	AvgScrRead INTEGER null, -- `average scores in Reading` description: average scores in Reading value description: average scores in Reading
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	District TEXT not null, -- examples: `Fresno Unified`| description: District
	School TEXT null, -- examples: `Fresno ROP`
	Phone TEXT null, --
);"
41,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	Virtual TEXT null, -- description: This field identifies the type of virtual instruction offered by the school. Virtual instruction is instruction in which students and teachers are separated by time and/or location, and interaction occurs via computers and/or telecommunications technologies. value description: The field is coded as follows:  ·       F = Exclusively Virtual – The school has no physical building where students meet with each other or with teachers, all instruction is virtual.  ·       V = Primarily Virtual – The school focuses on a systematic program of virtual instruction but includes some physical meetings among students or with teachers.  ·       C = Primarily Classroom – The school offers virtual courses but virtual instruction is not the primary means of instruction.  ·       N = Not Virtual – The school does not offer any virtual instruction.  ·       P = Partial Virtual – The school offers some, but not all, instruction through virtual instruction. Note: This value was retired and replaced with the Primarily Virtual and Primarily Classroom values beginning with the 2016–17 school year.
);

CREATE TABLE satscores
(
	cds TEXT not null primary key,
	AvgScrRead INTEGER null, -- `average scores in Reading` description: average scores in Reading value description: average scores in Reading
	foreign key (cds) references schools (CDSCode),
);"
42,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- description: School
	EdOpsName TEXT null, -- `Educational Option Name` description: Educational Option Name value description: The Educational Option Name is the long text description of the type of education being offered.
);

CREATE TABLE satscores
(
	cds TEXT not null primary key,
	AvgScrMath INTEGER null, -- `average scores in Math` description: average scores in Math value description: average scores in Math
	foreign key (cds) references schools (CDSCode),
);"
43,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	AvgScrRead INTEGER null, -- `average scores in Reading` description: average scores in Reading value description: average scores in Reading
	AvgScrMath INTEGER null, -- `average scores in Math` description: average scores in Math value description: average scores in Math
	AvgScrWrite INTEGER null, -- `average scores in writing` description: average scores in writing value description: average scores in writing
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, --
);"
44,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	AvgScrWrite INTEGER null, -- `average scores in writing` description: average scores in writing value description: average scores in writing
	NumGE1500 INTEGER null, -- `Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500` description: Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 value description: Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500    Excellence Rate = NumGE1500 / NumTstTakr
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- description: School
	City TEXT null, -- description: City
);"
45,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `MethodSchools`
	AdmFName1 TEXT null, -- examples: `Ricci`| `administrator's first name` description: administrator's first name value description: The superintendent’s or principal’s first name.    Only active and pending districts and schools will display administrator information, if applicable.
	AdmLName1 TEXT null, -- examples: `Ulrich`| `administrator's last name` description: administrator's last name value description: The superintendent’s or principal’s last name.   Only active and pending districts and schools will display administrator information, if applicable.
);

CREATE TABLE satscores
(
	cds TEXT not null primary key,
	AvgScrWrite INTEGER null, -- `average scores in writing` description: average scores in writing value description: average scores in writing
	foreign key (cds) references schools (CDSCode),
);"
46,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`Enrollment (K-12)` REAL null, -- description: Enrollment (K-12) value description: K-12: 1st grade - 12nd grade
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	State TEXT null, --
	DOC TEXT not null, -- `District Ownership Code` description: District Ownership Code value description: The District Ownership Code (DOC) is the numeric code used to identify the category of the Administrative Authority. •       00 - County Office of Education •       02 – State Board of Education •       03 – Statewide Benefit Charter •       31 – State Special Schools •       34 – Non-school Location* •       52 – Elementary School District •       54 – Unified School District •       56 – High School District •       98 – Regional Occupational Center/Program (ROC/P)  *Only the California Education Authority has been included in the non-school location category.
);"
47,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, -- examples: `Alameda`
	District TEXT not null, -- examples: `Alameda County Office of Education`
	School TEXT null, -- examples: `Bay Elementary`
	OpenDate DATE null, -- examples: `2006-08-28`
	DOC TEXT not null, -- `District Ownership Code` description: District Ownership Code value description: The District Ownership Code (DOC) is the numeric code used to identify the category of the Administrative Authority. •       00 - County Office of Education •       02 – State Board of Education •       03 – Statewide Benefit Charter •       31 – State Special Schools •       34 – Non-school Location* •       52 – Elementary School District •       54 – Unified School District •       56 – High School District •       98 – Regional Occupational Center/Program (ROC/P)  *Only the California Education Authority has been included in the non-school location category.
	DOCType TEXT not null, --
);"
48,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	StatusType TEXT not null, -- examples: `Merged`
	County TEXT not null, -- examples: `Orange`
	District TEXT not null, -- examples: `ABC Unified`
	School TEXT null, -- examples: `Bay Elementary`
	DOC TEXT not null, -- `District Ownership Code` description: District Ownership Code value description: The District Ownership Code (DOC) is the numeric code used to identify the category of the Administrative Authority. •       00 - County Office of Education •       02 – State Board of Education •       03 – Statewide Benefit Charter •       31 – State Special Schools •       34 – Non-school Location* •       52 – Elementary School District •       54 – Unified School District •       56 – High School District •       98 – Regional Occupational Center/Program (ROC/P)  *Only the California Education Authority has been included in the non-school location category.
);"
49,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	StatusType TEXT not null, -- examples: `Closed`| description: This field identifies the status of the district. value description: Definitions of the valid status types are listed below: ·       Active: The district is in operation and providing instructional services. ·       Closed: The district is not in operation and no longer providing instructional services. ·       Merged: The district has combined with another district or districts. ·       Pending: The district has not opened for operation and instructional services yet, but plans to open within the next 9–12 months.
	County TEXT not null, -- description: County name
	School TEXT null, -- examples: `MethodSchools`
	ClosedDate DATE null, -- examples: `2004-07-01`| description: The date the school closed.
);"
5,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	AvgScrMath INTEGER null, -- `average scores in Math` description: average scores in Math value description: average scores in Math
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `Virtual Pre`
	Virtual TEXT null, -- description: This field identifies the type of virtual instruction offered by the school. Virtual instruction is instruction in which students and teachers are separated by time and/or location, and interaction occurs via computers and/or telecommunications technologies. value description: The field is coded as follows:  ·       F = Exclusively Virtual – The school has no physical building where students meet with each other or with teachers, all instruction is virtual.  ·       V = Primarily Virtual – The school focuses on a systematic program of virtual instruction but includes some physical meetings among students or with teachers.  ·       C = Primarily Classroom – The school offers virtual courses but virtual instruction is not the primary means of instruction.  ·       N = Not Virtual – The school does not offer any virtual instruction.  ·       P = Partial Virtual – The school offers some, but not all, instruction through virtual instruction. Note: This value was retired and replaced with the Primarily Virtual and Primarily Classroom values beginning with the 2016–17 school year.
);"
50,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	sname TEXT null, -- `school name` description: school name
	AvgScrMath INTEGER null, -- `average scores in Math` description: average scores in Math value description: average scores in Math
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `Postal Street Academy`
	Street TEXT null, --
	StreetAbr TEXT null, -- `street address` description: The abbreviated street address of the school, district, or administrative authority’s physical location. value description: The abbreviated street address of the school, district, or administrative authority’s physical location. Note: Some records (primarily records of closed or retired schools) may not have data in this field.
);

CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`School Name` TEXT null, -- description: School Name
	foreign key (CDSCode) references schools (CDSCode),
);"
51,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	AvgScrRead INTEGER null, -- `average scores in Reading` description: average scores in Reading value description: average scores in Reading
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- description: School
	Street TEXT null, --
	MailStrAbr TEXT null, -- examples: `One School St.`| `mailing street address` value description: the abbreviated mailing street address of the school, district, or administrative authority.Note: Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStrAbr cells with StreetAbr data.
);

CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`School Name` TEXT null, -- description: School Name
	foreign key (CDSCode) references schools (CDSCode),
);"
52,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	AvgScrRead INTEGER null, -- `average scores in Reading` description: average scores in Reading value description: average scores in Reading
	AvgScrMath INTEGER null, -- `average scores in Math` description: average scores in Math value description: average scores in Math
	AvgScrWrite INTEGER null, -- `average scores in writing` description: average scores in writing value description: average scores in writing
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `MethodSchools`
	City TEXT null, -- examples: `Lakeport`
	MailCity TEXT null, -- examples: `Lakeport`
);"
53,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `Fresno ROP`| description: School
	City TEXT null, -- examples: `Fresno`| description: City
	MailCity TEXT null, -- examples: `Fresno`| `mailing city` value description: The city associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address city. For your convenience we have filled the unpopulated MailCity cells with City data.
);

CREATE TABLE satscores
(
	cds TEXT not null primary key,
	NumTstTakr INTEGER not null, -- `Number of Test Takers` description: Number of Test Takers in this school value description: number of test takers in each school
	foreign key (cds) references schools (CDSCode),
);"
54,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `MethodSchools`| description: School
	Zip TEXT null, --
	MailZip TEXT null, -- `mailing zip` value description: The zip code associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address zip code. For your convenience we have filled the unpopulated MailZip cells with Zip data.
	AdmFName1 TEXT null, -- examples: `Avetik`| `administrator's first name` description: administrator's first name value description: The superintendent’s or principal’s first name.    Only active and pending districts and schools will display administrator information, if applicable.
	AdmLName1 TEXT null, -- examples: `Atoian`, `Administration`| `administrator's last name` description: administrator's last name value description: The superintendent’s or principal’s last name.   Only active and pending districts and schools will display administrator information, if applicable.
);"
55,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, -- examples: `Colusa`, `Humboldt`
	School TEXT null, -- examples: `Humboldt ROP`, `California High`
	State TEXT null, --
	MailState TEXT null, -- `mailing state` value description: The state within the mailing address. For your convenience we have filled the unpopulated MailState cells with State data.
);"
56,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	StatusType TEXT not null, -- examples: `Active`
	County TEXT not null, -- examples: `San Joaquin`| description: County name
	School TEXT null, -- examples: `California High`| description: School
	State TEXT null, -- description: State
	MailState TEXT null, -- `mailing state` value description: The state within the mailing address. For your convenience we have filled the unpopulated MailState cells with State data.
);"
57,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	AvgScrWrite INTEGER null, -- `average scores in writing` description: average scores in writing value description: average scores in writing
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- description: School
	Phone TEXT null, -- description: Phone
	Ext TEXT null, -- `extension` description: The phone number extension of the school, district, or administrative authority. value description: The phone number extension of the school, district, or administrative authority.
);"
58,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- description: School
	Zip TEXT null, -- examples: `95203-3704`
	Phone TEXT null, -- description: Phone
	Ext TEXT null, -- `extension` description: The phone number extension of the school, district, or administrative authority. value description: The phone number extension of the school, district, or administrative authority.
);

CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`School Name` TEXT null, -- description: School Name
	foreign key (CDSCode) references schools (CDSCode),
);"
59,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `MethodSchools`| description: School
	Website TEXT null, -- description: The website address of the school, district, or administrative authority. value description: The website address of the school, district, or administrative authority.
	AdmFName1 TEXT null, -- examples: `Mike`, `Dante`| `administrator's first name` description: administrator's first name value description: The superintendent’s or principal’s first name.    Only active and pending districts and schools will display administrator information, if applicable.
	AdmLName1 TEXT null, -- examples: `Larson`, `Alvarez`| `administrator's last name` description: administrator's last name value description: The superintendent’s or principal’s last name.   Only active and pending districts and schools will display administrator information, if applicable.
	AdmFName2 TEXT null, -- examples: `Mike`
	AdmLName2 TEXT null, --
);"
6,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	NumTstTakr INTEGER not null, -- `Number of Test Takers` description: Number of Test Takers in this school value description: number of test takers in each school
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `MethodSchools`
	Magnet INTEGER null, -- description: This field identifies whether a school is a magnet school and/or provides a magnet program. value description: The field is coded as follows:  ·       Y = Magnet - The school is a magnet school and/or offers a magnet program.  ·       N = Not Magnet - The school is not a magnet school and/or does not offer a magnet program.    Note: Preschools and adult education centers do not contain a magnet school indicator.
);"
60,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, -- examples: `San Joaquin`
	School TEXT null, -- examples: `Virtual Pre`
	Website TEXT null, -- description: The website address of the school, district, or administrative authority. value description: The website address of the school, district, or administrative authority.
	Charter INTEGER null, -- description: This field identifies a charter school. value description: The field is coded as follows:  ·       1 = The school is a charter  ·       0 = The school is not a charter
	Virtual TEXT null, -- description: This field identifies the type of virtual instruction offered by the school. Virtual instruction is instruction in which students and teachers are separated by time and/or location, and interaction occurs via computers and/or telecommunications technologies. value description: The field is coded as follows:  ·       F = Exclusively Virtual – The school has no physical building where students meet with each other or with teachers, all instruction is virtual.  ·       V = Primarily Virtual – The school focuses on a systematic program of virtual instruction but includes some physical meetings among students or with teachers.  ·       C = Primarily Classroom – The school offers virtual courses but virtual instruction is not the primary means of instruction.  ·       N = Not Virtual – The school does not offer any virtual instruction.  ·       P = Partial Virtual – The school offers some, but not all, instruction through virtual instruction. Note: This value was retired and replaced with the Primarily Virtual and Primarily Classroom values beginning with the 2016–17 school year.
);"
61,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	District TEXT not null, --
	School TEXT null, -- examples: `Bay Elementary`
	City TEXT null, -- examples: `Hickman`
	Charter INTEGER null, -- description: This field identifies a charter school. value description: The field is coded as follows:  ·       1 = The school is a charter  ·       0 = The school is not a charter
	DOC TEXT not null, -- `District Ownership Code` description: District Ownership Code value description: The District Ownership Code (DOC) is the numeric code used to identify the category of the Administrative Authority. •       00 - County Office of Education •       02 – State Board of Education •       03 – Statewide Benefit Charter •       31 – State Special Schools •       34 – Non-school Location* •       52 – Elementary School District •       54 – Unified School District •       56 – High School District •       98 – Regional Occupational Center/Program (ROC/P)  *Only the California Education Authority has been included in the non-school location category.
);"
62,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, -- examples: `Los Angeles`
	School TEXT null, -- examples: `Epic Charter`
	Charter INTEGER null, -- description: This field identifies a charter school. value description: The field is coded as follows:  ·       1 = The school is a charter  ·       0 = The school is not a charter
);

CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`Enrollment (K-12)` REAL null, -- description: Enrollment (K-12) value description: K-12: 1st grade - 12nd grade
	`Free Meal Count (K-12)` REAL null, -- description: Free Meal Count (K-12) value description: eligible free rate = Free Meal Count / Enrollment
	foreign key (CDSCode) references schools (CDSCode),
);"
63,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `Epic Charter`
	City TEXT null, --
	Charter INTEGER null, -- description: This field identifies a charter school. value description: The field is coded as follows:  ·       1 = The school is a charter  ·       0 = The school is not a charter
	CharterNum TEXT null, -- examples: `00D2`| description: The charter school number, value description: 4-digit number assigned to a charter school.
	AdmFName1 TEXT null, -- `administrator's first name` description: administrator's first name value description: The superintendent’s or principal’s first name.    Only active and pending districts and schools will display administrator information, if applicable.
	AdmLName1 TEXT null, -- examples: `Fuller`| `administrator's last name` description: administrator's last name value description: The superintendent’s or principal’s last name.   Only active and pending districts and schools will display administrator information, if applicable.
	AdmFName2 TEXT null, --
	AdmLName2 TEXT null, -- examples: `Administrator`
	AdmFName3 TEXT null, --
	AdmLName3 TEXT null, --
);"
64,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `MethodSchools`| description: School
	City TEXT null, -- examples: `Hickman`| description: City
	MailCity TEXT null, -- examples: `Hickman`| `mailing city` value description: The city associated with the mailing address of the school, district, or administrative authority. Note: Many entities have not provided a mailing address city. For your convenience we have filled the unpopulated MailCity cells with City data.
	Charter INTEGER null, -- description: This field identifies a charter school. value description: The field is coded as follows:  ·       1 = The school is a charter  ·       0 = The school is not a charter
	CharterNum TEXT null, -- examples: `00D4`| description: The charter school number, value description: 4-digit number assigned to a charter school.
);"
65,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, -- examples: `Santa Clara`
	School TEXT null, -- examples: `Santa Clara County Court`
	Charter INTEGER null, -- description: This field identifies a charter school. value description: The field is coded as follows:  ·       1 = The school is a charter  ·       0 = The school is not a charter
	FundingType TEXT null, -- examples: `Locally funded`| description: Indicates the charter school funding type value description: Values are as follows:  ·       Not in CS (California School) funding model  ·       Locally funded  ·       Directly funded
);"
66,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, -- examples: `Stanislaus`
	School TEXT null, -- examples: `MethodSchools`
	OpenDate DATE null, -- examples: `2012-08-27`| description: The date the school opened.
	FundingType TEXT null, -- examples: `Directly funded`| description: Indicates the charter school funding type value description: Values are as follows:  ·       Not in CS (California School) funding model  ·       Locally funded  ·       Directly funded
);"
67,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	District TEXT not null, -- examples: `Kern Community College`| description: District
	City TEXT null, -- examples: `San Francisco`| description: City
	ClosedDate DATE null, -- examples: `2015-07-31`| description: The date the school closed.
);"
68,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, --
	School TEXT null, -- examples: `Youth Camp`
	ClosedDate DATE null, -- examples: `2015-06-30`| description: The date the school closed.
	SOC TEXT null, -- examples: `14`| `School Ownership Code` description: The School Ownership Code is a numeric code used to identify the type of school. value description: •      08 - Preschool       •       09 – Special Education Schools (Public) •      11 – Youth Authority Facilities (CEA) •       13 – Opportunity Schools •       14 – Juvenile Court Schools •       15 – Other County or District Programs •       31 – State Special Schools •       60 – Elementary School (Public) •       61 – Elementary School in 1 School District (Public) •       62 – Intermediate/Middle Schools (Public) •       63 – Alternative Schools of Choice •       64 – Junior High Schools (Public) •       65 – K-12 Schools (Public) •       66 – High Schools (Public) •       67 – High Schools in 1 School District (Public) •       68 – Continuation High Schools •       69 – District Community Day Schools •       70 – Adult Education Centers •       98 – Regional Occupational Center/Program (ROC/P)
);"
69,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	NCESDist TEXT null, -- `National Center for Educational Statistics school district identification number` description: This field represents the 7-digit National Center for Educational Statistics (NCES) school district identification number. The first 2 digits identify the state and the last 5 digits identify the school district. Combined, they make a unique 7-digit ID for each school district.
	District TEXT not null, --
	School TEXT null, -- examples: `Special School-Alturas`
	State TEXT null, --
	SOC TEXT null, -- `School Ownership Code` description: The School Ownership Code is a numeric code used to identify the type of school. value description: •      08 - Preschool       •       09 – Special Education Schools (Public) •      11 – Youth Authority Facilities (CEA) •       13 – Opportunity Schools •       14 – Juvenile Court Schools •       15 – Other County or District Programs •       31 – State Special Schools •       60 – Elementary School (Public) •       61 – Elementary School in 1 School District (Public) •       62 – Intermediate/Middle Schools (Public) •       63 – Alternative Schools of Choice •       64 – Junior High Schools (Public) •       65 – K-12 Schools (Public) •       66 – High Schools (Public) •       67 – High Schools in 1 School District (Public) •       68 – Continuation High Schools •       69 – District Community Day Schools •       70 – Adult Education Centers •       98 – Regional Occupational Center/Program (ROC/P)
);"
7,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	NumGE1500 INTEGER null, -- `Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500` description: Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 value description: Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500    Excellence Rate = NumGE1500 / NumTstTakr
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- description: School
	Phone TEXT null, -- description: Phone
);"
70,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	StatusType TEXT not null, -- examples: `Active`, `Closed`| description: This field identifies the status of the district. value description: Definitions of the valid status types are listed below: ·       Active: The district is in operation and providing instructional services. ·       Closed: The district is not in operation and no longer providing instructional services. ·       Merged: The district has combined with another district or districts. ·       Pending: The district has not opened for operation and instructional services yet, but plans to open within the next 9–12 months.
	County TEXT not null, -- examples: `Alpine`| description: County name
	District TEXT not null, -- description: District
	EdOpsName TEXT null, -- examples: `Community Day School`
);"
71,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `Fresno ROP`
	City TEXT null, -- examples: `Fresno`
	Magnet INTEGER null, -- description: This field identifies whether a school is a magnet school and/or provides a magnet program. value description: The field is coded as follows:  ·       Y = Magnet - The school is a magnet school and/or offers a magnet program.  ·       N = Not Magnet - The school is not a magnet school and/or does not offer a magnet program.    Note: Preschools and adult education centers do not contain a magnet school indicator.
);

CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`District Code` INTEGER null, -- description: District Code
	foreign key (CDSCode) references schools (CDSCode),
);"
72,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`Academic Year` TEXT null, -- examples: `2014-2015`
	`Enrollment (Ages 5-17)` REAL null, -- description: Enrollment (Ages 5-17)
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	State TEXT null, --
	EdOpsCode TEXT null, -- examples: `SSS`| `Education Option Code` description: The Education Option Code is a short text description of the type of education offered. value description: •      ALTSOC – Alternative School of Choice •      COMM – County Community School •       COMMDAY – Community Day School •       CON – Continuation School •       JUV – Juvenile Court School •       OPP – Opportunity School •       YTH – Youth Authority School •       SSS – State Special School •       SPEC – Special Education School •       TRAD – Traditional •       ROP – Regional Occupational Program •       HOMHOS – Home and Hospital •       SPECON – District Consortia Special Education School
);"
73,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`FRPM Count (Ages 5-17)` REAL null, --
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, --
	School TEXT null, -- examples: `Community School`| description: School
	Street TEXT null, --
	MailStreet TEXT null, -- examples: `PO Box 1040`| description: MailStreet value description: The unabbreviated mailing address of the school, district, or administrative authority. Note: 1) Some entities (primarily closed or retired schools) may not have data in this field; 2) Many active entities have not provided a mailing street address. For your convenience we have filled the unpopulated MailStreet cells with Street data.
	EdOpsName TEXT null, -- examples: `Youth Authority School`
);"
74,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	NCESDist TEXT null, -- `National Center for Educational Statistics school district identification number` description: This field represents the 7-digit National Center for Educational Statistics (NCES) school district identification number. The first 2 digits identify the state and the last 5 digits identify the school district. Combined, they make a unique 7-digit ID for each school district.
	District TEXT not null, --
	EdOpsCode TEXT null, -- examples: `SPECON`| `Education Option Code` description: The Education Option Code is a short text description of the type of education offered. value description: •      ALTSOC – Alternative School of Choice •      COMM – County Community School •       COMMDAY – Community Day School •       CON – Continuation School •       JUV – Juvenile Court School •       OPP – Opportunity School •       YTH – Youth Authority School •       SSS – State Special School •       SPEC – Special Education School •       TRAD – Traditional •       ROP – Regional Occupational Program •       HOMHOS – Home and Hospital •       SPECON – District Consortia Special Education School
	GSserved TEXT null, -- `grade span served.` description: It is the lowest grade and the highest grade of student enrollment as reported in the most recent certified CALPADS Fall 1 data collection. Only K–12 enrollment is reported through CALPADS. This field may differ from the grade span offered. value description: 1.     Only K–12 enrollment is reported through CALPADS  2.     Note: Special programs at independent study, alternative education, and special education schools will often exceed the typical grade span for schools of that type
);"
75,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`County Code` TEXT null, -- examples: `35`| description: County Code
	`School Name` TEXT null, -- examples: `MethodSchools`| description: School Name
	`NSLP Provision Status` TEXT null, -- examples: `Breakfast Provision 2`, `Provision 2`| description: NSLP Provision Status
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, --
	School TEXT null, -- examples: `MethodSchools`| description: School
	EILName TEXT null, -- `Educational Instruction Level Name` description: The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served. value description: The Educational Instruction Level Name is the long text description of the institution’s type relative to the grade range served.
);"
76,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`NSLP Provision Status` TEXT null, -- examples: `Lunch Provision 2`, `Provision 2`| description: NSLP Provision Status
	`Low Grade` TEXT null, -- examples: `2`
	`High Grade` TEXT null, --
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, -- examples: `Merced`
	School TEXT null, -- examples: `La Merced`
	City TEXT null, -- examples: `Merced`
	EILCode TEXT null, -- `Educational Instruction Level Code` description: The Educational Instruction Level Code is a short text description of the institution's type relative to the grade range served. value description: •       A – Adult •       ELEM – Elementary •       ELEMHIGH – Elementary-High Combination •       HS – High School •       INTMIDJR – Intermediate/Middle/Junior High •       PS – Preschool •       UG – Ungraded
);"
77,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, -- examples: `Los Angeles`
	School TEXT null, -- examples: `Birch Kindergarten`
	GSserved TEXT null, -- examples: `5-11`| `grade span served.` description: It is the lowest grade and the highest grade of student enrollment as reported in the most recent certified CALPADS Fall 1 data collection. Only K–12 enrollment is reported through CALPADS. This field may differ from the grade span offered. value description: 1.     Only K–12 enrollment is reported through CALPADS  2.     Note: Special programs at independent study, alternative education, and special education schools will often exceed the typical grade span for schools of that type
);

CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`Enrollment (Ages 5-17)` REAL null, -- description: Enrollment (Ages 5-17)
	`Free Meal Count (Ages 5-17)` REAL null, -- description: Free Meal Count (Ages 5-17) value description: eligible free rate = Free Meal Count / Enrollment
	foreign key (CDSCode) references schools (CDSCode),
);"
78,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	City TEXT null, -- examples: `Adelanto`| description: City
	GSserved TEXT null, -- `grade span served.` description: It is the lowest grade and the highest grade of student enrollment as reported in the most recent certified CALPADS Fall 1 data collection. Only K–12 enrollment is reported through CALPADS. This field may differ from the grade span offered. value description: 1.     Only K–12 enrollment is reported through CALPADS  2.     Note: Special programs at independent study, alternative education, and special education schools will often exceed the typical grade span for schools of that type
);"
79,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, -- examples: `Santa Barbara`, `San Diego`
	School TEXT null, -- examples: `San Diego SCPA`
	Virtual TEXT null, -- description: This field identifies the type of virtual instruction offered by the school. Virtual instruction is instruction in which students and teachers are separated by time and/or location, and interaction occurs via computers and/or telecommunications technologies. value description: The field is coded as follows:  ·       F = Exclusively Virtual – The school has no physical building where students meet with each other or with teachers, all instruction is virtual.  ·       V = Primarily Virtual – The school focuses on a systematic program of virtual instruction but includes some physical meetings among students or with teachers.  ·       C = Primarily Classroom – The school offers virtual courses but virtual instruction is not the primary means of instruction.  ·       N = Not Virtual – The school does not offer any virtual instruction.  ·       P = Partial Virtual – The school offers some, but not all, instruction through virtual instruction. Note: This value was retired and replaced with the Primarily Virtual and Primarily Classroom values beginning with the 2016–17 school year.
);"
8,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`FRPM Count (K-12)` REAL null, -- description: Free or Reduced Price Meal Count (K-12) value description: eligible FRPM rate = FRPM / Enrollment
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE satscores
(
	cds TEXT not null primary key,
	NumTstTakr INTEGER not null, -- `Number of Test Takers` description: Number of Test Takers in this school value description: number of test takers in each school
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, --
	School TEXT null, -- examples: `MethodSchools`| description: School
);"
80,"CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`School Name` TEXT null, -- description: School Name
	`School Type` TEXT null, -- description: School Type
	foreign key (CDSCode) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	Latitude REAL null, -- description: The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south. value description: The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south.
);"
81,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `California High`
	City TEXT null, --
	State TEXT null, -- description: State
	GSoffered TEXT null, -- `grade span offered` description: The grade span offered is the lowest grade and the highest grade offered or supported by the school, district, or administrative authority. This field might differ from the grade span served as reported in the most recent certified California Longitudinal Pupil Achievement (CALPADS) Fall 1 data collection. value description: For example XYZ School might display the following data:  GSoffered = P–Adult  GSserved = K–12
	Latitude REAL null, -- description: The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south. value description: The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the equator measured north to south.
);

CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`School Name` TEXT null, -- examples: `California High`| description: School Name
	foreign key (CDSCode) references schools (CDSCode),
);"
82,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- description: School
	GSoffered TEXT null, -- `grade span offered` description: The grade span offered is the lowest grade and the highest grade offered or supported by the school, district, or administrative authority. This field might differ from the grade span served as reported in the most recent certified California Longitudinal Pupil Achievement (CALPADS) Fall 1 data collection. value description: For example XYZ School might display the following data:  GSoffered = P–Adult  GSserved = K–12
	Longitude REAL null, -- description: The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east. value description: The angular distance (expressed in degrees) between the location of the school, district, or administrative authority and the prime meridian (Greenwich, England) measured from west to east.
);"
83,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `Birch Kindergarten`
	City TEXT null, --
	GSoffered TEXT null, -- examples: `K-8`| `grade span offered` description: The grade span offered is the lowest grade and the highest grade offered or supported by the school, district, or administrative authority. This field might differ from the grade span served as reported in the most recent certified California Longitudinal Pupil Achievement (CALPADS) Fall 1 data collection. value description: For example XYZ School might display the following data:  GSoffered = P–Adult  GSserved = K–12
	Magnet INTEGER null, -- description: This field identifies whether a school is a magnet school and/or provides a magnet program. value description: The field is coded as follows:  ·       Y = Magnet - The school is a magnet school and/or offers a magnet program.  ·       N = Not Magnet - The school is not a magnet school and/or does not offer a magnet program.    Note: Preschools and adult education centers do not contain a magnet school indicator.
);

CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`NSLP Provision Status` TEXT null, -- examples: `Multiple Provision Types`
	foreign key (CDSCode) references schools (CDSCode),
);"
84,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	District TEXT not null, -- description: District
	School TEXT null, --
	AdmFName1 TEXT null, -- `administrator's first name` description: administrator's first name value description: The superintendent’s or principal’s first name.    Only active and pending districts and schools will display administrator information, if applicable.
	AdmFName2 TEXT null, --
	AdmFName3 TEXT null, --
);"
85,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	District TEXT not null, --
	AdmFName1 TEXT null, -- examples: `Alusine`| `administrator's first name` description: administrator's first name value description: The superintendent’s or principal’s first name.    Only active and pending districts and schools will display administrator information, if applicable.
);

CREATE TABLE frpm
(
	CDSCode TEXT not null primary key,
	`District Code` INTEGER null, -- description: District Code
	`Enrollment (K-12)` REAL null, -- description: Enrollment (K-12) value description: K-12: 1st grade - 12nd grade
	`Free Meal Count (K-12)` REAL null, -- description: Free Meal Count (K-12) value description: eligible free rate = Free Meal Count / Enrollment
	`Percent (%) Eligible Free (K-12)` REAL null, --
	foreign key (CDSCode) references schools (CDSCode),
);"
86,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, -- description: County name
	District TEXT not null, -- description: District
	School TEXT null, -- examples: `Epic Charter`| description: School
	Charter INTEGER null, -- description: This field identifies a charter school. value description: The field is coded as follows:  ·       1 = The school is a charter  ·       0 = The school is not a charter
	CharterNum TEXT null, -- description: The charter school number, value description: 4-digit number assigned to a charter school.
	AdmLName1 TEXT null, -- examples: `Administration`| `administrator's last name` description: administrator's last name value description: The superintendent’s or principal’s last name.   Only active and pending districts and schools will display administrator information, if applicable.
);"
87,"CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	County TEXT not null, -- examples: `San Bernardino`
	District TEXT not null, -- examples: `San Bernardino City Unified`
	School TEXT null, -- examples: `San Bernardino County ROP`
	OpenDate DATE null, -- examples: `2006-08-28`
	DOC TEXT not null, -- `District Ownership Code` description: District Ownership Code value description: The District Ownership Code (DOC) is the numeric code used to identify the category of the Administrative Authority. •       00 - County Office of Education •       02 – State Board of Education •       03 – Statewide Benefit Charter •       31 – State Special Schools •       34 – Non-school Location* •       52 – Elementary School District •       54 – Unified School District •       56 – High School District •       98 – Regional Occupational Center/Program (ROC/P)  *Only the California Education Authority has been included in the non-school location category.
	SOC TEXT null, -- examples: `14`| `School Ownership Code` description: The School Ownership Code is a numeric code used to identify the type of school. value description: •      08 - Preschool       •       09 – Special Education Schools (Public) •      11 – Youth Authority Facilities (CEA) •       13 – Opportunity Schools •       14 – Juvenile Court Schools •       15 – Other County or District Programs •       31 – State Special Schools •       60 – Elementary School (Public) •       61 – Elementary School in 1 School District (Public) •       62 – Intermediate/Middle Schools (Public) •       63 – Alternative Schools of Choice •       64 – Junior High Schools (Public) •       65 – K-12 Schools (Public) •       66 – High Schools (Public) •       67 – High Schools in 1 School District (Public) •       68 – Continuation High Schools •       69 – District Community Day Schools •       70 – Adult Education Centers •       98 – Regional Occupational Center/Program (ROC/P)
	AdmEmail1 TEXT null, -- `administrator's email address` description: administrator's email address value description: The superintendent’s or principal’s email address.    Only active and pending districts and schools will display administrator information, if applicable.
);"
88,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	NumGE1500 INTEGER null, -- `Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500` description: Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500 value description: Number of Test Takers Whose Total SAT Scores Are Greater or Equal to 1500    Excellence Rate = NumGE1500 / NumTstTakr
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- description: School
	AdmEmail1 TEXT null, -- `administrator's email address` description: administrator's email address value description: The superintendent’s or principal’s email address.    Only active and pending districts and schools will display administrator information, if applicable.
);"
9,"CREATE TABLE satscores
(
	cds TEXT not null primary key,
	AvgScrMath INTEGER null, -- `average scores in Math` description: average scores in Math value description: average scores in Math
	foreign key (cds) references schools (CDSCode),
);

CREATE TABLE schools
(
	CDSCode TEXT not null primary key,
	School TEXT null, -- examples: `MethodSchools`| description: School
	FundingType TEXT null, -- description: Indicates the charter school funding type value description: Values are as follows:  ·       Not in CS (California School) funding model  ·       Locally funded  ·       Directly funded
);"
717,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `3-D Man`| `superhero name` description: the name of the superhero
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	power_id INTEGER default NULL, --
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- `power name` description: the superpower name
);"
718,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- examples: `Super Strength`| `power name` description: the superpower name
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	power_id INTEGER default NULL, -- `power id` description: the id of the power Maps to superpower(id) value description: In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);"
719,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	height_cm INTEGER default NULL, -- `height cm` description: the height of the superhero value description: The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing.
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- examples: `Super Strength`| `power name` description: the superpower name
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	power_id INTEGER default NULL, --
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);"
720,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	full_name TEXT default NULL, -- `full name` description: the full name of the superhero value description: The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is ""John"" and their surname is ""Smith,"" their full name would be ""John Smith.""
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	foreign key (hero_id) references superhero(id),
);"
721,"CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- examples: `Blue`| description: the color of the superhero's skin/eye/hair/etc
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);"
722,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Apocalypse`
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	race_id INTEGER default NULL, -- `race id` description: the id of the superhero's race
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (race_id) references race(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- description: the color of the superhero's skin/eye/hair/etc
);

CREATE TABLE race
(
	id INTEGER not null primary key,
);"
723,"CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- examples: `Blue`| description: the color of the superhero's skin/eye/hair/etc
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- examples: `Agility`| `power name` description: the superpower name
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	power_id INTEGER default NULL, --
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);"
724,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`| `superhero name` description: the name of the superhero
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- examples: `Blond`, `Blue`| description: the color of the superhero's skin/eye/hair/etc
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- examples: `Agility`| `power name` description: the superpower name
);"
725,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	publisher_id INTEGER default NULL, -- `publisher id` description: the id of the publisher
	foreign key (publisher_id) references publisher(id),
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `Marvel Comics`| description: the name of the publisher
);"
726,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	full_name TEXT default NULL, -- `full name` description: the full name of the superhero value description: The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is ""John"" and their surname is ""Smith,"" their full name would be ""John Smith.""
	publisher_id INTEGER default NULL, --
	height_cm INTEGER default NULL, -- `height cm` description: the height of the superhero value description: The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing.
	foreign key (publisher_id) references publisher(id),
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `Marvel Comics`
);"
727,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Sauron`| `superhero name` description: the name of the superhero
	publisher_id INTEGER default NULL, -- `publisher id` description: the id of the publisher
	foreign key (publisher_id) references publisher(id),
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- description: the name of the publisher
);"
728,"CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `Marvel Comics`
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	publisher_id INTEGER default NULL, --
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (publisher_id) references publisher(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- examples: `Blue`| description: the color of the superhero's skin/eye/hair/etc
);"
729,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	publisher_id INTEGER default NULL, --
	height_cm INTEGER default NULL, -- `height cm` description: the height of the superhero value description: The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing.
	foreign key (publisher_id) references publisher(id),
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `Marvel Comics`
);"
730,"CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `Marvel Comics`
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	publisher_id INTEGER default NULL, --
	foreign key (publisher_id) references publisher(id),
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	power_id INTEGER default NULL, --
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- examples: `Super Strength`| `power name` description: the superpower name
);"
731,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	publisher_id INTEGER default NULL, --
	foreign key (publisher_id) references publisher(id),
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `DC Comics`| description: the name of the publisher
);"
732,"CREATE TABLE attribute
(
	id INTEGER not null primary key,
	attribute_name TEXT default NULL, -- examples: `Speed`
);

CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, -- `hero id` description: the id of the hero Maps to superhero(id)
	attribute_id INTEGER default NULL, --
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
	foreign key (attribute_id) references attribute(id),
	foreign key (hero_id) references superhero(id),
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	publisher_id INTEGER default NULL, --
	foreign key (publisher_id) references publisher(id),
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- description: the name of the publisher
);"
733,"CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- examples: `Gold`| description: the color of the superhero's skin/eye/hair/etc
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	publisher_id INTEGER default NULL, --
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (publisher_id) references publisher(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `Marvel Comics`
);"
734,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Blue Beetle II`, `Blue Beetle`| `superhero name` description: the name of the superhero
	publisher_id INTEGER default NULL, -- `publisher id` description: the id of the publisher
	foreign key (publisher_id) references publisher(id),
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- description: the name of the publisher
);"
735,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- examples: `Blond`| description: the color of the superhero's skin/eye/hair/etc
);"
736,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`| `superhero name` description: the name of the superhero
);

CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, --
	attribute_id INTEGER default NULL, --
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
	foreign key (attribute_id) references attribute(id),
	foreign key (hero_id) references superhero(id),
);

CREATE TABLE attribute
(
	id INTEGER not null primary key,
	attribute_name TEXT default NULL, -- examples: `Intelligence`| `attribute name` description: the attribute value description: A superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery.
);"
737,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Copycat`| `superhero name` description: the name of the superhero
	race_id INTEGER default NULL, -- `race id` description: the id of the superhero's race
	foreign key (race_id) references race(id),
);

CREATE TABLE race
(
	id INTEGER not null primary key,
	race TEXT default NULL, -- description: the race of the superhero value description: In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics
);"
738,"CREATE TABLE attribute
(
	id INTEGER not null primary key,
	attribute_name TEXT default NULL, -- examples: `Durability`| `attribute name` description: the attribute value description: A superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery.
);

CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, -- `hero id` description: the id of the hero Maps to superhero(id)
	attribute_id INTEGER default NULL, -- `attribute id` description: the id of the attribute Maps to attribute(id)
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
	foreign key (attribute_id) references attribute(id),
);"
739,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`| `superhero name` description: the name of the superhero
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	power_id INTEGER default NULL, --
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- examples: `Death Touch`| `power name` description: the superpower name
);"
740,"CREATE TABLE gender
(
	id INTEGER not null primary key,
	gender TEXT default NULL, -- examples: `Female`| description: the gender of the superhero
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	gender_id INTEGER default NULL, -- `gender id` description: the id of the superhero's gender
	foreign key (gender_id) references gender(id),
);

CREATE TABLE attribute
(
	id INTEGER not null primary key,
	attribute_name TEXT default NULL, -- examples: `Strength`| `attribute name` description: the attribute value description: A superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery.
);

CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, --
	attribute_id INTEGER default NULL, --
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
	foreign key (attribute_id) references attribute(id),
	foreign key (hero_id) references superhero(id),
);"
741,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`| `superhero name` description: the name of the superhero
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	foreign key (hero_id) references superhero(id),
);"
742,"CREATE TABLE race
(
	id INTEGER not null primary key,
	race TEXT default NULL, -- examples: `Vampire`| description: the race of the superhero value description: In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	race_id INTEGER default NULL, -- `race id` description: the id of the superhero's race
	foreign key (race_id) references race(id),
);"
743,"CREATE TABLE alignment
(
	id INTEGER not null primary key,
	alignment TEXT default NULL, -- examples: `Bad`| description: the alignment of the superhero value description: Alignment refers to a character's moral and ethical stance and can be used to describe the overall attitude or behavior of a superhero. Some common alignments for superheroes include: Good: These superheroes are typically kind, selfless, and dedicated to protecting others and upholding justice. Examples of good alignments include Superman, Wonder Woman, and Spider-Man. Neutral: These superheroes may not always prioritize the greater good, but they are not necessarily evil either. They may act in their own self-interest or make decisions based on their own moral code. Examples of neutral alignments include the Hulk and Deadpool. 	Bad: These superheroes are typically selfish, manipulative, and willing to harm others in pursuit of their own goals. Examples of evil alignments include Lex Luthor and the Joker.
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `Marvel Comics`
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	publisher_id INTEGER default NULL, --
	alignment_id INTEGER default NULL, -- `alignment id` description: the id of the superhero's alignment
	foreign key (alignment_id) references alignment(id),
	foreign key (publisher_id) references publisher(id),
);"
744,"CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `Marvel Comics`, `DC Comics`| description: the name of the publisher
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	publisher_id INTEGER default NULL, -- `publisher id` description: the id of the publisher
	foreign key (publisher_id) references publisher(id),
);"
745,"CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `Star Trek`| description: the name of the publisher
);"
746,"CREATE TABLE hero_attribute
(
	attribute_id INTEGER default NULL, --
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
);"
747,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	full_name TEXT default NULL, -- `full name` description: the full name of the superhero value description: The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is ""John"" and their surname is ""Smith,"" their full name would be ""John Smith.""
);"
748,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- description: the color of the superhero's skin/eye/hair/etc
);"
749,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Deathlok`| `superhero name` description: the name of the superhero
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	power_id INTEGER default NULL, --
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- `power name` description: the superpower name
);"
750,"CREATE TABLE gender
(
	id INTEGER not null primary key,
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	gender_id INTEGER default NULL, -- `gender id` description: the id of the superhero's gender
	weight_kg INTEGER default NULL, -- `weight kg` description: the weight of the superhero value description: The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.
	foreign key (gender_id) references gender(id),
);"
751,"CREATE TABLE gender
(
	id INTEGER not null primary key,
	gender TEXT default NULL, -- examples: `Male`| description: the gender of the superhero
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	gender_id INTEGER default NULL, -- `gender id` description: the id of the superhero's gender
	foreign key (gender_id) references gender(id),
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	power_id INTEGER default NULL, -- `power id` description: the id of the power Maps to superpower(id) value description: In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- `power name` description: the superpower name
);"
752,"CREATE TABLE race
(
	id INTEGER not null primary key,
	race TEXT default NULL, -- examples: `Alien`| description: the race of the superhero value description: In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Alien`| `superhero name` description: the name of the superhero
	race_id INTEGER default NULL, -- `race id` description: the id of the superhero's race
	foreign key (race_id) references race(id),
);"
753,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`| `superhero name` description: the name of the superhero
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	height_cm INTEGER default NULL, -- `height cm` description: the height of the superhero value description: The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing.
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- description: the color of the superhero's skin/eye/hair/etc
);"
754,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, -- `hero id` description: the id of the hero Maps to superhero(id)
	power_id INTEGER default NULL, -- `power id` description: the id of the power Maps to superpower(id) value description: In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- `power name` description: the superpower name
);"
755,"CREATE TABLE race
(
	id INTEGER not null primary key,
	race TEXT default NULL, -- examples: `Demi-God`| description: the race of the superhero value description: In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	full_name TEXT default NULL, -- `full name` description: the full name of the superhero value description: The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is ""John"" and their surname is ""Smith,"" their full name would be ""John Smith.""
	race_id INTEGER default NULL, -- `race id` description: the id of the superhero's race
	foreign key (race_id) references race(id),
);"
756,"CREATE TABLE alignment
(
	id INTEGER not null primary key,
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	alignment_id INTEGER default NULL, -- `alignment id` description: the id of the superhero's alignment
	foreign key (alignment_id) references alignment(id),
);"
757,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	race_id INTEGER default NULL, -- `race id` description: the id of the superhero's race
	weight_kg INTEGER default NULL, -- `weight kg` description: the weight of the superhero value description: The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.
	foreign key (race_id) references race(id),
);

CREATE TABLE race
(
	id INTEGER not null primary key,
	race TEXT default NULL, -- description: the race of the superhero value description: In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics
);"
758,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	race_id INTEGER default NULL, -- `race id` description: the id of the superhero's race
	height_cm INTEGER default NULL, -- `height cm` description: the height of the superhero value description: The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing.
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (race_id) references race(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE race
(
	id INTEGER not null primary key,
	race TEXT default NULL, -- examples: `Human`| description: the race of the superhero value description: In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- description: the color of the superhero's skin/eye/hair/etc
);"
759,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	weight_kg INTEGER default NULL, -- `weight kg` description: the weight of the superhero value description: The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- description: the color of the superhero's skin/eye/hair/etc
);"
760,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	publisher_id INTEGER default NULL, --
	height_cm INTEGER default NULL, -- `height cm` description: the height of the superhero value description: The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing.
);"
761,"CREATE TABLE gender
(
	id INTEGER not null primary key,
	gender TEXT default NULL, -- examples: `Male`| description: the gender of the superhero
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	full_name TEXT default NULL, -- `full name` description: the full name of the superhero value description: The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is ""John"" and their surname is ""Smith,"" their full name would be ""John Smith.""
	gender_id INTEGER default NULL, --
	weight_kg INTEGER default NULL, -- `weight kg` description: the weight of the superhero value description: The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.
	foreign key (gender_id) references gender(id),
);"
762,"CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- `power name` description: the superpower name
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	power_id INTEGER default NULL, -- `power id` description: the id of the power Maps to superpower(id) value description: In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.
	foreign key (power_id) references superpower(id),
);"
763,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Abomination`| `superhero name` description: the name of the superhero
);

CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, --
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
	foreign key (hero_id) references superhero(id),
);"
764,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, -- `hero id` description: the id of the hero Maps to superhero(id)
	power_id INTEGER default NULL, -- `power id` description: the id of the power Maps to superpower(id) value description: In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- `power name` description: the superpower name
);"
765,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, -- `hero id` description: the id of the hero Maps to superhero(id)
	power_id INTEGER default NULL, -- `power id` description: the id of the power Maps to superpower(id) value description: In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- examples: `Stealth`| `power name` description: the superpower name
);"
766,"CREATE TABLE attribute
(
	id INTEGER not null primary key,
	attribute_name TEXT default NULL, -- examples: `Strength`| `attribute name` description: the attribute value description: A superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery.
);

CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, -- `hero id` description: the id of the hero Maps to superhero(id)
	attribute_id INTEGER default NULL, --
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
	foreign key (attribute_id) references attribute(id),
	foreign key (hero_id) references superhero(id),
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	full_name TEXT default NULL, -- `full name` description: the full name of the superhero value description: The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is ""John"" and their surname is ""Smith,"" their full name would be ""John Smith.""
);"
767,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- examples: `No Colour`| description: the color of the superhero's skin/eye/hair/etc
);"
768,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	publisher_id INTEGER default NULL, -- `publisher id` description: the id of the publisher
	foreign key (publisher_id) references publisher(id),
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `Dark Horse Comics`| description: the name of the publisher
);"
769,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`| `superhero name` description: the name of the superhero
	publisher_id INTEGER default NULL, --
	foreign key (publisher_id) references publisher(id),
);

CREATE TABLE attribute
(
	id INTEGER not null primary key,
	attribute_name TEXT default NULL, -- examples: `Durability`| `attribute name` description: the attribute value description: A superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery.
);

CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, -- `hero id` description: the id of the hero Maps to superhero(id)
	attribute_id INTEGER default NULL, --
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
	foreign key (attribute_id) references attribute(id),
	foreign key (hero_id) references superhero(id),
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `Dark Horse Comics`
);"
770,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	full_name TEXT default NULL, -- examples: `Abraham Sapien`
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- description: the color of the superhero's skin/eye/hair/etc
);"
771,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`| `superhero name` description: the name of the superhero
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- examples: `Flight`| `power name` description: the superpower name
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	power_id INTEGER default NULL, --
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);"
772,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	gender_id INTEGER default NULL, -- `gender id` description: the id of the superhero's gender
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	publisher_id INTEGER default NULL, --
	foreign key (eye_colour_id) references colour(id),
	foreign key (gender_id) references gender(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (publisher_id) references publisher(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE gender
(
	id INTEGER not null primary key,
	gender TEXT default NULL, -- examples: `Female`| description: the gender of the superhero
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `Dark Horse Comics`
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- description: the color of the superhero's skin/eye/hair/etc
);"
773,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	publisher_id INTEGER default NULL, --
	foreign key (publisher_id) references publisher(id),
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, --
);"
774,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `A-Bomb`| `superhero name` description: the name of the superhero
	race_id INTEGER default NULL, -- `race id` description: the id of the superhero's race
	foreign key (race_id) references race(id),
);

CREATE TABLE race
(
	id INTEGER not null primary key,
	race TEXT default NULL, -- description: the race of the superhero value description: In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics
);"
775,"CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- examples: `Blue`| description: the color of the superhero's skin/eye/hair/etc
);

CREATE TABLE gender
(
	id INTEGER not null primary key,
	gender TEXT default NULL, -- examples: `Female`| description: the gender of the superhero
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	gender_id INTEGER default NULL, -- `gender id` description: the id of the superhero's gender
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	foreign key (eye_colour_id) references colour(id),
	foreign key (gender_id) references gender(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);"
776,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`| `superhero name` description: the name of the superhero
	full_name TEXT default NULL, -- examples: `Charles Chandler`| `full name` description: the full name of the superhero value description: The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is ""John"" and their surname is ""Smith,"" their full name would be ""John Smith.""
	race_id INTEGER default NULL, -- `race id` description: the id of the superhero's race
	foreign key (race_id) references race(id),
);

CREATE TABLE race
(
	id INTEGER not null primary key,
	race TEXT default NULL, -- description: the race of the superhero value description: In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics
);"
777,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Agent 13`| `superhero name` description: the name of the superhero
	gender_id INTEGER default NULL, -- `gender id` description: the id of the superhero's gender
	foreign key (gender_id) references gender(id),
);

CREATE TABLE gender
(
	id INTEGER not null primary key,
	gender TEXT default NULL, -- description: the gender of the superhero
);"
778,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`| `superhero name` description: the name of the superhero
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- examples: `Adaptation`| `power name` description: the superpower name
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	power_id INTEGER default NULL, -- `power id` description: the id of the power Maps to superpower(id) value description: In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);"
779,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Amazo`| `superhero name` description: the name of the superhero
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, -- `hero id` description: the id of the hero Maps to superhero(id)
	foreign key (hero_id) references superhero(id),
);"
780,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	full_name TEXT default NULL, -- examples: `Hunter Zolomon`| `full name` description: the full name of the superhero value description: The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is ""John"" and their surname is ""Smith,"" their full name would be ""John Smith.""
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	power_id INTEGER default NULL, -- `power id` description: the id of the power Maps to superpower(id) value description: In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- `power name` description: the superpower name
);"
781,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, --
	height_cm INTEGER default NULL, -- `height cm` description: the height of the superhero value description: The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing.
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- examples: `Amber`| description: the color of the superhero's skin/eye/hair/etc
);"
782,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- `superhero name` description: the name of the superhero
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- examples: `Black`| description: the color of the superhero's skin/eye/hair/etc
);"
783,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- examples: `Gold`| description: the color of the superhero's skin/eye/hair/etc
);"
784,"CREATE TABLE race
(
	id INTEGER not null primary key,
	race TEXT default NULL, -- examples: `Vampire`| description: the race of the superhero value description: In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	full_name TEXT default NULL, -- `full name` description: the full name of the superhero value description: The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is ""John"" and their surname is ""Smith,"" their full name would be ""John Smith.""
	race_id INTEGER default NULL, -- `race id` description: the id of the superhero's race
	foreign key (race_id) references race(id),
);"
785,"CREATE TABLE alignment
(
	id INTEGER not null primary key,
	alignment TEXT default NULL, -- examples: `Neutral`| description: the alignment of the superhero value description: Alignment refers to a character's moral and ethical stance and can be used to describe the overall attitude or behavior of a superhero. Some common alignments for superheroes include: Good: These superheroes are typically kind, selfless, and dedicated to protecting others and upholding justice. Examples of good alignments include Superman, Wonder Woman, and Spider-Man. Neutral: These superheroes may not always prioritize the greater good, but they are not necessarily evil either. They may act in their own self-interest or make decisions based on their own moral code. Examples of neutral alignments include the Hulk and Deadpool. 	Bad: These superheroes are typically selfish, manipulative, and willing to harm others in pursuit of their own goals. Examples of evil alignments include Lex Luthor and the Joker.
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`| `superhero name` description: the name of the superhero
	alignment_id INTEGER default NULL, -- `alignment id` description: the id of the superhero's alignment
	foreign key (alignment_id) references alignment(id),
);"
786,"CREATE TABLE attribute
(
	id INTEGER not null primary key,
	attribute_name TEXT default NULL, -- examples: `Strength`| `attribute name` description: the attribute value description: A superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery.
);

CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, -- `hero id` description: the id of the hero Maps to superhero(id)
	attribute_id INTEGER default NULL, --
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
	foreign key (attribute_id) references attribute(id),
	foreign key (hero_id) references superhero(id),
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
);"
787,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Cameron Hicks`| `superhero name` description: the name of the superhero
	race_id INTEGER default NULL, -- `race id` description: the id of the superhero's race
	alignment_id INTEGER default NULL, -- `alignment id` description: the id of the superhero's alignment
	foreign key (alignment_id) references alignment(id),
	foreign key (race_id) references race(id),
);

CREATE TABLE race
(
	id INTEGER not null primary key,
	race TEXT default NULL, -- description: the race of the superhero value description: In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics
);

CREATE TABLE alignment
(
	id INTEGER not null primary key,
	alignment TEXT default NULL, -- description: the alignment of the superhero value description: Alignment refers to a character's moral and ethical stance and can be used to describe the overall attitude or behavior of a superhero. Some common alignments for superheroes include: Good: These superheroes are typically kind, selfless, and dedicated to protecting others and upholding justice. Examples of good alignments include Superman, Wonder Woman, and Spider-Man. Neutral: These superheroes may not always prioritize the greater good, but they are not necessarily evil either. They may act in their own self-interest or make decisions based on their own moral code. Examples of neutral alignments include the Hulk and Deadpool. 	Bad: These superheroes are typically selfish, manipulative, and willing to harm others in pursuit of their own goals. Examples of evil alignments include Lex Luthor and the Joker.
);"
788,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	gender_id INTEGER default NULL, -- `gender id` description: the id of the superhero's gender
	publisher_id INTEGER default NULL, --
	foreign key (gender_id) references gender(id),
	foreign key (publisher_id) references publisher(id),
);

CREATE TABLE gender
(
	id INTEGER not null primary key,
	gender TEXT default NULL, -- examples: `Female`| description: the gender of the superhero
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `Marvel Comics`
);"
789,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	race_id INTEGER default NULL, -- `race id` description: the id of the superhero's race
	weight_kg INTEGER default NULL, -- `weight kg` description: the weight of the superhero value description: The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.
	foreign key (race_id) references race(id),
);

CREATE TABLE race
(
	id INTEGER not null primary key,
	race TEXT default NULL, -- examples: `Alien`| description: the race of the superhero value description: In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics
);"
790,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	full_name TEXT default NULL, -- examples: `Emil Blonsky`, `Charles Chandler`| `full name` description: the full name of the superhero value description: The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is ""John"" and their surname is ""Smith,"" their full name would be ""John Smith.""
	weight_kg INTEGER default NULL, -- `weight kg` description: the weight of the superhero value description: The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.
);"
791,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	height_cm INTEGER default NULL, -- `height cm` description: the height of the superhero value description: The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing.
);"
792,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Abomination`| `superhero name` description: the name of the superhero
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	power_id INTEGER default NULL, -- `power id` description: the id of the power Maps to superpower(id) value description: In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- `power name` description: the superpower name
);"
793,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	gender_id INTEGER default NULL, -- `gender id` description: the id of the superhero's gender
	race_id INTEGER default NULL, -- `race id` description: the id of the superhero's race
	foreign key (gender_id) references gender(id),
	foreign key (race_id) references race(id),
);

CREATE TABLE gender
(
	id INTEGER not null primary key,
);

CREATE TABLE race
(
	id INTEGER not null primary key,
	race TEXT default NULL, -- examples: `God / Eternal`| description: the race of the superhero value description: In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics
);"
794,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- `superhero name` description: the name of the superhero
);

CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, -- `hero id` description: the id of the hero Maps to superhero(id)
	attribute_id INTEGER default NULL, --
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
	foreign key (attribute_id) references attribute(id),
	foreign key (hero_id) references superhero(id),
);

CREATE TABLE attribute
(
	id INTEGER not null primary key,
	attribute_name TEXT default NULL, -- examples: `Speed`
);"
795,"CREATE TABLE alignment
(
	id INTEGER not null primary key,
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	alignment_id INTEGER default NULL, -- `alignment id` description: the id of the superhero's alignment
	foreign key (alignment_id) references alignment(id),
);"
796,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `3-D Man`| `superhero name` description: the name of the superhero
);

CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, --
	attribute_id INTEGER default NULL, --
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
	foreign key (attribute_id) references attribute(id),
	foreign key (hero_id) references superhero(id),
);

CREATE TABLE attribute
(
	id INTEGER not null primary key,
	attribute_name TEXT default NULL, -- `attribute name` description: the attribute value description: A superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery.
);"
797,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`| `superhero name` description: the name of the superhero
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- examples: `Brown`, `Blue`| description: the color of the superhero's skin/eye/hair/etc
);"
798,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Hawkman`, `Speedy`, `Karate Kid`| `superhero name` description: the name of the superhero
	publisher_id INTEGER default NULL, -- `publisher id` description: the id of the publisher
	foreign key (publisher_id) references publisher(id),
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- description: the name of the publisher
);"
799,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	publisher_id INTEGER default NULL, -- `publisher id` description: the id of the publisher
);"
800,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
);"
801,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	gender_id INTEGER default NULL, -- `gender id` description: the id of the superhero's gender
	foreign key (gender_id) references gender(id),
);

CREATE TABLE gender
(
	id INTEGER not null primary key,
);"
802,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`| `superhero name` description: the name of the superhero
	height_cm INTEGER default NULL, -- `height cm` description: the height of the superhero value description: The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing.
);"
803,"CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- examples: `Cryokinesis`| `power name` description: the superpower name
);

CREATE TABLE hero_power
(
	power_id INTEGER default NULL, -- `power id` description: the id of the power Maps to superpower(id) value description: In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.
	foreign key (power_id) references superpower(id),
);"
804,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`| `superhero name` description: the name of the superhero
);"
805,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	full_name TEXT default NULL, -- `full name` description: the full name of the superhero value description: The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is ""John"" and their surname is ""Smith,"" their full name would be ""John Smith.""
	weight_kg INTEGER default NULL, -- `weight kg` description: the weight of the superhero value description: The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.
);"
806,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	full_name TEXT default NULL, -- examples: `Karen Beecher-Duncan`| `full name` description: the full name of the superhero value description: The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is ""John"" and their surname is ""Smith,"" their full name would be ""John Smith.""
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- description: the color of the superhero's skin/eye/hair/etc
);"
807,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	full_name TEXT default NULL, -- examples: `Helen Parr`| `full name` description: the full name of the superhero value description: The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is ""John"" and their surname is ""Smith,"" their full name would be ""John Smith.""
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	power_id INTEGER default NULL, --
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- `power name` description: the superpower name
);"
808,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	race_id INTEGER default NULL, -- `race id` description: the id of the superhero's race
	height_cm INTEGER default NULL, -- `height cm` description: the height of the superhero value description: The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing.
	weight_kg INTEGER default NULL, -- `weight kg` description: the weight of the superhero value description: The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.
	foreign key (race_id) references race(id),
);

CREATE TABLE race
(
	id INTEGER not null primary key,
	race TEXT default NULL, -- description: the race of the superhero value description: In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics
);"
809,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	publisher_id INTEGER default NULL, -- `publisher id` description: the id of the publisher
	foreign key (publisher_id) references publisher(id),
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- description: the name of the publisher
);"
810,"CREATE TABLE attribute
(
	id INTEGER not null primary key,
);

CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, --
	attribute_id INTEGER default NULL, -- `attribute id` description: the id of the attribute Maps to attribute(id)
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
	foreign key (attribute_id) references attribute(id),
	foreign key (hero_id) references superhero(id),
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	race_id INTEGER default NULL, -- `race id` description: the id of the superhero's race
	foreign key (race_id) references race(id),
);

CREATE TABLE race
(
	id INTEGER not null primary key,
	race TEXT default NULL, -- description: the race of the superhero value description: In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics
);"
811,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Atom IV`, `Atom`| `superhero name` description: the name of the superhero
	alignment_id INTEGER default NULL, -- `alignment id` description: the id of the superhero's alignment
	foreign key (alignment_id) references alignment(id),
);

CREATE TABLE alignment
(
	id INTEGER not null primary key,
	alignment TEXT default NULL, -- description: the alignment of the superhero value description: Alignment refers to a character's moral and ethical stance and can be used to describe the overall attitude or behavior of a superhero. Some common alignments for superheroes include: Good: These superheroes are typically kind, selfless, and dedicated to protecting others and upholding justice. Examples of good alignments include Superman, Wonder Woman, and Spider-Man. Neutral: These superheroes may not always prioritize the greater good, but they are not necessarily evil either. They may act in their own self-interest or make decisions based on their own moral code. Examples of neutral alignments include the Hulk and Deadpool. 	Bad: These superheroes are typically selfish, manipulative, and willing to harm others in pursuit of their own goals. Examples of evil alignments include Lex Luthor and the Joker.
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	power_id INTEGER default NULL, -- `power id` description: the id of the power Maps to superpower(id) value description: In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- `power name` description: the superpower name
);"
812,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	full_name TEXT default NULL, -- `full name` description: the full name of the superhero value description: The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is ""John"" and their surname is ""Smith,"" their full name would be ""John Smith.""
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- examples: `Blue`| description: the color of the superhero's skin/eye/hair/etc
);"
813,"CREATE TABLE alignment
(
	id INTEGER not null primary key,
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	alignment_id INTEGER default NULL, -- `alignment id` description: the id of the superhero's alignment
	foreign key (alignment_id) references alignment(id),
);

CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, -- `hero id` description: the id of the hero Maps to superhero(id)
	attribute_id INTEGER default NULL, --
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
	foreign key (hero_id) references superhero(id),
);"
814,"CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- description: the color of the superhero's skin/eye/hair/etc
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, --
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
	foreign key (hero_id) references superhero(id),
);"
815,"CREATE TABLE alignment
(
	id INTEGER not null primary key,
);

CREATE TABLE gender
(
	id INTEGER not null primary key,
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	gender_id INTEGER default NULL, -- `gender id` description: the id of the superhero's gender
	alignment_id INTEGER default NULL, -- `alignment id` description: the id of the superhero's alignment
	foreign key (alignment_id) references alignment(id),
	foreign key (gender_id) references gender(id),
);"
816,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`| `superhero name` description: the name of the superhero
);

CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, -- `hero id` description: the id of the hero Maps to superhero(id)
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
	foreign key (hero_id) references superhero(id),
);"
817,"CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- description: the color of the superhero's skin/eye/hair/etc
);

CREATE TABLE gender
(
	id INTEGER not null primary key,
	gender TEXT default NULL, -- examples: `Male`| description: the gender of the superhero
);

CREATE TABLE race
(
	id INTEGER not null primary key,
	race TEXT default NULL, -- description: the race of the superhero value description: In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	gender_id INTEGER default NULL, -- `gender id` description: the id of the superhero's gender
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	race_id INTEGER default NULL, -- `race id` description: the id of the superhero's race
	foreign key (eye_colour_id) references colour(id),
	foreign key (gender_id) references gender(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (race_id) references race(id),
	foreign key (skin_colour_id) references colour(id),
);"
818,"CREATE TABLE alignment
(
	id INTEGER not null primary key,
);

CREATE TABLE gender
(
	id INTEGER not null primary key,
	gender TEXT default NULL, -- examples: `Female`| description: the gender of the superhero
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	gender_id INTEGER default NULL, -- `gender id` description: the id of the superhero's gender
	alignment_id INTEGER default NULL, -- `alignment id` description: the id of the superhero's alignment
	foreign key (alignment_id) references alignment(id),
	foreign key (gender_id) references gender(id),
);"
819,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	weight_kg INTEGER default NULL, -- `weight kg` description: the weight of the superhero value description: The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- examples: `Blue`| description: the color of the superhero's skin/eye/hair/etc
);"
820,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Hulk`| `superhero name` description: the name of the superhero
);

CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, -- `hero id` description: the id of the hero Maps to superhero(id)
	attribute_id INTEGER default NULL, --
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
	foreign key (attribute_id) references attribute(id),
	foreign key (hero_id) references superhero(id),
);

CREATE TABLE attribute
(
	id INTEGER not null primary key,
	attribute_name TEXT default NULL, -- examples: `Strength`| `attribute name` description: the attribute value description: A superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery.
);"
821,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Ajax`| `superhero name` description: the name of the superhero
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, -- `hero id` description: the id of the hero Maps to superhero(id)
	power_id INTEGER default NULL, -- `power id` description: the id of the power Maps to superpower(id) value description: In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- `power name` description: the superpower name
);"
822,"CREATE TABLE alignment
(
	id INTEGER not null primary key,
	alignment TEXT default NULL, -- examples: `Bad`| description: the alignment of the superhero value description: Alignment refers to a character's moral and ethical stance and can be used to describe the overall attitude or behavior of a superhero. Some common alignments for superheroes include: Good: These superheroes are typically kind, selfless, and dedicated to protecting others and upholding justice. Examples of good alignments include Superman, Wonder Woman, and Spider-Man. Neutral: These superheroes may not always prioritize the greater good, but they are not necessarily evil either. They may act in their own self-interest or make decisions based on their own moral code. Examples of neutral alignments include the Hulk and Deadpool. 	Bad: These superheroes are typically selfish, manipulative, and willing to harm others in pursuit of their own goals. Examples of evil alignments include Lex Luthor and the Joker.
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- examples: `Green`| description: the color of the superhero's skin/eye/hair/etc
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	alignment_id INTEGER default NULL, -- `alignment id` description: the id of the superhero's alignment
	foreign key (alignment_id) references alignment(id),
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);"
823,"CREATE TABLE gender
(
	id INTEGER not null primary key,
	gender TEXT default NULL, -- examples: `Female`| description: the gender of the superhero
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `Marvel Comics`| description: the name of the publisher
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	gender_id INTEGER default NULL, -- `gender id` description: the id of the superhero's gender
	publisher_id INTEGER default NULL, --
	foreign key (gender_id) references gender(id),
	foreign key (publisher_id) references publisher(id),
);"
824,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`| `superhero name` description: the name of the superhero
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- examples: `Wind Control`| `power name` description: the superpower name
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	power_id INTEGER default NULL, --
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);"
825,"CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- examples: `Phoenix Force`| `power name` description: the superpower name
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	power_id INTEGER default NULL, -- `power id` description: the id of the power Maps to superpower(id) value description: In general, a superhero's attributes provide the foundation for their abilities and help to define who they are, while their powers are the specific abilities that they use to fight crime and protect others.
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	gender_id INTEGER default NULL, -- `gender id` description: the id of the superhero's gender
	foreign key (gender_id) references gender(id),
);

CREATE TABLE gender
(
	id INTEGER not null primary key,
	gender TEXT default NULL, -- description: the gender of the superhero
);"
826,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`| `superhero name` description: the name of the superhero
	publisher_id INTEGER default NULL, --
	weight_kg INTEGER default NULL, -- `weight kg` description: the weight of the superhero value description: The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.
	foreign key (publisher_id) references publisher(id),
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `DC Comics`
);"
827,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	race_id INTEGER default NULL, -- `race id` description: the id of the superhero's race
	publisher_id INTEGER default NULL, --
	height_cm INTEGER default NULL, -- `height cm` description: the height of the superhero value description: The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing.
	foreign key (publisher_id) references publisher(id),
	foreign key (race_id) references race(id),
);

CREATE TABLE race
(
	id INTEGER not null primary key,
	race TEXT default NULL, -- examples: `Human`| description: the race of the superhero value description: In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `Dark Horse Comics`
);"
828,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
);

CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, -- `hero id` description: the id of the hero Maps to superhero(id)
	attribute_id INTEGER default NULL, -- `attribute id` description: the id of the attribute Maps to attribute(id)
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
	foreign key (attribute_id) references attribute(id),
	foreign key (hero_id) references superhero(id),
);

CREATE TABLE attribute
(
	id INTEGER not null primary key,
	attribute_name TEXT default NULL, -- examples: `Speed`| `attribute name` description: the attribute value description: A superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery.
);"
829,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	publisher_id INTEGER default NULL, --
	foreign key (publisher_id) references publisher(id),
);

CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `Marvel Comics`, `DC Comics`| description: the name of the publisher
);"
830,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Black Panther`| `superhero name` description: the name of the superhero
);

CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, --
	attribute_id INTEGER default NULL, --
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
	foreign key (attribute_id) references attribute(id),
	foreign key (hero_id) references superhero(id),
);

CREATE TABLE attribute
(
	id INTEGER not null primary key,
	attribute_name TEXT default NULL, -- `attribute name` description: the attribute value description: A superhero's attribute is a characteristic or quality that defines who they are and what they are capable of. This could be a physical trait, such as superhuman strength or the ability to fly, or a personal trait, such as extraordinary intelligence or exceptional bravery.
);"
831,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Abomination`| `superhero name` description: the name of the superhero
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- description: the color of the superhero's skin/eye/hair/etc
);"
832,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`| `superhero name` description: the name of the superhero
	height_cm INTEGER default NULL, -- `height cm` description: the height of the superhero value description: The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing.
);"
833,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Superman`| `superhero name` description: the name of the superhero
	full_name TEXT default NULL, -- examples: `Charles Chandler`| `full name` description: the full name of the superhero value description: The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is ""John"" and their surname is ""Smith,"" their full name would be ""John Smith.""
);"
834,"CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `George Lucas`| description: the name of the publisher
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	gender_id INTEGER default NULL, -- `gender id` description: the id of the superhero's gender
	publisher_id INTEGER default NULL, -- `publisher id` description: the id of the publisher
	foreign key (gender_id) references gender(id),
	foreign key (publisher_id) references publisher(id),
);

CREATE TABLE gender
(
	id INTEGER not null primary key,
	gender TEXT default NULL, -- examples: `Female`| description: the gender of the superhero
);"
835,"CREATE TABLE publisher
(
	id INTEGER not null primary key,
	publisher_name TEXT default NULL, -- examples: `Marvel Comics`
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	publisher_id INTEGER default NULL, --
	alignment_id INTEGER default NULL, -- `alignment id` description: the id of the superhero's alignment
	foreign key (alignment_id) references alignment(id),
	foreign key (publisher_id) references publisher(id),
);

CREATE TABLE alignment
(
	id INTEGER not null primary key,
	alignment TEXT default NULL, -- examples: `Good`| description: the alignment of the superhero value description: Alignment refers to a character's moral and ethical stance and can be used to describe the overall attitude or behavior of a superhero. Some common alignments for superheroes include: Good: These superheroes are typically kind, selfless, and dedicated to protecting others and upholding justice. Examples of good alignments include Superman, Wonder Woman, and Spider-Man. Neutral: These superheroes may not always prioritize the greater good, but they are not necessarily evil either. They may act in their own self-interest or make decisions based on their own moral code. Examples of neutral alignments include the Hulk and Deadpool. 	Bad: These superheroes are typically selfish, manipulative, and willing to harm others in pursuit of their own goals. Examples of evil alignments include Lex Luthor and the Joker.
);"
836,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	full_name TEXT default NULL, -- `full name` description: the full name of the superhero value description: The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is ""John"" and their surname is ""Smith,"" their full name would be ""John Smith.""
);"
837,"CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, -- `hero id` description: the id of the hero Maps to superhero(id)
	attribute_id INTEGER default NULL, -- `attribute id` description: the id of the attribute Maps to attribute(id)
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
);"
838,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Alien`| `superhero name` description: the name of the superhero
	full_name TEXT default NULL, -- `full name` description: the full name of the superhero value description: The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is ""John"" and their surname is ""Smith,"" their full name would be ""John Smith.""
);"
839,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	full_name TEXT default NULL, -- `full name` description: the full name of the superhero value description: The full name of a person typically consists of their given name, also known as their first name or personal name, and their surname, also known as their last name or family name. For example, if someone's given name is ""John"" and their surname is ""Smith,"" their full name would be ""John Smith.""
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	weight_kg INTEGER default NULL, -- `weight kg` description: the weight of the superhero value description: The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- examples: `Brown`| description: the color of the superhero's skin/eye/hair/etc
);"
840,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Aquababy`| `superhero name` description: the name of the superhero
);

CREATE TABLE hero_attribute
(
	hero_id INTEGER default NULL, --
	attribute_value INTEGER default NULL, -- `attribute value` description: the attribute value value description: If a superhero has a higher attribute value on a particular attribute, it means that they are more skilled or powerful in that area compared to other superheroes. For example, if a superhero has a higher attribute value for strength, they may be able to lift heavier objects or deliver more powerful punches than other superheroes.
	foreign key (hero_id) references superhero(id),
);"
841,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	race_id INTEGER default NULL, -- `race id` description: the id of the superhero's race
	weight_kg INTEGER default NULL, -- `weight kg` description: the weight of the superhero value description: The unit of weight is kilogram. If the weight_kg is NULL or 0, it means the weight of the superhero is missing.
	foreign key (race_id) references race(id),
);

CREATE TABLE race
(
	id INTEGER not null primary key,
	race TEXT default NULL, -- description: the race of the superhero value description: In the context of superheroes, a superhero's race would refer to the particular group of people that the superhero belongs to base on these physical characteristics
);"
842,"CREATE TABLE alignment
(
	id INTEGER not null primary key,
	alignment TEXT default NULL, -- examples: `Neutral`| description: the alignment of the superhero value description: Alignment refers to a character's moral and ethical stance and can be used to describe the overall attitude or behavior of a superhero. Some common alignments for superheroes include: Good: These superheroes are typically kind, selfless, and dedicated to protecting others and upholding justice. Examples of good alignments include Superman, Wonder Woman, and Spider-Man. Neutral: These superheroes may not always prioritize the greater good, but they are not necessarily evil either. They may act in their own self-interest or make decisions based on their own moral code. Examples of neutral alignments include the Hulk and Deadpool. 	Bad: These superheroes are typically selfish, manipulative, and willing to harm others in pursuit of their own goals. Examples of evil alignments include Lex Luthor and the Joker.
);

CREATE TABLE superhero
(
	id INTEGER not null primary key,
	alignment_id INTEGER default NULL, -- `alignment id` description: the id of the superhero's alignment
	height_cm INTEGER default NULL, -- `height cm` description: the height of the superhero value description: The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing.
	foreign key (alignment_id) references alignment(id),
);"
843,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, -- `hero id` description: the id of the hero Maps to superhero(id)
	power_id INTEGER default NULL, --
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- examples: `Intelligence`
);"
844,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	superhero_name TEXT default NULL, -- examples: `Blackwulf`| `superhero name` description: the name of the superhero
	eye_colour_id INTEGER default NULL, -- `eye colour id` description: the id of the superhero's eye color
	hair_colour_id INTEGER default NULL, -- `hair colour id` description: the id of the superhero's hair color
	skin_colour_id INTEGER default NULL, -- `skin colour id` description: the id of the superhero's skin color
	foreign key (eye_colour_id) references colour(id),
	foreign key (hair_colour_id) references colour(id),
	foreign key (skin_colour_id) references colour(id),
);

CREATE TABLE colour
(
	id INTEGER not null primary key,
	colour TEXT default NULL, -- description: the color of the superhero's skin/eye/hair/etc
);"
845,"CREATE TABLE superhero
(
	id INTEGER not null primary key,
	height_cm INTEGER default NULL, -- `height cm` description: the height of the superhero value description: The unit of height is centimeter. If the height_cm is NULL or 0, it means the height of the superhero is missing.
);

CREATE TABLE hero_power
(
	hero_id INTEGER default NULL, --
	power_id INTEGER default NULL, --
	foreign key (hero_id) references superhero(id),
	foreign key (power_id) references superpower(id),
);

CREATE TABLE superpower
(
	id INTEGER not null primary key,
	power_name TEXT default NULL, -- `power name` description: the superpower name
);"
1470,"CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
	Country TEXT null, -- examples: `CZE`
	Segment TEXT null, -- examples: `Premium`| `chain segment` description: chain segment
);"
1471,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Currency TEXT null, -- examples: `EUR`, `CZK`| description: Currency
);"
1472,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Segment TEXT null, -- examples: `LAM`| `client segment` description: client segment
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, --
	Date TEXT not null, -- examples: `201202`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1473,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Segment TEXT null, -- examples: `SME`| `client segment` description: client segment
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, -- `Customer ID` description: Customer ID
	Date TEXT not null, -- examples: `201207`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1474,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Currency TEXT null, -- examples: `CZK`| description: Currency
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, -- `Customer ID` description: Customer ID
	Date TEXT not null, -- examples: `201204`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1475,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Segment TEXT null, -- examples: `KAM`
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, -- `Customer ID` description: Customer ID
	Date TEXT not null, -- examples: `201202`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1476,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Currency TEXT null, -- examples: `EUR`, `CZK`| description: Currency
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, --
	Date TEXT not null, -- examples: `201203`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1477,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-23`| description: Date
	CustomerID INTEGER, --
	ProductID INTEGER, --
	Amount INTEGER, -- description: Amount
);

CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Currency TEXT null, -- examples: `EUR`| description: Currency
);

CREATE TABLE products
(
	ProductID INTEGER UNIQUE not null primary key,
	Description TEXT null, -- examples: `Natural Gas NPG`| description: Description
);"
1478,
1479,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Currency TEXT null, -- examples: `CZK`| description: Currency
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, --
	Date TEXT not null, -- examples: `201204`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1480,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Segment TEXT null, -- examples: `SME`
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, -- `Customer ID` description: Customer ID
	Date TEXT not null, -- examples: `201209`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1481,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Segment TEXT null, -- examples: `KAM`, `LAM`, `SME`| `client segment` description: client segment
	Currency TEXT null, -- examples: `CZK`
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, -- `Customer ID` description: Customer ID
	Date TEXT not null, -- examples: `201209`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1482,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Segment TEXT null, -- examples: `KAM`, `LAM`, `SME`| `client segment` description: client segment
	Currency TEXT null, -- examples: `EUR`| description: Currency
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, --
	Date TEXT not null, -- examples: `201204`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1483,"CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, -- `Customer ID` description: Customer ID
	Date TEXT not null, -- examples: `201203`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1484,"CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
	Country TEXT null, --
	Segment TEXT null, -- examples: `Discount`
);"
1485,"CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, -- `Customer ID` description: Customer ID
	Date TEXT not null, -- examples: `201202`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1486,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Segment TEXT null, -- examples: `SME`
	Currency TEXT null, -- description: Currency
);

CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	CustomerID INTEGER, -- `Customer ID` description: Customer ID
);"
1487,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Segment TEXT null, -- examples: `LAM`| `client segment` description: client segment
	Currency TEXT null, -- description: Currency
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, --
	Date TEXT not null, -- examples: `201207`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1488,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Segment TEXT null, -- examples: `KAM`| `client segment` description: client segment
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, -- `Customer ID` description: Customer ID
	Date TEXT not null, -- examples: `201203`
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1489,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Segment TEXT null, -- examples: `KAM`| `client segment` description: client segment
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, -- `Customer ID` description: Customer ID
	Date TEXT not null, -- examples: `201201`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1490,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Segment TEXT null, -- examples: `LAM`| `client segment` description: client segment
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, -- `Customer ID` description: Customer ID
	Date TEXT not null, -- examples: `201203`
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1491,"CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
	Country TEXT null, --
	Segment TEXT null, -- examples: `Value for money`| `chain segment` description: chain segment
);"
1492,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Segment TEXT null, -- examples: `KAM`
	Currency TEXT null, -- description: Currency
);"
1493,"CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, -- `Customer ID` description: Customer ID
	Date TEXT not null, -- examples: `201204`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1494,"CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
	Country TEXT null, --
	Segment TEXT null, -- examples: `Premium`
);"
1495,"CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, -- `Customer ID` description: Customer ID
	Date TEXT not null, -- examples: `201208`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1496,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Segment TEXT null, -- `client segment` description: client segment
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, -- `Customer ID` description: Customer ID
	Date TEXT not null, -- examples: `201208`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1497,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Segment TEXT null, -- examples: `SME`| `client segment` description: client segment
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, -- `Customer ID` description: Customer ID
	Date TEXT not null, -- examples: `201209`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1498,"CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, --
	Date TEXT not null, -- examples: `201201`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1499,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Currency TEXT null, -- description: Currency
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, -- `Customer ID` description: Customer ID
	Date TEXT not null, -- examples: `201208`
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1500,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-25`| description: Date
	CustomerID INTEGER, --
	ProductID INTEGER, -- `Product ID` description: Product ID
);

CREATE TABLE products
(
	ProductID INTEGER UNIQUE not null primary key,
	Description TEXT null, -- description: Description
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, --
	Date TEXT not null, -- examples: `201209`| description: Date
	primary key (Date, CustomerID),
);"
1501,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-23`| description: Date
	GasStationID INTEGER, -- `Gas Station ID` description: Gas Station ID
);

CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
	Country TEXT null, --
);"
1502,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Currency TEXT null, -- description: Currency
);

CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
	ChainID INTEGER null, -- `Chain ID` description: Chain ID
);

CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	CustomerID INTEGER, --
	GasStationID INTEGER, -- `Gas Station ID` description: Gas Station ID
);"
1503,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Currency TEXT null, -- description: Currency
);

CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	CustomerID INTEGER, --
	ProductID INTEGER, -- `Product ID` description: Product ID
);

CREATE TABLE products
(
	ProductID INTEGER UNIQUE not null primary key,
	Description TEXT null, -- description: Description
);"
1504,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-25`| description: Date
	Amount INTEGER, -- description: Amount
	Price REAL, -- description: Price value description: total price = Amount x Price
);"
1505,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Currency TEXT null, -- description: Currency
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, -- `Customer ID` description: Customer ID
	Date TEXT not null, -- examples: `201201`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1506,"CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
	Country TEXT null, -- examples: `CZE`
);

CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	GasStationID INTEGER, -- `Gas Station ID` description: Gas Station ID
	ProductID INTEGER, --
);

CREATE TABLE products
(
	ProductID INTEGER UNIQUE not null primary key,
	Description TEXT null, -- description: Description
);"
1507,"CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
	ChainID INTEGER null, -- `Chain ID` description: Chain ID
);

CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Time TEXT, -- description: Time
	GasStationID INTEGER, -- `Gas Station ID` description: Gas Station ID
);"
1508,"CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
	Country TEXT null, -- examples: `CZE`
);

CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	GasStationID INTEGER, -- `Gas Station ID` description: Gas Station ID
	Price REAL, -- description: Price value description: total price = Amount x Price
);"
1509,"CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
	Country TEXT null, -- examples: `CZE`
);

CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-24`
	GasStationID INTEGER, -- `Gas Station ID` description: Gas Station ID
);"
1510,"CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
	Country TEXT null, -- examples: `CZE`
);

CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	GasStationID INTEGER, -- `Gas Station ID` description: Gas Station ID
	Amount INTEGER, --
	Price REAL, -- description: Price value description: total price = Amount x Price
);"
1511,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Currency TEXT null, -- description: Currency
);

CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	CustomerID INTEGER, --
	Amount INTEGER, -- description: Amount
	Price REAL, -- description: Price value description: total price = Amount x Price
);"
1512,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-24`| description: Date
	CustomerID INTEGER, -- `Customer ID` description: Customer ID
	Amount INTEGER, -- description: Amount
	Price REAL, -- description: Price value description: total price = Amount x Price
);"
1513,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-23`| description: Date
	Time TEXT, -- description: Time
	GasStationID INTEGER, -- `Gas Station ID` description: Gas Station ID
);

CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
	Country TEXT null, --
);"
1514,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-26`| description: Date
	Time TEXT, -- description: Time
	CustomerID INTEGER, -- `Customer ID` description: Customer ID
);

CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Currency TEXT null, -- description: Currency
);"
1515,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-24`| description: Date
	Time TEXT, -- description: Time
	CustomerID INTEGER, -- `Customer ID` description: Customer ID
);

CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Segment TEXT null, -- `client segment` description: client segment
);"
1516,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-23`| description: Date
	Time TEXT, -- description: Time
	CustomerID INTEGER, --
);

CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Currency TEXT null, -- examples: `EUR`| description: Currency
);"
1517,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-23`
	CustomerID INTEGER, -- `Customer ID` description: Customer ID
);

CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Segment TEXT null, -- `client segment` description: client segment
);"
1518,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-26`| description: Date
	Time TEXT, -- description: Time
	GasStationID INTEGER, --
);

CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
	Country TEXT null, --
);"
1519,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-26`| description: Date
	Time TEXT, -- description: Time
	ProductID INTEGER, -- `Product ID` description: Product ID
);"
1520,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-24`| description: Date
	CustomerID INTEGER, -- `Customer ID` description: Customer ID
	Price REAL, -- description: Price value description: total price = Amount x Price
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, --
	Date TEXT not null, -- examples: `201209`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1521,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-26`
	Time TEXT, -- description: Time
	GasStationID INTEGER, -- `Gas Station ID` description: Gas Station ID
);

CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
	Country TEXT null, -- examples: `CZE`
);"
1522,"CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, -- `Customer ID` description: Customer ID
	Date TEXT not null, -- examples: `201209`| description: Date
	Consumption REAL, --
	primary key (Date, CustomerID),
);

CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Currency TEXT null, -- description: Currency
);"
1523,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	CardID INTEGER, -- `Card ID` description: Card ID
	GasStationID INTEGER, --
);

CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
	Country TEXT null, --
);"
1524,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-26`| description: Date
	CustomerID INTEGER, -- `Customer ID` description: Customer ID
	GasStationID INTEGER, -- `Gas Station ID` description: Gas Station ID
	Amount INTEGER, --
);

CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
	Country TEXT null, --
);"
1525,"CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Currency TEXT null, -- examples: `EUR`| description: Currency
);

CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-26`| description: Date
	CustomerID INTEGER, -- `Customer ID` description: Customer ID
);"
1526,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-23`| description: Date
	CustomerID INTEGER, -- `Customer ID` description: Customer ID
	Price REAL, -- description: Price value description: total price = Amount x Price
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, -- `Customer ID` description: Customer ID
	Date TEXT not null, -- examples: `201208`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1527,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	GasStationID INTEGER, -- `Gas Station ID` description: Gas Station ID
	Amount INTEGER, -- description: Amount
	Price REAL, -- description: Price value description: total price = Amount x Price
);

CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
);"
1528,"CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
	Country TEXT null, -- examples: `SVK`
	Segment TEXT null, -- examples: `Premium`| `chain segment` description: chain segment
);

CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	CustomerID INTEGER, --
	GasStationID INTEGER, --
);

CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Segment TEXT null, -- `client segment` description: client segment
);"
1529,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-26`| description: Date
	CustomerID INTEGER, -- `Customer ID` description: Customer ID
	GasStationID INTEGER, -- `Gas Station ID` description: Gas Station ID
	Amount INTEGER, --
);"
1530,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	ProductID INTEGER, -- `Product ID` description: Product ID
	Amount INTEGER, --
);

CREATE TABLE products
(
	ProductID INTEGER UNIQUE not null primary key,
	Description TEXT null, -- description: Description
);"
1531,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	CustomerID INTEGER, -- `Customer ID` description: Customer ID
	Amount INTEGER, -- description: Amount
	Price REAL, -- description: Price value description: total price = Amount x Price
);

CREATE TABLE customers
(
	CustomerID INTEGER UNIQUE not null primary key,
	Currency TEXT null, -- description: Currency
);"
1532,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	GasStationID INTEGER, -- `Gas Station ID` description: Gas Station ID
	ProductID INTEGER, -- `Product ID` description: Product ID
	Price REAL, -- description: Price value description: total price = Amount x Price
);

CREATE TABLE gasstations
(
	GasStationID INTEGER UNIQUE not null primary key,
	Country TEXT null, --
);"
1533,"CREATE TABLE transactions_1k
(
	TransactionID INTEGER primary key autoincrement,
	Date DATE, -- examples: `2012-08-23`| description: Date
	CustomerID INTEGER, --
	ProductID INTEGER, -- `Product ID` description: Product ID
	Amount INTEGER, -- description: Amount
	Price REAL, -- description: Price value description: total price = Amount x Price
);

CREATE TABLE yearmonth
(
	CustomerID INTEGER not null references customers on update cascade on delete cascade references customers, --
	Date TEXT not null, -- examples: `201204`| description: Date
	Consumption REAL, -- description: consumption
	primary key (Date, CustomerID),
);"
1020,"CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, -- `player api id` description: the id of the player api
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);

CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, -- `player api id` description: the id of the player api
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
);"
1021,
1022,
1023,
1024,
1025,"CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	league_id INTEGER references League, -- `league id` description: league id
	season TEXT, -- examples: `2015/2016`| description: the season of the match
	home_team_goal INTEGER, -- `home team goal` description: the goal of the home team
	away_team_goal INTEGER, -- `away team goal` description: the goal of the away team
	goal TEXT, -- description: the goal of the match
);"
1026,"CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	season TEXT, -- examples: `2015/2016`| description: the season of the match
	home_team_api_id INTEGER references Team (team_api_id), -- `home team api id` description: the id of the home team api
	home_team_goal INTEGER, -- `home team goal` description: the goal of the home team
	away_team_goal INTEGER, -- `away team goal` description: the goal of the away team
);"
1027,
1028,"CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- examples: `Scotland Premier League`| description: league name
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	league_id INTEGER references League, --
	season TEXT, -- examples: `2009/2010`| description: the season of the match
	home_team_api_id INTEGER references Team (team_api_id), -- `home team api id` description: the id of the home team api
	away_team_api_id INTEGER references Team (team_api_id), -- `away team api id` description: the id of the away team api
	home_team_goal INTEGER, -- `home team goal` description: the goal of the home team
	away_team_goal INTEGER, -- `away team goal` description: the goal of the away team
);

CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
);"
1029,"CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, --
	`team_api_id` INTEGER, --
	`buildUpPlaySpeed` INTEGER, -- `build Up Play Speed` description: the speed in which attacks are put together value description: the score which is between 1-00 to measure the team's attack speed
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);

CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, --
	`team_long_name` TEXT, --
);"
1030,"CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	league_id INTEGER references League, -- `league id` description: league id
	season TEXT, -- examples: `2015/2016`| description: the season of the match
	home_team_goal INTEGER, -- `home team goal` description: the goal of the home team
	away_team_goal INTEGER, -- `away team goal` description: the goal of the away team
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- description: league name
);"
1031,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_fifa_api_id` INTEGER UNIQUE, --
	`birthday` TEXT, -- examples: `1993-01-01 00:00:00`, `1985-12-31 00:00:00`| description: the player's birthday value description: e.g. 1992-02-29 00:00:00  commonsense reasoning:  Player A is older than player B means that A's birthday is earlier than B's
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`date` TEXT, -- examples: `2015-03-20 00:00:00`
	`sprint_speed` INTEGER, -- `sprint speed` description: the player's sprint speed value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1032,"CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- description: league name
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	league_id INTEGER references League, -- `league id` description: league id
);"
1033,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`birthday` TEXT, -- examples: `1996-01-01 00:00:00`, `1990-01-01 00:00:00`| description: the player's birthday value description: e.g. 1992-02-29 00:00:00  commonsense reasoning:  Player A is older than player B means that A's birthday is earlier than B's
	`height` INTEGER, -- description: the player's height
);"
1034,"CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, -- `player api id` description: the id of the player api
	`date` TEXT, -- examples: `2007-02-22 00:00:00`
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);

CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, -- `player api id` description: the id of the player api
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
);"
1035,"CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, -- `team federation international football association api id` description: the id of the team fifa api
	`team_api_id` INTEGER, -- `team api id` description: the id of the team api
	`buildUpPlaySpeed` INTEGER, -- `build Up Play Speed` description: the speed in which attacks are put together value description: the score which is between 1-00 to measure the team's attack speed
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);

CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, -- `team api id` description: the id of the team api
	`team_fifa_api_id` INTEGER, -- `team federation international football association api id` description: the id of the team fifa api
);"
1036,"CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, --
	`team_long_name` TEXT, -- `team long name` description: the team's long name
);

CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, --
	`team_api_id` INTEGER, --
	`date` TEXT, -- examples: `2011-02-22 00:00:00`
	`buildUpPlayPassing` INTEGER, -- `build Up Play Passing` description: affects passing distance and support from teammates
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, --
);"
1037,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
	`birthday` TEXT, -- examples: `1987-01-01 00:00:00`| description: the player's birthday value description: e.g. 1992-02-29 00:00:00  commonsense reasoning:  Player A is older than player B means that A's birthday is earlier than B's
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, --
	`preferred_foot` TEXT, -- examples: `left`| `preferred foot` description: the player's preferred foot when attacking value description: right/ left
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1038,"CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- description: league name
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	league_id INTEGER references League, -- `league id` description: league id
	season TEXT, --
	home_team_goal INTEGER, -- `home team goal` description: the goal of the home team
	away_team_goal INTEGER, -- `away team goal` description: the goal of the away team
	goal TEXT, --
);"
1039,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Samir`, `Ahmed Samir Farag`
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, --
	`long_shots` INTEGER, -- `long shots` description: the player's long shots score value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1040,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, --
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
	`height` INTEGER, -- description: the player's height
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, --
	`heading_accuracy` INTEGER, -- `heading accuracy` description: the player's heading accuracy value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, --
);"
1041,"CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, --
	`team_api_id` INTEGER, --
	`date` TEXT, -- examples: `2014-09-19 00:00:00`
	`buildUpPlayDribblingClass` TEXT, -- examples: `Normal`| `build Up Play Dribbling Class` description: the dribbling class value description: commonsense reasoning:  • Little: 1-33 • Normal: 34-66 • Lots: 66-100
	`chanceCreationPassing` INTEGER, -- `chance Creation Passing` description: Amount of risk in pass decision and run support
	`chanceCreationPassingClass` TEXT, -- examples: `Normal`| `chance Creation Passing Class` description: the chance creation passing class value description: commonsense reasoning:  • Safe: 1-33 • Normal: 34-66 • Risky: 66-100
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);

CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, --
	`team_long_name` TEXT, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`dribbling` INTEGER, --
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, --
);"
1042,"CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- description: league name
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	league_id INTEGER references League, -- `league id` description: league id
	season TEXT, -- examples: `2009/2010`
	home_team_goal INTEGER, -- `home team goal` description: the goal of the home team
	away_team_goal INTEGER, -- `away team goal` description: the goal of the away team
	goal TEXT, --
);"
1043,"CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_long_name` TEXT, -- examples: `Queens Park Rangers`, `Rangers`| `team long name` description: the team's long name
	`team_short_name` TEXT, -- `team short name` description: the team's short name
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- description: league name
);"
1044,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`birthday` TEXT, -- description: the player's birthday value description: e.g. 1992-02-29 00:00:00  commonsense reasoning:  Player A is older than player B means that A's birthday is earlier than B's
);"
1045,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Franco Zennaro`| `player name` description: player name
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`attacking_work_rate` TEXT, -- `attacking work rate` description: the player's attacking work rate value description: commonsense reasoning:  • high: implies that the player is going to be in all of your attack moves • medium: implies that the player will select the attack actions he will join in • low: remain in his position while the team attacks
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1046,"CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, --
	`team_long_name` TEXT, -- examples: `ADO Den Haag`| `team long name` description: the team's long name
);

CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, --
	`team_api_id` INTEGER, --
	`buildUpPlayPositioningClass` TEXT, -- `build Up Play Positioning Class` description: A team's freedom of movement in the 1st two thirds of the pitch value description: Organised / Free Form
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);"
1047,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Francois Affolter`
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`date` TEXT, -- examples: `2016-04-21 00:00:00`
	`finishing` INTEGER, -- description: the player's finishing rate value description: 0-100 which is calculated by FIFA
	`heading_accuracy` INTEGER, -- `heading accuracy` description: the player's heading accuracy value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1048,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Gabriel`, `Gabriel Tamas`
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`date` TEXT, -- examples: `2016-04-07 00:00:00`| description: date value description: e.g. 2016-02-18 00:00:00
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1049,"CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`country_id` INTEGER, --
	`name` TEXT UNIQUE, -- examples: `Scotland Premier League`| description: league name
	FOREIGN KEY(`country_id`) REFERENCES `country`(`id`),
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	country_id INTEGER references Country, --
	league_id INTEGER references League, -- `league id` description: league id
	season TEXT, -- examples: `2015/2016`| description: the season of the match
);

CREATE TABLE Country
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
);"
1050,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
	`birthday` TEXT, -- description: the player's birthday value description: e.g. 1992-02-29 00:00:00  commonsense reasoning:  Player A is older than player B means that A's birthday is earlier than B's
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, --
	`preferred_foot` TEXT, -- `preferred foot` description: the player's preferred foot when attacking value description: right/ left
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1051,"CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`potential` INTEGER, -- description: potential of the player value description: commonsense reasoning:  The potential score is between 0-100 which is calculated by FIFA.  Higher potential score means that the player has more potential
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);

CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, --
	`player_fifa_api_id` INTEGER UNIQUE, --
);"
1052,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_fifa_api_id` INTEGER UNIQUE, --
	`weight` INTEGER, -- description: the player's weight
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`preferred_foot` TEXT, -- examples: `left`| `preferred foot` description: the player's preferred foot when attacking value description: right/ left
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1053,"CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, --
	`team_api_id` INTEGER, --
	`chanceCreationPassingClass` TEXT, -- examples: `Risky`| `chance Creation Passing Class` description: the chance creation passing class value description: commonsense reasoning:  • Safe: 1-33 • Normal: 34-66 • Risky: 66-100
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);

CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, --
	`team_short_name` TEXT, -- `team short name` description: the team's short name
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, --
);"
1054,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `David Wilson`| `player name` description: player name
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`defensive_work_rate` TEXT, -- description: the player's defensive work rate value description: commonsense reasoning:  • high: remain in his position and defense while the team attacks  • medium: implies that the player will select the defensive actions he will join in • low: implies that the player is going to be in all of your attack moves instead of defensing
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1055,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
	`birthday` TEXT, -- description: the player's birthday value description: e.g. 1992-02-29 00:00:00  commonsense reasoning:  Player A is older than player B means that A's birthday is earlier than B's
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, --
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1056,"CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`country_id` INTEGER, --
	`name` TEXT UNIQUE, -- examples: `Netherlands Eredivisie`| description: league name
	FOREIGN KEY(`country_id`) REFERENCES `country`(`id`),
);

CREATE TABLE Country
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- examples: `Netherlands`
);"
1057,"CREATE TABLE Country
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- examples: `Poland`
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`country_id` INTEGER, --
	`name` TEXT UNIQUE, --
	FOREIGN KEY(`country_id`) REFERENCES `country`(`id`),
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	country_id INTEGER references Country, --
	league_id INTEGER references League, --
	season TEXT, -- examples: `2010/2011`
	home_team_goal INTEGER, -- `home team goal` description: the goal of the home team
	goal TEXT, --
);"
1058,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_fifa_api_id` INTEGER UNIQUE, --
	`height` INTEGER, -- description: the player's height
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`finishing` INTEGER, -- description: the player's finishing rate value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1059,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_name` TEXT, -- `player name` description: player name
	`height` INTEGER, -- description: the player's height
);"
1060,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`birthday` TEXT, -- examples: `1990-09-05 00:00:00`| description: the player's birthday value description: e.g. 1992-02-29 00:00:00  commonsense reasoning:  Player A is older than player B means that A's birthday is earlier than B's
);"
1061,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_name` TEXT, -- `player name` description: player name
	`weight` INTEGER, -- description: the player's weight
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- description: league name
);

CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, --
	`team_long_name` TEXT, -- `team long name` description: the team's long name
);

CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, --
	`team_api_id` INTEGER, --
	`buildUpPlaySpeedClass` TEXT, -- examples: `Fast`| `build Up Play Speed Class` description: the speed class value description: commonsense reasoning:  • Slow: 1-33 • Balanced: 34-66 • Fast: 66-100
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);"
1062,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, --
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`date` TEXT, -- examples: `2016-01-07 00:00:00`
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1063,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Aaron Doran`
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`potential` INTEGER, -- description: potential of the player value description: commonsense reasoning:  The potential score is between 0-100 which is calculated by FIFA.  Higher potential score means that the player has more potential
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1064,"CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`preferred_foot` TEXT, -- examples: `left`| `preferred foot` description: the player's preferred foot when attacking value description: right/ left
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);

CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, --
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
);"
1065,"CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, --
	`team_long_name` TEXT, -- `team long name` description: the team's long name
);

CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, --
	`team_api_id` INTEGER, --
	`buildUpPlaySpeedClass` TEXT, -- examples: `Fast`| `build Up Play Speed Class` description: the speed class value description: commonsense reasoning:  • Slow: 1-33 • Balanced: 34-66 • Fast: 66-100
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- description: league name
);"
1066,"CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, --
	`team_short_name` TEXT, -- examples: `CLB`| `team short name` description: the team's short name
);

CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, --
	`team_api_id` INTEGER, --
	`buildUpPlayPassingClass` TEXT, -- `build Up Play Passing Class` description: the passing class value description: commonsense reasoning:  • Short: 1-33 • Mixed: 34-66 • Long: 66-100
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);"
1067,"CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, --
	`team_api_id` INTEGER, --
	`buildUpPlayPassing` INTEGER, -- `build Up Play Passing` description: affects passing distance and support from teammates
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);

CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, --
	`team_short_name` TEXT, -- `team short name` description: the team's short name
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, --
);"
1068,"CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, --
	`date` TEXT, -- examples: `2007-02-22 00:00:00`| description: date value description: e.g. 2016-02-18 00:00:00
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);

CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
	`height` INTEGER, -- description: the player's height
);"
1069,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`height` INTEGER, -- description: the player's height
);"
1070,"CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`country_id` INTEGER, --
	`name` TEXT UNIQUE, -- examples: `Italy Serie A`| description: league name
	FOREIGN KEY(`country_id`) REFERENCES `country`(`id`),
);

CREATE TABLE Country
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- examples: `Italy`
);"
1071,"CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, -- `team federation international football association api id` description: the id of the team fifa api
	`team_api_id` INTEGER, --
	`buildUpPlaySpeed` INTEGER, -- `build Up Play Speed` description: the speed in which attacks are put together value description: the score which is between 1-00 to measure the team's attack speed
	`buildUpPlayDribbling` INTEGER, -- `build Up Play Dribbling` description: the tendency/ frequency of dribbling
	`buildUpPlayPassing` INTEGER, -- `build Up Play Passing` description: affects passing distance and support from teammates
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);

CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, -- `team federation international football association api id` description: the id of the team fifa api
	`team_short_name` TEXT, -- `team short name` description: the team's short name
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, --
);"
1072,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Aaron Doran`
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1073,"CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- examples: `Germany 1. Bundesliga`| description: league name
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	league_id INTEGER references League, -- `league id` description: league id
	date TEXT, -- examples: `2008-11-07 00:00:00`| description: the date of the match value description: e.g. 2008-08-17 00:00:00
);"
1074,"CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	league_id INTEGER references League, --
	home_team_api_id INTEGER references Team (team_api_id), -- `home team api id` description: the id of the home team api
	away_team_api_id INTEGER references Team (team_api_id), --
	home_team_goal INTEGER, -- `home team goal` description: the goal of the home team
);

CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_short_name` TEXT, -- `team short name` description: the team's short name
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, --
);"
1075,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, --
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`potential` INTEGER, -- description: potential of the player value description: commonsense reasoning:  The potential score is between 0-100 which is calculated by FIFA.  Higher potential score means that the player has more potential
	`balance` INTEGER, -- description: the player's balance score value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1076,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Aaron Appindangoye`, `Abdou Diallo`
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`ball_control` INTEGER, -- `ball control` description: the player's ball control score value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1077,"CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_long_name` TEXT, -- `team long name` description: the team's long name
	`team_short_name` TEXT, -- examples: `GEN`| `team short name` description: the team's short name
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- description: league name
);"
1078,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_name` TEXT, -- examples: `Abdelaziz Barrada`, `Aaron Lennon`
	`birthday` TEXT, -- description: the player's birthday value description: e.g. 1992-02-29 00:00:00  commonsense reasoning:  Player A is older than player B means that A's birthday is earlier than B's
);"
1079,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_name` TEXT, --
	`height` INTEGER, -- description: the player's height
);"
1080,"CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER, --
	`preferred_foot` TEXT, -- examples: `left`| `preferred foot` description: the player's preferred foot when attacking value description: right/ left
	`attacking_work_rate` TEXT, -- examples: `low`| `attacking work rate` description: the player's attacking work rate value description: commonsense reasoning:  • high: implies that the player is going to be in all of your attack moves • medium: implies that the player will select the attack actions he will join in • low: remain in his position while the team attacks
);"
1081,"CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`country_id` INTEGER, --
	`name` TEXT UNIQUE, -- examples: `Belgium Jupiler League`| description: league name
	FOREIGN KEY(`country_id`) REFERENCES `country`(`id`),
);

CREATE TABLE Country
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- examples: `Belgium`
);"
1082,"CREATE TABLE Country
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- examples: `Germany`
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`country_id` INTEGER, -- `country id` description: the unique id for countries
	`name` TEXT UNIQUE, -- description: league name
	FOREIGN KEY(`country_id`) REFERENCES `country`(`id`),
);"
1083,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, --
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	`strength` INTEGER, -- description: the player's strength score value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1084,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_fifa_api_id` INTEGER UNIQUE, --
	`birthday` TEXT, -- description: the player's birthday value description: e.g. 1992-02-29 00:00:00  commonsense reasoning:  Player A is older than player B means that A's birthday is earlier than B's
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`defensive_work_rate` TEXT, -- examples: `high`| description: the player's defensive work rate value description: commonsense reasoning:  • high: remain in his position and defense while the team attacks  • medium: implies that the player will select the defensive actions he will join in • low: implies that the player is going to be in all of your attack moves instead of defensing
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1085,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Ariel Borysiuk`, `Arouna Kone`, `Alexis`
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`crossing` INTEGER, -- description: the player's crossing score value description: commonsense reasoning:  Cross is a long pass into the opponent's goal towards the header of sixth-yard teammate.  The crossing score is between 0-100 which measures the tendency/frequency of crosses in the box.  Higher potential score means that the player performs better in crossing actions.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1086,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Ariel Borysiuk`| `player name` description: player name
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, --
	`heading_accuracy` INTEGER, -- `heading accuracy` description: the player's heading accuracy value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1087,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_fifa_api_id` INTEGER UNIQUE, --
	`height` INTEGER, -- description: the player's height
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`volleys` INTEGER, -- description: the player's volley score value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1088,"CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`volleys` INTEGER, -- description: the player's volley score value description: 0-100 which is calculated by FIFA
	`dribbling` INTEGER, -- description: the player's dribbling score value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);

CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, --
	`player_fifa_api_id` INTEGER UNIQUE, --
);"
1089,"CREATE TABLE Country
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- examples: `Belgium`
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	country_id INTEGER references Country, -- `country id` description: country id
	season TEXT, -- examples: `2008/2009`| description: the season of the match
);"
1090,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_fifa_api_id` INTEGER UNIQUE, --
	`birthday` TEXT, -- description: the player's birthday value description: e.g. 1992-02-29 00:00:00  commonsense reasoning:  Player A is older than player B means that A's birthday is earlier than B's
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`long_passing` INTEGER, -- `long passing` description: the player's long passing score value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1091,"CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- examples: `Belgium Jupiler League`| description: league name
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	league_id INTEGER references League, -- `league id` description: league id
	date TEXT, -- examples: `2008-11-08 00:00:00`| description: the date of the match value description: e.g. 2008-08-17 00:00:00
);"
1092,"CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	league_id INTEGER references League, -- `league id` description: league id
	season TEXT, -- examples: `2008/2009`| description: the season of the match
);"
1093,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
	`birthday` TEXT, -- description: the player's birthday value description: e.g. 1992-02-29 00:00:00  commonsense reasoning:  Player A is older than player B means that A's birthday is earlier than B's
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, --
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1094,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Ariel Borysiuk`, `Paulin Puel`
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1095,"CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, --
	`team_long_name` TEXT, -- examples: `Heart of Midlothian`| `team long name` description: the team's long name
);

CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, --
	`team_api_id` INTEGER, --
	`buildUpPlaySpeed` INTEGER, -- `build Up Play Speed` description: the speed in which attacks are put together value description: the score which is between 1-00 to measure the team's attack speed
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);"
1096,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Pietro Marino`| `player name` description: player name
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1097,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Aaron Lennox`
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`crossing` INTEGER, -- description: the player's crossing score value description: commonsense reasoning:  Cross is a long pass into the opponent's goal towards the header of sixth-yard teammate.  The crossing score is between 0-100 which measures the tendency/frequency of crosses in the box.  Higher potential score means that the player performs better in crossing actions.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1098,"CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, --
	`team_long_name` TEXT, -- examples: `Ajax`
);

CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, --
	`team_api_id` INTEGER, --
	`chanceCreationPassing` INTEGER, -- `chance Creation Passing` description: Amount of risk in pass decision and run support
	`chanceCreationPassingClass` TEXT, -- `chance Creation Passing Class` description: the chance creation passing class value description: commonsense reasoning:  • Safe: 1-33 • Normal: 34-66 • Risky: 66-100
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);"
1099,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Abdou Diallo`
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, --
	`preferred_foot` TEXT, -- `preferred foot` description: the player's preferred foot when attacking value description: right/ left
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1100,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Dorlan Pabon`
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1101,"CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_long_name` TEXT, -- examples: `Parma`| `team long name` description: the team's long name
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	country_id INTEGER references Country, --
	home_team_api_id INTEGER references Team (team_api_id), --
	away_team_api_id INTEGER references Team (team_api_id), -- `away team api id` description: the id of the away team api
	away_team_goal INTEGER, -- `away team goal` description: the goal of the away team
	goal TEXT, --
);

CREATE TABLE Country
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- examples: `Italy`
);"
1102,"CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, --
	`date` TEXT, -- examples: `2015-12-17 00:00:00`
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);

CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- `player name` description: player name
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
	`birthday` TEXT, -- description: the player's birthday value description: e.g. 1992-02-29 00:00:00  commonsense reasoning:  Player A is older than player B means that A's birthday is earlier than B's
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, --
);"
1103,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Aaron Mooy`| `player name` description: player name
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, --
	`date` TEXT, -- examples: `2007-02-22 00:00:00`| description: date value description: e.g. 2016-02-18 00:00:00
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1104,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Francesco Parravicini`| `player name` description: player name
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, --
	`date` TEXT, -- examples: `2015-11-19 00:00:00`| description: date value description: e.g. 2016-02-18 00:00:00
	`potential` INTEGER, -- description: potential of the player value description: commonsense reasoning:  The potential score is between 0-100 which is calculated by FIFA.  Higher potential score means that the player has more potential
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1105,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Francesco Migliore`| `player name` description: player name
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, --
	`date` TEXT, -- examples: `2015-12-24 00:00:00`| description: date value description: e.g. 2016-02-18 00:00:00
	`attacking_work_rate` TEXT, -- `attacking work rate` description: the player's attacking work rate value description: commonsense reasoning:  • high: implies that the player is going to be in all of your attack moves • medium: implies that the player will select the attack actions he will join in • low: remain in his position while the team attacks
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1106,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Kevin Berigaud`| `player name` description: player name
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, --
	`date` TEXT, -- examples: `2007-02-22 00:00:00`
	`defensive_work_rate` TEXT, -- description: the player's defensive work rate value description: commonsense reasoning:  • high: remain in his position and defense while the team attacks  • medium: implies that the player will select the defensive actions he will join in • low: implies that the player is going to be in all of your attack moves instead of defensing
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1107,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Kevin Constant`
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`date` TEXT, -- examples: `2007-02-22 00:00:00`
	`crossing` INTEGER, -- description: the player's crossing score value description: commonsense reasoning:  Cross is a long pass into the opponent's goal towards the header of sixth-yard teammate.  The crossing score is between 0-100 which measures the tendency/frequency of crosses in the box.  Higher potential score means that the player performs better in crossing actions.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1108,"CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, -- `team federation international football association api id` description: the id of the team fifa api
	`team_long_name` TEXT, -- examples: `Willem II`| `team long name` description: the team's long name
);

CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, -- `team federation international football association api id` description: the id of the team fifa api
	`team_api_id` INTEGER, --
	`date` TEXT, -- examples: `2014-09-19 00:00:00`| description: Date value description: e.g. 2010-02-22 00:00:00
	`buildUpPlaySpeed` INTEGER, -- `build Up Play Speed` description: the speed in which attacks are put together value description: the score which is between 1-00 to measure the team's attack speed
	`buildUpPlaySpeedClass` TEXT, -- `build Up Play Speed Class` description: the speed class value description: commonsense reasoning:  • Slow: 1-33 • Balanced: 34-66 • Fast: 66-100
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	date TEXT, -- examples: `2008-11-09 00:00:00`| description: the date of the match value description: e.g. 2008-08-17 00:00:00
	home_team_api_id INTEGER references Team (team_api_id), --
	away_team_api_id INTEGER references Team (team_api_id), --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`date` TEXT, -- examples: `2015-12-24 00:00:00`
);"
1109,"CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, --
	`team_short_name` TEXT, -- examples: `LEI`| `team short name` description: the team's short name
);

CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, --
	`team_api_id` INTEGER, --
	`date` TEXT, -- examples: `2011-02-22 00:00:00`
	`buildUpPlayDribblingClass` TEXT, -- `build Up Play Dribbling Class` description: the dribbling class value description: commonsense reasoning:  • Little: 1-33 • Normal: 34-66 • Lots: 66-100
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	date TEXT, -- examples: `2008-11-02 00:00:00`
	home_team_api_id INTEGER references Team (team_api_id), --
	away_team_api_id INTEGER references Team (team_api_id), --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`date` TEXT, -- examples: `2016-04-07 00:00:00`
	`dribbling` INTEGER, --
);"
1110,"CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, --
	`team_long_name` TEXT, -- examples: `FC Lorient`| `team long name` description: the team's long name
);

CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, --
	`team_api_id` INTEGER, --
	`date` TEXT, -- examples: `2010-02-22 00:00:00`| description: Date value description: e.g. 2010-02-22 00:00:00
	`buildUpPlayPassingClass` TEXT, -- `build Up Play Passing Class` description: the passing class value description: commonsense reasoning:  • Short: 1-33 • Mixed: 34-66 • Long: 66-100
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`date` TEXT, -- examples: `2015-03-20 00:00:00`
);"
1111,"CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, -- `team federation international football association api id` description: the id of the team fifa api
	`team_long_name` TEXT, -- examples: `PEC Zwolle`| `team long name` description: the team's long name
);

CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, -- `team federation international football association api id` description: the id of the team fifa api
	`team_api_id` INTEGER, --
	`date` TEXT, -- examples: `2010-02-22 00:00:00`
	`chanceCreationPassingClass` TEXT, -- `chance Creation Passing Class` description: the chance creation passing class value description: commonsense reasoning:  • Safe: 1-33 • Normal: 34-66 • Risky: 66-100
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);"
1112,"CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, --
	`team_long_name` TEXT, -- examples: `Hull City`| `team long name` description: the team's long name
);

CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, --
	`team_api_id` INTEGER, --
	`date` TEXT, -- examples: `2015-09-10 00:00:00`| description: Date value description: e.g. 2010-02-22 00:00:00
	`chanceCreationCrossingClass` TEXT, -- `chance Creation Crossing Class` description: the chance creation crossing class value description: commonsense reasoning:  • Little: 1-33 • Normal: 34-66 • Lots: 66-100
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	date TEXT, -- examples: `2008-11-09 00:00:00`| description: the date of the match value description: e.g. 2008-08-17 00:00:00
	home_team_api_id INTEGER references Team (team_api_id), -- `home team api id` description: the id of the home team api
	away_team_api_id INTEGER references Team (team_api_id), --
);"
1113,"CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, --
	`team_long_name` TEXT, -- examples: `Hannover 96`| `team long name` description: the team's long name
);

CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, -- `team federation international football association api id` description: the id of the team fifa api
	`team_api_id` INTEGER, --
	`date` TEXT, -- examples: `2011-02-22 00:00:00`
	`defenceAggressionClass` TEXT, -- `defence Aggression Class` description: the defence aggression class value description: commonsense reasoning:  • Contain: 1-33 • Press: 34-66 • Double: 66-100
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);"
1114,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Marko Arnautovic`
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`date` TEXT, -- examples: `2016-04-07 00:00:00`
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1115,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Jordan Bowery`, `Landon Donovan`
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`date` TEXT, -- examples: `2015-11-19 00:00:00`
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1116,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_name` TEXT, -- `player name` description: player name
	`height` INTEGER, -- description: the player's height
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, --
);"
1117,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, -- `player api id` description: the id of the player api
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
	`weight` INTEGER, -- description: the player's weight
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, -- `player api id` description: the id of the player api
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1118,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_name` TEXT, -- `player name` description: player name
	`birthday` TEXT, -- description: the player's birthday value description: e.g. 1992-02-29 00:00:00  commonsense reasoning:  Player A is older than player B means that A's birthday is earlier than B's
);"
1119,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Aaron Lennon`| `player name` description: player name
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	home_team_goal INTEGER, -- `home team goal` description: the goal of the home team
	home_player_1 INTEGER references Player (player_api_id), --
	home_player_2 INTEGER references Player (player_api_id), --
	home_player_3 INTEGER references Player (player_api_id), --
	home_player_4 INTEGER references Player (player_api_id), --
	home_player_5 INTEGER references Player (player_api_id), --
	home_player_6 INTEGER references Player (player_api_id), --
	home_player_7 INTEGER references Player (player_api_id), --
	home_player_8 INTEGER references Player (player_api_id), --
	home_player_9 INTEGER references Player (player_api_id), --
	home_player_10 INTEGER references Player (player_api_id), --
	home_player_11 INTEGER references Player (player_api_id), --
	away_player_1 INTEGER references Player (player_api_id), --
	away_player_2 INTEGER references Player (player_api_id), --
	away_player_3 INTEGER references Player (player_api_id), --
	away_player_4 INTEGER references Player (player_api_id), --
	away_player_5 INTEGER references Player (player_api_id), --
	away_player_6 INTEGER references Player (player_api_id), --
	away_player_7 INTEGER references Player (player_api_id), --
	away_player_8 INTEGER references Player (player_api_id), --
	away_player_9 INTEGER references Player (player_api_id), --
	away_player_10 INTEGER references Player (player_api_id), --
	away_player_11 INTEGER references Player (player_api_id), --
);"
1120,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Ferreira`, `Filipe Ferreira`, `Filipe`, `Daan Smith`| `player name` description: player name
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	away_team_goal INTEGER, -- `away team goal` description: the goal of the away team
	home_player_1 INTEGER references Player (player_api_id), --
	home_player_2 INTEGER references Player (player_api_id), --
	home_player_3 INTEGER references Player (player_api_id), --
	home_player_4 INTEGER references Player (player_api_id), --
	home_player_5 INTEGER references Player (player_api_id), --
	home_player_6 INTEGER references Player (player_api_id), --
	home_player_7 INTEGER references Player (player_api_id), --
	home_player_8 INTEGER references Player (player_api_id), --
	home_player_9 INTEGER references Player (player_api_id), --
	home_player_10 INTEGER references Player (player_api_id), --
	home_player_11 INTEGER references Player (player_api_id), --
	away_player_1 INTEGER references Player (player_api_id), --
	away_player_2 INTEGER references Player (player_api_id), --
	away_player_3 INTEGER references Player (player_api_id), --
	away_player_4 INTEGER references Player (player_api_id), --
	away_player_5 INTEGER references Player (player_api_id), --
	away_player_6 INTEGER references Player (player_api_id), --
	away_player_7 INTEGER references Player (player_api_id), --
	away_player_8 INTEGER references Player (player_api_id), --
	away_player_9 INTEGER references Player (player_api_id), --
	away_player_10 INTEGER references Player (player_api_id), --
	away_player_11 INTEGER references Player (player_api_id), --
	goal TEXT, --
);"
1121,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`birthday` TEXT, -- description: the player's birthday value description: e.g. 1992-02-29 00:00:00  commonsense reasoning:  Player A is older than player B means that A's birthday is earlier than B's
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	home_team_goal INTEGER, -- `home team goal` description: the goal of the home team
	home_player_1 INTEGER references Player (player_api_id), --
	home_player_2 INTEGER references Player (player_api_id), --
	home_player_3 INTEGER references Player (player_api_id), --
	home_player_4 INTEGER references Player (player_api_id), --
	home_player_5 INTEGER references Player (player_api_id), --
	home_player_6 INTEGER references Player (player_api_id), --
	home_player_7 INTEGER references Player (player_api_id), --
	home_player_8 INTEGER references Player (player_api_id), --
	home_player_9 INTEGER references Player (player_api_id), --
	home_player_10 INTEGER references Player (player_api_id), --
	home_player_11 INTEGER references Player (player_api_id), --
	away_player_1 INTEGER references Player (player_api_id), --
	away_player_2 INTEGER references Player (player_api_id), --
	away_player_3 INTEGER references Player (player_api_id), --
	away_player_4 INTEGER references Player (player_api_id), --
	away_player_5 INTEGER references Player (player_api_id), --
	away_player_6 INTEGER references Player (player_api_id), --
	away_player_7 INTEGER references Player (player_api_id), --
	away_player_8 INTEGER references Player (player_api_id), --
	away_player_9 INTEGER references Player (player_api_id), --
	away_player_10 INTEGER references Player (player_api_id), --
	away_player_11 INTEGER references Player (player_api_id), --
	goal TEXT, --
);"
1122,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- `player name` description: player name
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1123,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- `player name` description: player name
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, --
	`potential` INTEGER, -- description: potential of the player value description: commonsense reasoning:  The potential score is between 0-100 which is calculated by FIFA.  Higher potential score means that the player has more potential
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1124,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, --
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`attacking_work_rate` TEXT, -- examples: `high`| `attacking work rate` description: the player's attacking work rate value description: commonsense reasoning:  • high: implies that the player is going to be in all of your attack moves • medium: implies that the player will select the attack actions he will join in • low: remain in his position while the team attacks
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1125,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- `player name` description: player name
	`player_fifa_api_id` INTEGER UNIQUE, --
	`birthday` TEXT, -- description: the player's birthday value description: e.g. 1992-02-29 00:00:00  commonsense reasoning:  Player A is older than player B means that A's birthday is earlier than B's
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`finishing` INTEGER, -- description: the player's finishing rate value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1126,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- `player name` description: player name
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	country_id INTEGER references Country, --
	league_id INTEGER references League, --
	home_player_1 INTEGER references Player (player_api_id), --
	home_player_2 INTEGER references Player (player_api_id), --
	home_player_3 INTEGER references Player (player_api_id), --
	home_player_4 INTEGER references Player (player_api_id), --
	home_player_5 INTEGER references Player (player_api_id), --
	home_player_6 INTEGER references Player (player_api_id), --
	home_player_7 INTEGER references Player (player_api_id), --
	home_player_8 INTEGER references Player (player_api_id), --
	home_player_9 INTEGER references Player (player_api_id), --
	home_player_10 INTEGER references Player (player_api_id), --
	home_player_11 INTEGER references Player (player_api_id), --
	away_player_1 INTEGER references Player (player_api_id), --
	away_player_2 INTEGER references Player (player_api_id), --
	away_player_3 INTEGER references Player (player_api_id), --
	away_player_4 INTEGER references Player (player_api_id), --
	away_player_5 INTEGER references Player (player_api_id), --
	away_player_6 INTEGER references Player (player_api_id), --
	away_player_7 INTEGER references Player (player_api_id), --
	away_player_8 INTEGER references Player (player_api_id), --
	away_player_9 INTEGER references Player (player_api_id), --
	away_player_10 INTEGER references Player (player_api_id), --
	away_player_11 INTEGER references Player (player_api_id), --
);

CREATE TABLE Country
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- examples: `Belgium`
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`country_id` INTEGER, --
	`name` TEXT UNIQUE, -- examples: `Belgium Jupiler League`
	FOREIGN KEY(`country_id`) REFERENCES `country`(`id`),
);"
1127,"CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`vision` INTEGER, -- description: the player's vision score value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);

CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, --
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Country
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, --
);"
1128,"CREATE TABLE Country
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, --
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`country_id` INTEGER, --
	FOREIGN KEY(`country_id`) REFERENCES `country`(`id`),
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	country_id INTEGER references Country, --
	league_id INTEGER references League, --
	home_player_1 INTEGER references Player (player_api_id), --
	home_player_2 INTEGER references Player (player_api_id), --
	home_player_3 INTEGER references Player (player_api_id), --
	home_player_4 INTEGER references Player (player_api_id), --
	home_player_5 INTEGER references Player (player_api_id), --
	home_player_6 INTEGER references Player (player_api_id), --
	home_player_7 INTEGER references Player (player_api_id), --
	home_player_8 INTEGER references Player (player_api_id), --
	home_player_9 INTEGER references Player (player_api_id), --
	home_player_10 INTEGER references Player (player_api_id), --
	home_player_11 INTEGER references Player (player_api_id), --
	away_player_1 INTEGER references Player (player_api_id), --
	away_player_2 INTEGER references Player (player_api_id), --
	away_player_3 INTEGER references Player (player_api_id), --
	away_player_4 INTEGER references Player (player_api_id), --
	away_player_5 INTEGER references Player (player_api_id), --
	away_player_6 INTEGER references Player (player_api_id), --
	away_player_7 INTEGER references Player (player_api_id), --
	away_player_8 INTEGER references Player (player_api_id), --
	away_player_9 INTEGER references Player (player_api_id), --
	away_player_10 INTEGER references Player (player_api_id), --
	away_player_11 INTEGER references Player (player_api_id), --
);

CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`weight` INTEGER, -- description: the player's weight
);"
1129,"CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, --
	`team_long_name` TEXT, -- `team long name` description: the team's long name
);

CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, --
	`team_api_id` INTEGER, --
	`buildUpPlaySpeedClass` TEXT, -- examples: `Slow`| `build Up Play Speed Class` description: the speed class value description: commonsense reasoning:  • Slow: 1-33 • Balanced: 34-66 • Fast: 66-100
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, --
);"
1130,"CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, --
	`team_short_name` TEXT, -- `team short name` description: the team's short name
);

CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, --
	`team_api_id` INTEGER, --
	`chanceCreationPassing` INTEGER, -- `chance Creation Passing` description: Amount of risk in pass decision and run support
	`chanceCreationPassingClass` TEXT, -- examples: `Safe`| `chance Creation Passing Class` description: the chance creation passing class value description: commonsense reasoning:  • Safe: 1-33 • Normal: 34-66 • Risky: 66-100
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	league_id INTEGER references League, --
	home_team_api_id INTEGER references Team (team_api_id), --
	away_team_api_id INTEGER references Team (team_api_id), --
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, --
);"
1131,"CREATE TABLE Country
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- examples: `Italy`
);

CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`height` INTEGER, -- description: the player's height
);"
1132,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_name` TEXT, -- `player name` description: player name
	`height` INTEGER, -- description: the player's height
);"
1133,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_name` TEXT, -- `player name` description: player name
	`birthday` TEXT, -- description: the player's birthday value description: e.g. 1992-02-29 00:00:00  commonsense reasoning:  Player A is older than player B means that A's birthday is earlier than B's
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, --
);"
1134,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`jumping` INTEGER, -- description: the player's jumping score value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1135,"CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, --
	`potential` INTEGER, -- description: potential of the player value description: commonsense reasoning:  The potential score is between 0-100 which is calculated by FIFA.  Higher potential score means that the player has more potential
	`preferred_foot` TEXT, -- examples: `right`| `preferred foot` description: the player's preferred foot when attacking value description: right/ left
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);

CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, --
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
);"
1136,"CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`potential` INTEGER, -- description: potential of the player value description: commonsense reasoning:  The potential score is between 0-100 which is calculated by FIFA.  Higher potential score means that the player has more potential
	`preferred_foot` TEXT, -- examples: `left`| `preferred foot` description: the player's preferred foot when attacking value description: right/ left
	`crossing` INTEGER, -- description: the player's crossing score value description: commonsense reasoning:  Cross is a long pass into the opponent's goal towards the header of sixth-yard teammate.  The crossing score is between 0-100 which measures the tendency/frequency of crosses in the box.  Higher potential score means that the player performs better in crossing actions.
);"
1137,"CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER, --
	`stamina` INTEGER, -- description: the player's stamina score value description: 0-100 which is calculated by FIFA
	`strength` INTEGER, -- description: the player's strength score value description: 0-100 which is calculated by FIFA
);"
1138,"CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`country_id` INTEGER, -- `country id` description: the unique id for countries
	`name` TEXT UNIQUE, -- examples: `Poland Ekstraklasa`| description: league name
	FOREIGN KEY(`country_id`) REFERENCES `country`(`id`),
);

CREATE TABLE Country
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- examples: `Poland`
);"
1139,"CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	league_id INTEGER references League, --
	date TEXT, -- examples: `2008-11-08 00:00:00`| description: the date of the match value description: e.g. 2008-08-17 00:00:00
	home_team_goal INTEGER, -- `home team goal` description: the goal of the home team
	away_team_goal INTEGER, -- `away team goal` description: the goal of the away team
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- examples: `Belgium Jupiler League`
);"
1140,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- examples: `Alexis Blin`, `Alexis`| `player name` description: player name
	`player_fifa_api_id` INTEGER UNIQUE, -- `player federation international football association api id` description: the id of the player fifa api
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, -- `player federation international football association api id` description: the id of the player fifa api
	`player_api_id` INTEGER, --
	`acceleration` INTEGER, -- description: the player's acceleration score value description: 0-100 which is calculated by FIFA
	`sprint_speed` INTEGER, -- `sprint speed` description: the player's sprint speed value description: 0-100 which is calculated by FIFA
	`agility` INTEGER, -- description: the player's agility value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1141,"CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_fifa_api_id` INTEGER, --
	`team_long_name` TEXT, -- examples: `KSV Cercle Brugge`| `team long name` description: the team's long name
);

CREATE TABLE Team_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_fifa_api_id` INTEGER, --
	`team_api_id` INTEGER, --
	`buildUpPlaySpeedClass` TEXT, -- examples: `Balanced`, `Fast`, `Slow`| `build Up Play Speed Class` description: the speed class value description: commonsense reasoning:  • Slow: 1-33 • Balanced: 34-66 • Fast: 66-100
	FOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),
	FOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`),
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`balance` INTEGER, --
);"
1142,"CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	league_id INTEGER references League, -- `league id` description: league id
	season TEXT, -- examples: `2015/2016`| description: the season of the match
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- examples: `Italy Serie A`| description: league name
);"
1143,"CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- examples: `Netherlands Eredivisie`
);

CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	league_id INTEGER references League, --
	home_team_goal INTEGER, -- `home team goal` description: the goal of the home team
);"
1144,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_fifa_api_id` INTEGER UNIQUE, --
	`weight` INTEGER, -- description: the player's weight
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`finishing` INTEGER, -- description: the player's finishing rate value description: 0-100 which is calculated by FIFA
	`curve` INTEGER, -- description: the player's curve score value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1145,"CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	league_id INTEGER references League, -- `league id` description: league id
	season TEXT, -- examples: `2015/2016`| description: the season of the match
	home_team_api_id INTEGER references Team (team_api_id), --
	away_team_api_id INTEGER references Team (team_api_id), --
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, -- description: league name
);

CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_long_name` TEXT, -- `team long name` description: the team's long name
);"
1146,"CREATE TABLE Match
(
	id INTEGER primary key autoincrement,
	league_id INTEGER references League, --
	home_team_api_id INTEGER references Team (team_api_id), -- `home team api id` description: the id of the home team api
	away_team_api_id INTEGER references Team (team_api_id), -- `away team api id` description: the id of the away team api
	away_team_goal INTEGER, -- `away team goal` description: the goal of the away team
	goal TEXT, --
);

CREATE TABLE Team
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`team_api_id` INTEGER UNIQUE, --
	`team_long_name` TEXT, -- `team long name` description: the team's long name
);

CREATE TABLE League
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`name` TEXT UNIQUE, --
);"
1147,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_name` TEXT, -- `player name` description: player name
	`player_fifa_api_id` INTEGER UNIQUE, --
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	`strength` INTEGER, -- description: the player's strength score value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
1148,"CREATE TABLE Player
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_api_id` INTEGER UNIQUE, --
	`player_fifa_api_id` INTEGER UNIQUE, --
	`height` INTEGER, -- description: the player's height
);

CREATE TABLE Player_Attributes
(
	`id` INTEGER PRIMARY KEY AUTOINCREMENT,
	`player_fifa_api_id` INTEGER, --
	`player_api_id` INTEGER, --
	`overall_rating` INTEGER, -- description: the overall rating of the player value description: commonsense reasoning:  The rating is between 0-100 which is calculated by FIFA.  Higher overall rating means the player has a stronger overall strength.
	`strength` INTEGER, -- description: the player's strength score value description: 0-100 which is calculated by FIFA
	FOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),
	FOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`),
);"
100,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
	birth_date DATE not null, -- examples: `1960-07-03`| description: birth date
	district_id INTEGER not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- examples: `Sokolov`| `district_name` description: district_name
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, -- description: id number of client
	account_id INTEGER not null, -- description: id number of account
	foreign key (account_id) references account (account_id),
	foreign key (client_id) references client (client_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
101,"CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	date DATE not null, -- examples: `1995-07-13`| `date of transaction` description: date of transaction
	account INTEGER null, -- `account of the partner`
	foreign key (account_id) references account (account_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	date DATE not null, -- examples: `1995-09-21`| description: the creation date of the account value description: in the form YYMMDD
);"
102,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	date DATE not null, -- examples: `1997-05-30`| description: the creation date of the account value description: in the form YYMMDD
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	balance INTEGER not null, -- `balance after transaction` description: balance after transaction value description: Unit：USD
	account INTEGER null, -- `account of the partner`
	foreign key (account_id) references account (account_id),
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, -- description: the id number identifying the account
	amount INTEGER not null, -- description: approved amount value description: unit：US dollar
	foreign key (account_id) references account (account_id),
);"
103,"CREATE TABLE card
(
	card_id INTEGER default 0 not null primary key,
	disp_id INTEGER not null, --
	issued DATE not null, -- examples: `1998-05-20`| description: the date when the credit card issued value description: in the form YYMMDD
	foreign key (disp_id) references disp (disp_id),
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, -- description: id number of client
	foreign key (client_id) references client (client_id),
);

CREATE TABLE client
(
	client_id INTEGER not null primary key,
);"
104,"CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	date DATE not null, -- examples: `1995-10-13`| `date of transaction` description: date of transaction
	amount INTEGER not null, -- `amount of money` description: amount of money value description: Unit：USD
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	date DATE not null, -- examples: `1994-09-27`| description: the creation date of the account value description: in the form YYMMDD
);"
105,"CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, -- description: the id number identifying the account
	date DATE not null, -- examples: `1994-01-05`| description: the date when the loan is approved
	foreign key (account_id) references account (account_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, -- `location of branch` description: location of branch
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
106,"CREATE TABLE card
(
	card_id INTEGER default 0 not null primary key,
	disp_id INTEGER not null, --
	issued DATE not null, -- examples: `1996-12-07`| description: the date when the credit card issued value description: in the form YYMMDD
	foreign key (disp_id) references disp (disp_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	amount INTEGER not null, -- `amount of money` description: amount of money value description: Unit：USD
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	account_id INTEGER not null, --
);"
107,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, --
	birth_date DATE not null, -- examples: `1945-02-04`| description: birth date
	district_id INTEGER not null, -- `location of branch` description: location of branch
	foreign key (district_id) references district (district_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, -- `location of branch` description: location of branch
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A11 INTEGER not null, -- `average salary` description: average salary
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
108,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	date DATE not null, -- examples: `1993-02-26`| description: the creation date of the account value description: in the form YYMMDD
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, -- description: the id number identifying the account
	amount INTEGER not null, -- description: approved amount value description: unit：US dollar
	foreign key (account_id) references account (account_id),
);

CREATE TABLE client
(
	client_id INTEGER not null primary key,
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	date DATE not null, -- examples: `1995-10-13`| `date of transaction` description: date of transaction
	amount INTEGER not null, -- `amount of money` description: amount of money value description: Unit：USD
	account INTEGER null, -- `account of the partner`
	foreign key (account_id) references account (account_id),
);"
109,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
	district_id INTEGER not null, -- `location of branch` description: location of branch
	foreign key (district_id) references district (district_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, -- `location of branch` description: location of branch
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- examples: `Jesenik`
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, --
	account_id INTEGER not null, --
	foreign key (account_id) references account (account_id),
	foreign key (client_id) references client (client_id),
);"
110,"CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	date DATE not null, -- examples: `1995-09-13`| `date of transaction` description: date of transaction
	amount INTEGER not null, -- `amount of money` description: amount of money value description: Unit：USD
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	account_id INTEGER not null, -- description: id number of account
);"
111,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	date DATE not null, -- examples: `1996-08-28`
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- examples: `Litomerice`| `district_name` description: district_name
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
112,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
	birth_date DATE not null, -- examples: `1919-09-22`| description: birth date
	district_id INTEGER not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- `district_name` description: district_name
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
113,"CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	date DATE not null, -- examples: `1997-12-08`| description: the date when the loan is approved
	amount INTEGER not null, -- description: approved amount value description: unit：US dollar
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, -- description: id number of client
	account_id INTEGER not null, --
	foreign key (client_id) references client (client_id),
);

CREATE TABLE client
(
	client_id INTEGER not null primary key,
	birth_date DATE not null, -- examples: `1943-05-01`| description: birth date
);"
114,"CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A3 TEXT not null, -- examples: `Prague`| `region` description: region
);

CREATE TABLE client
(
	client_id INTEGER not null primary key,
	district_id INTEGER not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	date DATE not null, -- examples: `1996-02-21`
	foreign key (district_id) references district (district_id),
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, -- description: id number of client
	account_id INTEGER not null, -- description: id number of account
	foreign key (account_id) references account (account_id),
	foreign key (client_id) references client (client_id),
);"
115,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
	district_id INTEGER not null, -- `location of branch` description: location of branch
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A3 TEXT not null, -- examples: `south Bohemia`| `region` description: region
	A4 TEXT not null, -- `number of inhabitants`
);"
116,"CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, --
	date DATE not null, -- examples: `1994-01-05`| description: the date when the loan is approved
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	date DATE not null, -- examples: `1995-11-13`| `date of transaction` description: date of transaction
	balance INTEGER not null, -- `balance after transaction` description: balance after transaction value description: Unit：USD
);"
117,"CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	amount INTEGER not null, -- description: approved amount value description: unit：US dollar
	status TEXT not null, -- description: repayment status value description: 'A' stands for contract finished, no problems; 'B' stands for contract finished, loan not paid; 'C' stands for running contract, OK so far; 'D' stands for running contract, client in debt
);

CREATE TABLE card
(
	card_id INTEGER default 0 not null primary key,
	issued DATE not null, -- examples: `1997-10-25`
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account INTEGER null, --
);"
118,"CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, --
	amount INTEGER not null, --
	status TEXT not null, -- description: repayment status value description: 'A' stands for contract finished, no problems; 'B' stands for contract finished, loan not paid; 'C' stands for running contract, OK so far; 'D' stands for running contract, client in debt
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account INTEGER null, --
);

CREATE TABLE card
(
	card_id INTEGER default 0 not null primary key,
	issued DATE not null, -- examples: `1997-10-25`
);"
119,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	frequency TEXT not null, -- examples: `POPLATEK PO OBRATU`
	date DATE not null, -- examples: `1993-02-26`
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- `district_name` description: district_name
	A3 TEXT not null, --
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);

CREATE TABLE card
(
	card_id INTEGER default 0 not null primary key,
	disp_id INTEGER not null, --
	issued DATE not null, -- examples: `1995-09-03`
	foreign key (disp_id) references disp (disp_id),
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	account_id INTEGER not null, -- description: id number of account
	foreign key (account_id) references account (account_id),
);"
120,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	frequency TEXT not null, -- description: frequency of the acount
	date DATE not null, -- examples: `1993-01-27`| description: the creation date of the account value description: in the form YYMMDD
	foreign key (district_id) references district (district_id),
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, --
	account_id INTEGER not null, -- description: id number of account
	foreign key (account_id) references account (account_id),
	foreign key (client_id) references client (client_id),
);

CREATE TABLE client
(
	client_id INTEGER not null primary key,
	district_id INTEGER not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A3 TEXT not null, -- examples: `east Bohemia`
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
121,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	date DATE not null, -- examples: `1993-01-27`| description: the creation date of the account value description: in the form YYMMDD
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- examples: `Prachatice`| `district_name` description: district_name
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
122,"CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, -- description: the id number identifying the account
	foreign key (account_id) references account (account_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- `district_name` description: district_name
	A3 TEXT not null, -- `region` description: region
);"
123,"CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, -- description: the id number identifying the account
	amount INTEGER not null, --
	foreign key (account_id) references account (account_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- `district_name` description: district_name
	A3 TEXT not null, -- `region` description: region
);"
124,"CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, --
	duration INTEGER not null, -- description: loan duration value description: unit：month
	foreign key (account_id) references account (account_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A3 TEXT not null, --
	A11 INTEGER not null, -- `average salary` description: average salary
);"
125,"CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, --
	status TEXT not null, -- description: repayment status value description: 'A' stands for contract finished, no problems; 'B' stands for contract finished, loan not paid; 'C' stands for running contract, OK so far; 'D' stands for running contract, client in debt
	foreign key (account_id) references account (account_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE client
(
	client_id INTEGER not null primary key,
	district_id INTEGER not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A12 REAL null, -- `unemployment rate 1995` description: unemployment rate 1995
	A13 REAL not null, -- `unemployment rate 1996` description: unemployment rate 1996
);"
126,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	date DATE not null, -- examples: `1993-02-26`
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- examples: `Decin`| `district_name` description: district_name
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
127,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	frequency TEXT not null, -- examples: `POPLATEK MESICNE`| description: frequency of the acount
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	account_id INTEGER not null, -- description: id number of account
	foreign key (account_id) references account (account_id),
);"
128,"CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- `district_name` description: district_name
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, --
	account_id INTEGER not null, -- description: id number of account
	foreign key (account_id) references account (account_id),
	foreign key (client_id) references client (client_id),
);

CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
	district_id INTEGER not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
129,"CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	date DATE not null, -- examples: `1995-06-13`| `date of transaction` description: date of transaction
	type TEXT not null, -- examples: `VYDAJ`| `+/- transaction` description: +/- transaction value description: ""PRIJEM"" stands for credit ""VYDAJ"" stands for withdrawal
	amount INTEGER not null, --
	foreign key (account_id) references account (account_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	date DATE not null, -- examples: `1993-02-26`
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- `district_name` description: district_name
);

CREATE TABLE card
(
	card_id INTEGER default 0 not null primary key,
	type TEXT not null, -- description: type of credit card value description: ""junior"": junior class of credit card;  ""classic"": standard class of credit card;  ""gold"": high-level credit card
);"
130,"CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A3 TEXT not null, -- examples: `south Bohemia`| `region` description: region
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	account_id INTEGER not null, --
	foreign key (account_id) references account (account_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
131,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, --
	amount INTEGER not null, --
	status TEXT not null, -- description: repayment status value description: 'A' stands for contract finished, no problems; 'B' stands for contract finished, loan not paid; 'C' stands for running contract, OK so far; 'D' stands for running contract, client in debt
	foreign key (account_id) references account (account_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A3 TEXT not null, --
);"
132,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, --
	account_id INTEGER not null, --
	foreign key (client_id) references client (client_id),
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, --
	amount INTEGER not null, --
);"
133,"CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- `district_name` description: district_name
	A13 REAL not null, -- `unemployment rate 1996` description: unemployment rate 1996
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, -- `location of branch` description: location of branch
	foreign key (district_id) references district (district_id),
);"
134,"CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A16 INTEGER not null, -- `no. of committed crimes 1996` description: no. of committed crimes 1996
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, -- `location of branch` description: location of branch
	date DATE not null, -- examples: `1995-03-24`
	foreign key (district_id) references district (district_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
135,"CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	operation TEXT null, -- examples: `VYBER`, `VYBER KARTOU`| `mode of transaction` description: mode of transaction value description: ""VYBER KARTOU"": credit card withdrawal ""VKLAD"": credit in cash ""PREVOD Z UCTU"" :collection from another bank ""VYBER"": withdrawal in cash ""PREVOD NA UCET"": remittance to another bank
	balance INTEGER not null, -- `balance after transaction` description: balance after transaction value description: Unit：USD
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	frequency TEXT not null, -- examples: `POPLATEK MESICNE`| description: frequency of the acount
);"
136,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	frequency TEXT not null, -- examples: `POPLATEK MESICNE`| description: frequency of the acount
	date DATE not null, -- examples: `1997-07-07`
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, -- description: the id number identifying the account
	date DATE not null, -- examples: `1997-09-08`| description: the date when the loan is approved
	amount INTEGER not null, -- description: approved amount value description: unit：US dollar
	foreign key (account_id) references account (account_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
137,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, -- `location of branch` description: location of branch
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, --
	status TEXT not null, -- description: repayment status value description: 'A' stands for contract finished, no problems; 'B' stands for contract finished, loan not paid; 'C' stands for running contract, OK so far; 'D' stands for running contract, client in debt
	foreign key (account_id) references account (account_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
138,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, --
	district_id INTEGER not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A15 INTEGER null, -- `no. of committed crimes 1995` description: no. of committed crimes 1995
);"
139,"CREATE TABLE card
(
	card_id INTEGER default 0 not null primary key,
	disp_id INTEGER not null, -- `disposition id` description: disposition id
	type TEXT not null, -- examples: `gold`| description: type of credit card value description: ""junior"": junior class of credit card;  ""classic"": standard class of credit card;  ""gold"": high-level credit card
	foreign key (disp_id) references disp (disp_id),
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	type TEXT not null, -- description: type of disposition value description: ""OWNER"" : ""USER"" : ""DISPONENT""  the account can only have the right to issue permanent orders or apply for loans
);"
140,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- examples: `Pisek`| `district_name` description: district_name
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
141,"CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	date DATE not null, -- examples: `1995-08-13`| `date of transaction` description: date of transaction
	amount INTEGER not null, -- `amount of money` description: amount of money value description: Unit：USD
	foreign key (account_id) references account (account_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
);"
142,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE order
(
	order_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, -- description: id number of account
	k_symbol TEXT not null, -- examples: `SIPO`| `characterization of the payment` description: purpose of the payment value description: ""POJISTNE"" stands for insurance payment ""SIPO"" stands for household payment ""LEASING"" stands for leasing ""UVER"" stands for loan payment
	foreign key (account_id) references account (account_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- examples: `Pisek`
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, -- description: the id number identifying the account
	payments REAL not null, -- `monthly payments` description: monthly payments value description: unit：month
	foreign key (account_id) references account (account_id),
);"
143,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	account_id INTEGER not null, --
	foreign key (account_id) references account (account_id),
);

CREATE TABLE card
(
	card_id INTEGER default 0 not null primary key,
	disp_id INTEGER not null, --
	type TEXT not null, -- examples: `junior`, `gold`| description: type of credit card value description: ""junior"": junior class of credit card;  ""classic"": standard class of credit card;  ""gold"": high-level credit card
	foreign key (disp_id) references disp (disp_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, -- `account of the partner`
	foreign key (account_id) references account (account_id),
);"
144,"CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	date DATE not null, -- examples: `1995-10-13`
	operation TEXT null, -- examples: `VYBER`, `VYBER KARTOU`| `mode of transaction` description: mode of transaction value description: ""VYBER KARTOU"": credit card withdrawal ""VKLAD"": credit in cash ""PREVOD Z UCTU"" :collection from another bank ""VYBER"": withdrawal in cash ""PREVOD NA UCET"": remittance to another bank
	amount INTEGER not null, -- `amount of money` description: amount of money value description: Unit：USD
	account INTEGER null, --
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	amount INTEGER not null, --
);"
145,"CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	date DATE not null, -- examples: `1995-08-13`
	operation TEXT null, -- examples: `VYBER`, `VYBER KARTOU`| `mode of transaction` description: mode of transaction value description: ""VYBER KARTOU"": credit card withdrawal ""VKLAD"": credit in cash ""PREVOD Z UCTU"" :collection from another bank ""VYBER"": withdrawal in cash ""PREVOD NA UCET"": remittance to another bank
	amount INTEGER not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, --
	account_id INTEGER not null, -- description: id number of account
	foreign key (account_id) references account (account_id),
	foreign key (client_id) references client (client_id),
);

CREATE TABLE client
(
	client_id INTEGER not null primary key,
);"
146,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, --
	account_id INTEGER not null, -- description: id number of account
	foreign key (account_id) references account (account_id),
	foreign key (client_id) references client (client_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, -- description: the id number identifying the account
	foreign key (account_id) references account (account_id),
);

CREATE TABLE card
(
	card_id INTEGER default 0 not null primary key,
	disp_id INTEGER not null, --
	foreign key (disp_id) references disp (disp_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
147,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
	district_id INTEGER not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A3 TEXT not null, -- examples: `south Bohemia`| `region` description: region
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
148,"CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- examples: `Tabor`| `district_name` description: district_name
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	account_id INTEGER not null, -- description: id number of account
	type TEXT not null, -- examples: `OWNER`| description: type of disposition value description: ""OWNER"" : ""USER"" : ""DISPONENT""  the account can only have the right to issue permanent orders or apply for loans
	foreign key (account_id) references account (account_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
149,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE client
(
	client_id INTEGER not null primary key,
	district_id INTEGER not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, --
	account_id INTEGER not null, -- description: id number of account
	type TEXT not null, -- examples: `OWNER`| description: type of disposition value description: ""OWNER"" : ""USER"" : ""DISPONENT""  the account can only have the right to issue permanent orders or apply for loans
	foreign key (account_id) references account (account_id),
	foreign key (client_id) references client (client_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A11 INTEGER not null, -- `average salary` description: average salary
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
150,"CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A3 TEXT not null, -- examples: `north Bohemia`| `region` description: region
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	bank TEXT null, -- `bank of the partner` value description: each bank has unique two-letter code
	account INTEGER null, -- `account of the partner`
	foreign key (account_id) references account (account_id),
);"
151,"CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- `district_name` description: district_name
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	type TEXT not null, -- examples: `VYDAJ`| `+/- transaction` description: +/- transaction value description: ""PRIJEM"" stands for credit ""VYDAJ"" stands for withdrawal
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	account_id INTEGER not null, -- description: id number of account
	type TEXT not null, -- description: type of disposition value description: ""OWNER"" : ""USER"" : ""DISPONENT""  the account can only have the right to issue permanent orders or apply for loans
	foreign key (account_id) references account (account_id),
);"
152,"CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A3 TEXT not null, --
	A15 INTEGER null, -- `no. of committed crimes 1995` description: no. of committed crimes 1995
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	date DATE not null, -- examples: `1994-09-27`
	foreign key (district_id) references district (district_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
153,"CREATE TABLE card
(
	card_id INTEGER default 0 not null primary key,
	disp_id INTEGER not null, --
	type TEXT not null, -- examples: `classic`| description: type of credit card value description: ""junior"": junior class of credit card;  ""classic"": standard class of credit card;  ""gold"": high-level credit card
	foreign key (disp_id) references disp (disp_id),
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	type TEXT not null, -- examples: `OWNER`| description: type of disposition value description: ""OWNER"" : ""USER"" : ""DISPONENT""  the account can only have the right to issue permanent orders or apply for loans
);"
154,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
	district_id INTEGER not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- examples: `Hl.m. Praha`| `district_name` description: district_name
);"
155,"CREATE TABLE card
(
	card_id INTEGER default 0 not null primary key,
	type TEXT not null, -- examples: `gold`| description: type of credit card value description: ""junior"": junior class of credit card;  ""classic"": standard class of credit card;  ""gold"": high-level credit card
	issued DATE not null, -- examples: `1995-09-03`| description: the date when the credit card issued value description: in the form YYMMDD
);"
156,"CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, -- description: the id number identifying the account
	amount INTEGER not null, -- description: approved amount value description: unit：US dollar
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, --
	account_id INTEGER not null, -- description: id number of account
	type TEXT not null, -- description: type of disposition value description: ""OWNER"" : ""USER"" : ""DISPONENT""  the account can only have the right to issue permanent orders or apply for loans
	foreign key (client_id) references client (client_id),
);

CREATE TABLE client
(
	client_id INTEGER not null primary key,
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account INTEGER null, -- `account of the partner`
);"
157,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A15 INTEGER null, -- `no. of committed crimes 1995` description: no. of committed crimes 1995
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
158,"CREATE TABLE order
(
	order_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, -- description: id number of account
	foreign key (account_id) references account (account_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
159,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, -- description: id number of client
	account_id INTEGER not null, -- description: id number of account
	foreign key (client_id) references client (client_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	operation TEXT null, -- examples: `VYBER`| `mode of transaction` description: mode of transaction value description: ""VYBER KARTOU"": credit card withdrawal ""VKLAD"": credit in cash ""PREVOD Z UCTU"" :collection from another bank ""VYBER"": withdrawal in cash ""PREVOD NA UCET"": remittance to another bank
);"
160,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	frequency TEXT not null, -- examples: `POPLATEK TYDNE`| description: frequency of the acount
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, --
	amount INTEGER not null, --
	foreign key (account_id) references account (account_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
161,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, -- description: id number of client
	foreign key (client_id) references client (client_id),
);

CREATE TABLE card
(
	card_id INTEGER default 0 not null primary key,
	disp_id INTEGER not null, --
	type TEXT not null, -- description: type of credit card value description: ""junior"": junior class of credit card;  ""classic"": standard class of credit card;  ""gold"": high-level credit card
	foreign key (disp_id) references disp (disp_id),
);"
162,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	district_id INTEGER not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A3 TEXT not null, -- `region` description: region
);"
163,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, -- description: the id number identifying the account
	status TEXT not null, -- description: repayment status value description: 'A' stands for contract finished, no problems; 'B' stands for contract finished, loan not paid; 'C' stands for running contract, OK so far; 'D' stands for running contract, client in debt
	foreign key (account_id) references account (account_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
164,"CREATE TABLE order
(
	order_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, -- description: id number of account
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, -- description: id number of client
	account_id INTEGER not null, -- description: id number of account
);"
165,"CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, -- `account of the partner`
	foreign key (account_id) references account (account_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
);"
166,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- examples: `Jesenik`| `district_name` description: district_name
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, -- `account of the partner`
	foreign key (account_id) references account (account_id),
);"
167,"CREATE TABLE card
(
	card_id INTEGER default 0 not null primary key,
	disp_id INTEGER not null, --
	type TEXT not null, -- examples: `junior`| description: type of credit card value description: ""junior"": junior class of credit card;  ""classic"": standard class of credit card;  ""gold"": high-level credit card
	issued DATE not null, -- examples: `1995-04-24`| description: the date when the credit card issued value description: in the form YYMMDD
	foreign key (disp_id) references disp (disp_id),
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, -- description: id number of client
	foreign key (client_id) references client (client_id),
);

CREATE TABLE client
(
	client_id INTEGER not null primary key,
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	date DATE not null, -- examples: `1998-12-05`
);"
168,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
	district_id INTEGER not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A11 INTEGER not null, -- `average salary` description: average salary
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
169,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, --
	date DATE not null, -- examples: `1998-04-19`
	amount INTEGER not null, --
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, --
	account_id INTEGER not null, --
	foreign key (client_id) references client (client_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account INTEGER null, --
);"
170,"CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	date DATE not null, -- examples: `1995-07-13`
	operation TEXT null, -- examples: `VYBER`, `VYBER KARTOU`| `mode of transaction` description: mode of transaction value description: ""VYBER KARTOU"": credit card withdrawal ""VKLAD"": credit in cash ""PREVOD Z UCTU"" :collection from another bank ""VYBER"": withdrawal in cash ""PREVOD NA UCET"": remittance to another bank
);"
171,"CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A3 TEXT not null, -- examples: `east Bohemia`, `north Bohemia`
	A16 INTEGER not null, -- `no. of committed crimes 1996` description: no. of committed crimes 1996
);"
172,"CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	account_id INTEGER not null, -- description: id number of account
	type TEXT not null, -- description: type of disposition value description: ""OWNER"" : ""USER"" : ""DISPONENT""  the account can only have the right to issue permanent orders or apply for loans
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account INTEGER null, -- `account of the partner`
);"
173,"CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	amount INTEGER not null, --
	k_symbol TEXT null, -- `characterization of the transaction` value description: ""POJISTNE"": stands for insurrance payment ""SLUZBY"": stands for payment for statement ""UROK"": stands for interest credited ""SANKC. UROK"": sanction interest if negative balance ""SIPO"": stands for household ""DUCHOD"": stands for old-age pension ""UVER"": stands for loan payment
	account INTEGER null, --
);

CREATE TABLE order
(
	order_id INTEGER default 0 not null primary key,
	k_symbol TEXT not null, -- `characterization of the payment` description: purpose of the payment value description: ""POJISTNE"" stands for insurance payment ""SIPO"" stands for household payment ""LEASING"" stands for leasing ""UVER"" stands for loan payment
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	payments REAL not null, -- `monthly payments` description: monthly payments value description: unit：month
);"
174,"CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, --
	account_id INTEGER not null, -- description: id number of account
	foreign key (client_id) references client (client_id),
);

CREATE TABLE client
(
	client_id INTEGER not null primary key,
	birth_date DATE not null, -- examples: `1956-12-01`| description: birth date
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account INTEGER null, --
);"
175,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	frequency TEXT not null, -- examples: `POPLATEK PO OBRATU`| description: frequency of the acount
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	account_id INTEGER not null, -- description: id number of account
	type TEXT not null, -- description: type of disposition value description: ""OWNER"" : ""USER"" : ""DISPONENT""  the account can only have the right to issue permanent orders or apply for loans
	foreign key (account_id) references account (account_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
176,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, -- description: id number of client
	account_id INTEGER not null, -- description: id number of account
	foreign key (client_id) references client (client_id),
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, -- description: the id number identifying the account
	amount INTEGER not null, --
	payments REAL not null, -- `monthly payments` description: monthly payments value description: unit：month
	status TEXT not null, -- description: repayment status value description: 'A' stands for contract finished, no problems; 'B' stands for contract finished, loan not paid; 'C' stands for running contract, OK so far; 'D' stands for running contract, client in debt
);"
177,"CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	balance INTEGER not null, -- `balance after transaction` description: balance after transaction value description: Unit：USD
	account INTEGER null, -- `account of the partner`
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, -- description: id number of client
	account_id INTEGER not null, -- description: id number of account
	foreign key (client_id) references client (client_id),
);

CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
);"
178,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, -- description: id number of client
	foreign key (client_id) references client (client_id),
);

CREATE TABLE card
(
	card_id INTEGER default 0 not null primary key,
	disp_id INTEGER not null, --
	type TEXT not null, -- description: type of credit card value description: ""junior"": junior class of credit card;  ""classic"": standard class of credit card;  ""gold"": high-level credit card
	foreign key (disp_id) references disp (disp_id),
);"
179,"CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	date DATE not null, -- examples: `1995-09-13`| `date of transaction` description: date of transaction
	amount INTEGER not null, -- `amount of money` description: amount of money value description: Unit：USD
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, -- description: id number of client
	account_id INTEGER not null, -- description: id number of account
);"
180,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	birth_date DATE not null, -- examples: `1960-07-03`| description: birth date
	district_id INTEGER not null, -- `location of branch` description: location of branch
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A3 TEXT not null, -- examples: `east Bohemia`| `region` description: region
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account INTEGER null, -- `account of the partner`
);"
181,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, -- description: the id number identifying the account
	amount INTEGER not null, --
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, -- description: id number of client
	account_id INTEGER not null, -- description: id number of account
	foreign key (client_id) references client (client_id),
);"
182,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
	birth_date DATE not null, -- examples: `1929-01-25`| description: birth date
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, --
	account_id INTEGER not null, --
	foreign key (account_id) references account (account_id),
	foreign key (client_id) references client (client_id),
);

CREATE TABLE order
(
	order_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, --
	amount REAL not null, --
	k_symbol TEXT not null, -- examples: `SIPO`| `characterization of the payment` description: purpose of the payment value description: ""POJISTNE"" stands for insurance payment ""SIPO"" stands for household payment ""LEASING"" stands for leasing ""UVER"" stands for loan payment
	foreign key (account_id) references account (account_id),
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, --
	payments REAL not null, -- `monthly payments` description: monthly payments value description: unit：month
	foreign key (account_id) references account (account_id),
);"
183,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	date DATE not null, -- examples: `1996-02-21`| description: the creation date of the account value description: in the form YYMMDD
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A2 TEXT not null, -- examples: `Beroun`| `district_name` description: district_name
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, -- `account of the partner`
	foreign key (account_id) references account (account_id),
);"
184,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
);

CREATE TABLE card
(
	card_id INTEGER default 0 not null primary key,
	disp_id INTEGER not null, --
	type TEXT not null, -- examples: `junior`| description: type of credit card value description: ""junior"": junior class of credit card;  ""classic"": standard class of credit card;  ""gold"": high-level credit card
	foreign key (disp_id) references disp (disp_id),
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, --
	foreign key (client_id) references client (client_id),
);"
185,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
	district_id INTEGER not null, -- `location of branch` description: location of branch
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A3 TEXT not null, -- examples: `Prague`
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account INTEGER null, --
);"
186,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	frequency TEXT not null, -- examples: `POPLATEK TYDNE`| description: frequency of the acount
);"
187,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	frequency TEXT not null, -- examples: `POPLATEK TYDNE`| description: frequency of the acount
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, -- description: id number of client
	account_id INTEGER not null, --
	type TEXT not null, -- description: type of disposition value description: ""OWNER"" : ""USER"" : ""DISPONENT""  the account can only have the right to issue permanent orders or apply for loans
	foreign key (account_id) references account (account_id),
);"
188,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	date DATE not null, -- examples: `1996-11-24`| description: the creation date of the account value description: in the form YYMMDD
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, --
	date DATE not null, -- examples: `1996-04-29`| description: the date when the loan is approved
	amount INTEGER not null, -- description: approved amount value description: unit：US dollar
	duration INTEGER not null, -- description: loan duration value description: unit：month
	foreign key (account_id) references account (account_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, -- `account of the partner`
	foreign key (account_id) references account (account_id),
);"
189,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
	birth_date DATE not null, -- examples: `1970-12-13`
	district_id INTEGER not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A11 INTEGER not null, -- `average salary` description: average salary
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
190,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	birth_date DATE not null, -- examples: `1919-09-22`
	district_id INTEGER not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A3 TEXT not null, -- examples: `east Bohemia`| `region` description: region
);"
191,"CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, --
	duration INTEGER not null, -- description: loan duration value description: unit：month
	foreign key (account_id) references account (account_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	frequency TEXT not null, -- examples: `POPLATEK TYDNE`| description: frequency of the acount
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
192,"CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, --
	amount INTEGER not null, --
	status TEXT not null, -- description: repayment status value description: 'A' stands for contract finished, no problems; 'B' stands for contract finished, loan not paid; 'C' stands for running contract, OK so far; 'D' stands for running contract, client in debt
	foreign key (account_id) references account (account_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	frequency TEXT not null, -- examples: `POPLATEK PO OBRATU`
);"
193,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	district_id INTEGER not null, --
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, -- description: id number of client
	account_id INTEGER not null, -- description: id number of account
	type TEXT not null, -- description: type of disposition value description: ""OWNER"" : ""USER"" : ""DISPONENT""  the account can only have the right to issue permanent orders or apply for loans
	foreign key (client_id) references client (client_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account INTEGER null, --
);

CREATE TABLE card
(
	card_id INTEGER default 0 not null primary key,
	disp_id INTEGER not null, --
	issued DATE not null, -- examples: `1995-09-03`
	foreign key (disp_id) references disp (disp_id),
);"
194,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	birth_date DATE not null, -- examples: `1938-02-21`
);

CREATE TABLE card
(
	card_id INTEGER default 0 not null primary key,
	disp_id INTEGER not null, --
	type TEXT not null, -- examples: `gold`| description: type of credit card value description: ""junior"": junior class of credit card;  ""classic"": standard class of credit card;  ""gold"": high-level credit card
	foreign key (disp_id) references disp (disp_id),
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, -- description: id number of client
	account_id INTEGER not null, -- description: id number of account
	foreign key (client_id) references client (client_id),
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, --
);"
89,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	frequency TEXT not null, -- examples: `POPLATEK PO OBRATU`| description: frequency of the acount
	date DATE not null, -- examples: `1996-02-21`
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A3 TEXT not null, -- examples: `east Bohemia`
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	date DATE not null, -- examples: `1995-12-13`| `date of transaction` description: date of transaction
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
90,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A3 TEXT not null, -- examples: `Prague`| `region` description: region
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, -- description: the id number identifying the account
	foreign key (account_id) references account (account_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
91,"CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A12 REAL null, -- `unemployment rate 1995` description: unemployment rate 1995
	A13 REAL not null, -- `unemployment rate 1996` description: unemployment rate 1996
);"
92,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
	district_id INTEGER not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A11 INTEGER not null, -- `average salary` description: average salary
);"
93,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
	district_id INTEGER not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A3 TEXT not null, -- examples: `north Bohemia`
	A11 INTEGER not null, -- `average salary` description: average salary
);"
94,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	gender TEXT not null, -- value description: F：female  M：male
	birth_date DATE not null, -- examples: `1919-09-22`| description: birth date
	district_id INTEGER not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A11 INTEGER not null, -- `average salary` description: average salary
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, --
	account_id INTEGER not null, -- description: id number of account
	foreign key (client_id) references client (client_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account INTEGER null, --
);"
95,"CREATE TABLE client
(
	client_id INTEGER not null primary key,
	birth_date DATE not null, -- examples: `1940-10-09`| description: birth date
	district_id INTEGER not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE district
(
	district_id INTEGER default 0 not null primary key,
	A11 INTEGER not null, -- `average salary` description: average salary
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	district_id INTEGER default 0 not null, --
	foreign key (district_id) references district (district_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
96,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	frequency TEXT not null, -- examples: `POPLATEK TYDNE`| description: frequency of the acount
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, --
	account_id INTEGER not null, -- description: id number of account
	type TEXT not null, -- description: type of disposition value description: ""OWNER"" : ""USER"" : ""DISPONENT""  the account can only have the right to issue permanent orders or apply for loans
	foreign key (account_id) references account (account_id),
	foreign key (client_id) references client (client_id),
);

CREATE TABLE client
(
	client_id INTEGER not null primary key,
);"
97,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	frequency TEXT not null, -- examples: `POPLATEK PO OBRATU`
);

CREATE TABLE disp
(
	disp_id INTEGER not null primary key,
	client_id INTEGER not null, --
	account_id INTEGER not null, --
	type TEXT not null, -- description: type of disposition value description: ""OWNER"" : ""USER"" : ""DISPONENT""  the account can only have the right to issue permanent orders or apply for loans
	foreign key (account_id) references account (account_id),
	foreign key (client_id) references client (client_id),
);

CREATE TABLE client
(
	client_id INTEGER not null primary key,
);"
98,"CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	frequency TEXT not null, -- examples: `POPLATEK TYDNE`| description: frequency of the acount
);

CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, --
	date DATE not null, -- examples: `1997-09-08`| description: the date when the loan is approved
	amount INTEGER not null, -- description: approved amount value description: unit：US dollar
	foreign key (account_id) references account (account_id),
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
99,"CREATE TABLE loan
(
	loan_id INTEGER default 0 not null primary key,
	account_id INTEGER not null, --
	date DATE not null, -- examples: `1998-04-19`| description: the date when the loan is approved
	amount INTEGER not null, -- description: approved amount value description: unit：US dollar
	duration INTEGER not null, -- description: loan duration value description: unit：month
	foreign key (account_id) references account (account_id),
);

CREATE TABLE account
(
	account_id INTEGER default 0 not null primary key,
	date DATE not null, -- examples: `1994-09-27`| description: the creation date of the account value description: in the form YYMMDD
);

CREATE TABLE trans
(
	trans_id INTEGER default 0 not null primary key,
	account_id INTEGER default 0 not null, --
	account INTEGER null, --
	foreign key (account_id) references account (account_id),
);"
1000,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	date DATE default '0000-00-00' not null, -- examples: `2009-07-12`
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	location TEXT, --
	country TEXT, -- description: country of circuit
);"
1001,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	circuitId INTEGER default 0 not null, --
	name TEXT default '' not null, --
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- examples: `Marina Bay Street Circuit`
);

CREATE TABLE qualifying
(
	qualifyId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	q3 TEXT, -- `qualifying 3` description: time in qualifying 3 value description: in minutes / seconds / ...    only top 10 in the q2 has the record of q3
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, --
	surname TEXT default '' not null, --
);"
1002,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- description: forename
	surname TEXT default '' not null, -- description: surname
	dob DATE, -- examples: `1982-03-18`| `date of birth` description: date of birth
	nationality TEXT, -- description: nationality of drivers
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- description: name of the race
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
1003,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- examples: `Canadian Grand Prix`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	statusId INTEGER default 0 not null, --
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
	foreign key (statusId) references status(statusId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	number INTEGER, --
	forename TEXT default '' not null, --
	surname TEXT default '' not null, -- examples: `Driver`
);

CREATE TABLE status
(
	statusId INTEGER primary key autoincrement,
);"
1004,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- description: forename
	surname TEXT default '' not null, -- description: surname
	dob DATE, -- examples: `1981-10-19`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race ID` description: the identification number identifying the race
	driverId INTEGER default 0 not null, --
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	wins INTEGER default 0 not null, --
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- description: name of the race
);"
1005,"CREATE TABLE pitStops
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	stop INTEGER not null, --
	time TEXT not null, --
	duration TEXT, -- description: duration time value description: seconds/
	primary key (raceId, driverId, stop),
);"
1006,"CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, -- description: lap time value description: in minutes / seconds / ...
	milliseconds INTEGER, --
	primary key (raceId, driverId, lap),
);"
1007,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Lewis`
	surname TEXT default '' not null, -- examples: `Hamilton`, `Lewis`
);

CREATE TABLE pitStops
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	stop INTEGER not null, --
	time TEXT not null, --
	duration TEXT, -- description: duration time value description: seconds/
	primary key (raceId, driverId, stop),
	foreign key (driverId) references drivers(driverId),
);"
1008,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
	name TEXT default '' not null, -- examples: `Australian Grand Prix`
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Lewis`
	surname TEXT default '' not null, -- examples: `Hamilton`, `Lewis`
);

CREATE TABLE pitStops
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	stop INTEGER not null, -- description: stop number
	lap INTEGER not null, -- description: lap number
	primary key (raceId, driverId, stop),
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
1009,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- examples: `Australian Grand Prix`
);

CREATE TABLE pitStops
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	stop INTEGER not null, --
	time TEXT not null, --
	duration TEXT, -- description: duration time value description: seconds/
	primary key (raceId, driverId, stop),
	foreign key (raceId) references races(raceId),
);"
1010,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Lewis`
	surname TEXT default '' not null, -- examples: `Hamilton`, `Lewis`
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, -- description: lap time value description: in minutes / seconds / ...
	primary key (raceId, driverId, lap),
	foreign key (driverId) references drivers(driverId),
);"
1011,"CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, -- description: lap time value description: in minutes / seconds / ...
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, --
	surname TEXT default '' not null, -- examples: `Driver`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, --
);"
1012,"CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	fastestLap INTEGER, -- `fastest lap` description: fastest lap number
	fastestLapTime TEXT, -- `fastest Lap Time` description: fastest Lap Time value description: faster (smaller in the value) ""fastestLapTime"" leads to higher rank (smaller is higher rank)
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Lewis`
	surname TEXT default '' not null, -- examples: `Hamilton`, `Lewis`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	name TEXT default '' not null, --
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	position INTEGER, --
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
1013,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- examples: `Suzuka Circuit`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Austrian Grand Prix`
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, -- description: lap time value description: in minutes / seconds / ...
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
);"
1014,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	name TEXT default '' not null, --
	country TEXT, -- examples: `Italy`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, -- description: lap time value description: in minutes / seconds / ...
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
);"
1015,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- examples: `Suzuka Circuit`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, -- description: lap time value description: in minutes / seconds / ...
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
);"
1016,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- examples: `Austrian Grand Prix`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	fastestLapTime TEXT, -- `fastest Lap Time` description: fastest Lap Time value description: faster (smaller in the value) ""fastestLapTime"" leads to higher rank (smaller is higher rank)
	foreign key (raceId) references races(raceId),
);

CREATE TABLE pitStops
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	stop INTEGER not null, --
	lap INTEGER not null, --
	duration TEXT, --
	primary key (raceId, driverId, stop),
	foreign key (raceId) references races(raceId),
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, -- description: lap time value description: in minutes / seconds / ...
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
);"
1017,"CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, -- description: lap time value description: in minutes / seconds / ...
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	location TEXT, --
	lat REAL, -- `latitude` description: latitude of location of circuit
	lng REAL, -- `longitude` description: longitude of location of circuit value description: Location coordinates: (lat, lng)
);"
1018,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Lewis`
	surname TEXT default '' not null, -- examples: `Hamilton`, `Lewis`
);

CREATE TABLE pitStops
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	stop INTEGER not null, --
	time TEXT not null, --
	milliseconds INTEGER, -- description: milliseconds
	primary key (raceId, driverId, stop),
	foreign key (driverId) references drivers(driverId),
);"
1019,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	country TEXT, -- examples: `Italy`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, -- `Circuit Id` description: circuit Id
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, -- description: lap time value description: in minutes / seconds / ...
	milliseconds INTEGER, -- description: milliseconds
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
);"
846,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, --
);

CREATE TABLE qualifying
(
	qualifyId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	q1 TEXT, -- `qualifying 1` description: time in qualifying 1 value description: in minutes / seconds / ...    Q1 lap times determine pole position and the order of the front 10 positions on the grid. The slowest driver in Q1 starts 10th, the next starts ninth and so on.  All 20 F1 drivers participate in the first period, called Q1, with each trying to set the fastest time possible. Those in the top 15 move on to the next period of qualifying, called Q2. The five slowest drivers are eliminated and will start the race in the last five positions on the grid.
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	driverRef TEXT default '' not null, -- examples: `driver`
	number INTEGER, --
);"
847,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
);

CREATE TABLE qualifying
(
	qualifyId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	number INTEGER default 0 not null, --
	q2 TEXT, -- `qualifying 2` description: time in qualifying 2 value description: in minutes / seconds / ...    only top 15 in the q1 has the record of q2  Q2 is slightly shorter but follows the same format. Drivers try to put down their best times to move on to Q1 as one of the 10 fastest cars. The five outside of the top 10 are eliminated and start the race from 11th to 15th based on their best lap time.
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	surname TEXT default '' not null, -- examples: `Driver`
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, --
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
848,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	location TEXT, -- examples: `Shanghai`| description: location of circuit
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
	circuitId INTEGER default 0 not null, --
	foreign key (circuitId) references circuits(circuitId),
);"
849,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- examples: `Circuit de Barcelona-Catalunya`| description: full name of circuit
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	url TEXT unique, -- description: introduction of races
	foreign key (circuitId) references circuits(circuitId),
);"
850,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	country TEXT, -- examples: `Germany`| description: country of circuit
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	name TEXT default '' not null, -- description: name of the race
	foreign key (circuitId) references circuits(circuitId),
);"
851,"CREATE TABLE constructors
(
	constructorId INTEGER primary key autoincrement,
	name TEXT default '' not null unique, -- examples: `Renault`| description: full name of the constructor
);

CREATE TABLE constructorResults
(
	constructorResultsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	constructorId INTEGER default 0 not null, --
	foreign key (raceId) references races(raceId),
	foreign key (constructorId) references constructors(constructorId),
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
);

CREATE TABLE constructorStandings
(
	constructorStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	constructorId INTEGER default 0 not null, --
	position INTEGER, -- description: position or track of circuits
	foreign key (raceId) references races(raceId),
	foreign key (constructorId) references constructors(constructorId),
);"
852,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
	circuitId INTEGER default 0 not null, --
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	location TEXT, -- description: location of circuit
);"
853,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	country TEXT, -- examples: `Spain`| description: country of circuit
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	name TEXT default '' not null, -- description: name of the race
	foreign key (circuitId) references circuits(circuitId),
);"
854,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	circuitId INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Australian Grand Prix`
	foreign key (year) references seasons(year),
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	location TEXT, -- description: location of circuit
	lat REAL, -- `latitude` description: latitude of location of circuit
	lng REAL, -- `longitude` description: longitude of location of circuit value description: Location coordinates: (lat, lng)
);

CREATE TABLE seasons
(
	year INTEGER default 0 not null primary key,
);"
855,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	circuitRef TEXT default '' not null, -- examples: `sepang`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	url TEXT unique, -- description: introduction of races
	foreign key (circuitId) references circuits(circuitId),
);"
856,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- examples: `Sepang International Circuit`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	time TEXT, -- description: time of the location
	foreign key (circuitId) references circuits(circuitId),
);"
857,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	location TEXT, -- examples: `Abu Dhabi`
	lat REAL, -- `latitude` description: latitude of location of circuit
	lng REAL, -- `longitude` description: longitude of location of circuit value description: Location coordinates: (lat, lng)
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Abu Dhabi Grand Prix`
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	position INTEGER, --
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
);"
858,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE constructorResults
(
	constructorResultsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	constructorId INTEGER default 0 not null, --
	points REAL, --
	foreign key (raceId) references races(raceId),
	foreign key (constructorId) references constructors(constructorId),
);

CREATE TABLE constructors
(
	constructorId INTEGER primary key autoincrement,
	nationality TEXT, -- description: nationality of the constructor
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	country TEXT, -- description: country of circuit
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race ID` description: the identification number identifying the race
	constructorId INTEGER default 0 not null, --
	foreign key (raceId) references races(raceId),
	foreign key (constructorId) references constructors(constructorId),
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `constructor Reference name` description: id number identifying which races
	points REAL default 0 not null, -- description: how many points acquired in each race
	foreign key (raceId) references races(raceId),
);"
859,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Bruno`
	surname TEXT default '' not null, -- examples: `Senna`
);

CREATE TABLE qualifying
(
	qualifyId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race Id` description: the identification number identifying each race
	driverId INTEGER default 0 not null, --
	q1 TEXT, -- `qualifying 1` description: time in qualifying 1 value description: in minutes / seconds / ...    Q1 lap times determine pole position and the order of the front 10 positions on the grid. The slowest driver in Q1 starts 10th, the next starts ninth and so on.  All 20 F1 drivers participate in the first period, called Q1, with each trying to set the fastest time possible. Those in the top 15 move on to the next period of qualifying, called Q2. The five slowest drivers are eliminated and will start the race in the last five positions on the grid.
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
);"
860,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	time TEXT, --
);

CREATE TABLE qualifying
(
	qualifyId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race Id` description: the identification number identifying each race
	driverId INTEGER default 0 not null, --
	number INTEGER default 0 not null, --
	q2 TEXT, -- examples: `1:40.781`| `qualifying 2` description: time in qualifying 2 value description: in minutes / seconds / ...    only top 15 in the q1 has the record of q2  Q2 is slightly shorter but follows the same format. Drivers try to put down their best times to move on to Q1 as one of the 10 fastest cars. The five outside of the top 10 are eliminated and start the race from 11th to 15th based on their best lap time.
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	nationality TEXT, -- description: nationality of drivers
);"
861,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
);

CREATE TABLE qualifying
(
	qualifyId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race Id` description: the identification number identifying each race
	driverId INTEGER default 0 not null, --
	q3 TEXT, -- examples: `1:54.242`| `qualifying 3` description: time in qualifying 3 value description: in minutes / seconds / ...    only top 10 in the q2 has the record of q3
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	number INTEGER, --
);"
862,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Bahrain Grand Prix`
	time TEXT, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	time TEXT, -- description: finish time value description: 1. if the value exists, it means the driver finished the race.  2. Only the time of the champion shows in the format of ""minutes: seconds.millionsecond"", the time of the other drivers shows as ""seconds.millionsecond"" , which means their actual time is the time of the champion adding the value in this cell.
	foreign key (raceId) references races(raceId),
);"
863,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	foreign key (year) references seasons(year),
);

CREATE TABLE seasons
(
	year INTEGER default 0 not null primary key,
	url TEXT default '' not null unique, -- description: website link of season race introduction
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, -- `race ID` description: the identification number identifying race
	driverId INTEGER not null, --
	lap INTEGER not null, --
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
);"
864,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	date DATE default '0000-00-00' not null, -- examples: `2009-04-26`
	time TEXT, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	time TEXT, -- description: finish time value description: 1. if the value exists, it means the driver finished the race.  2. Only the time of the champion shows in the format of ""minutes: seconds.millionsecond"", the time of the other drivers shows as ""seconds.millionsecond"" , which means their actual time is the time of the champion adding the value in this cell.
	foreign key (raceId) references races(raceId),
);"
865,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	time TEXT, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	time TEXT, -- description: finish time value description: 1. if the value exists, it means the driver finished the race.  2. Only the time of the champion shows in the format of ""minutes: seconds.millionsecond"", the time of the other drivers shows as ""seconds.millionsecond"" , which means their actual time is the time of the champion adding the value in this cell.
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	dob DATE, -- examples: `1981-10-19`
);"
866,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	url TEXT unique, --
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, -- `driver ID` description: the identification number identifying each driver
	lap INTEGER not null, --
	time TEXT, -- description: lap time value description: in minutes / seconds / ...
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	url TEXT default '' not null unique, -- description: the introduction website of the drivers
);"
867,"CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	fastestLapSpeed TEXT, -- examples: `178.933`| `fastest Lap Speed` description: fastest Lap Speed value description: (km / h)
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	nationality TEXT, -- description: nationality of drivers
);"
868,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Malaysian Grand Prix`
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	location TEXT, -- description: location of circuit
	lat REAL, -- `latitude` description: latitude of location of circuit
	lng REAL, -- `longitude` description: longitude of location of circuit value description: Location coordinates: (lat, lng)
);"
869,"CREATE TABLE constructorStandings
(
	constructorStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race id` description: id number identifying which races
	constructorId INTEGER default 0 not null, --
	points REAL default 0 not null, -- description: how many points acquired in each race
	foreign key (raceId) references races(raceId),
	foreign key (constructorId) references constructors(constructorId),
);

CREATE TABLE constructors
(
	constructorId INTEGER primary key autoincrement,
	url TEXT default '' not null, -- description: the introduction website of the constructor value description: How to find out the detailed introduction of the constructor: through its url
);

CREATE TABLE constructorResults
(
	constructorResultsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race Id` description: race id
	constructorId INTEGER default 0 not null, --
	foreign key (raceId) references races(raceId),
	foreign key (constructorId) references constructors(constructorId),
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	url TEXT unique, --
);"
870,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Lucas`
	surname TEXT default '' not null, -- examples: `Lucas`, `di Grassi`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
);

CREATE TABLE qualifying
(
	qualifyId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race Id` description: the identification number identifying each race
	driverId INTEGER default 0 not null, --
	q1 TEXT, -- `qualifying 1` description: time in qualifying 1 value description: in minutes / seconds / ...    Q1 lap times determine pole position and the order of the front 10 positions on the grid. The slowest driver in Q1 starts 10th, the next starts ninth and so on.  All 20 F1 drivers participate in the first period, called Q1, with each trying to set the fastest time possible. Those in the top 15 move on to the next period of qualifying, called Q2. The five slowest drivers are eliminated and will start the race in the last five positions on the grid.
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, -- `race ID` description: the identification number identifying race
	driverId INTEGER not null, --
	lap INTEGER not null, --
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
871,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	time TEXT, --
);

CREATE TABLE qualifying
(
	qualifyId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race Id` description: the identification number identifying each race
	driverId INTEGER default 0 not null, --
	q2 TEXT, -- examples: `1:15.161`| `qualifying 2` description: time in qualifying 2 value description: in minutes / seconds / ...    only top 15 in the q1 has the record of q2  Q2 is slightly shorter but follows the same format. Drivers try to put down their best times to move on to Q1 as one of the 10 fastest cars. The five outside of the top 10 are eliminated and start the race from 11th to 15th based on their best lap time.
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	nationality TEXT, -- description: nationality of drivers
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, -- `race ID` description: the identification number identifying race
	driverId INTEGER not null, --
	lap INTEGER not null, --
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
872,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	time TEXT, --
);

CREATE TABLE qualifying
(
	qualifyId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race Id` description: the identification number identifying each race
	driverId INTEGER default 0 not null, --
	q3 TEXT, -- examples: `1:33.744`| `qualifying 3` description: time in qualifying 3 value description: in minutes / seconds / ...    only top 10 in the q2 has the record of q3
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	code TEXT, -- description: abbreviated code for drivers value description: if ""null"" or empty, it means it doesn't have code
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, -- `race ID` description: the identification number identifying race
	driverId INTEGER not null, --
	lap INTEGER not null, --
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
873,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	time TEXT, --
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Bruce`
	surname TEXT default '' not null, -- examples: `McLaren`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race ID` description: the identification number identifying the race
	driverId INTEGER default 0 not null, --
	milliseconds INTEGER, -- description: the actual finishing time of drivers in milliseconds value description: the actual finishing time of drivers
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, -- `race ID` description: the identification number identifying race
	driverId INTEGER not null, --
	lap INTEGER not null, --
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
874,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `San Marino Grand Prix`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	position INTEGER, -- description: The finishing position or track of circuits
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, --
	surname TEXT default '' not null, --
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	position INTEGER, --
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
875,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	foreign key (year) references seasons(year),
);

CREATE TABLE seasons
(
	year INTEGER default 0 not null primary key,
	url TEXT default '' not null unique, -- description: website link of season race introduction
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, -- `race ID` description: the identification number identifying race
	driverId INTEGER not null, --
	lap INTEGER not null, --
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
);"
876,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	date DATE default '0000-00-00' not null, -- examples: `2009-04-26`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	statusId INTEGER default 0 not null, --
	foreign key (raceId) references races(raceId),
	foreign key (statusId) references status(statusId),
);

CREATE TABLE status
(
	statusId INTEGER primary key autoincrement,
	status TEXT default '' not null, -- examples: `Finished`
);"
877,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	time TEXT, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	time TEXT, -- description: finish time value description: 1. if the value exists, it means the driver finished the race.  2. Only the time of the champion shows in the format of ""minutes: seconds.millionsecond"", the time of the other drivers shows as ""seconds.millionsecond"" , which means their actual time is the time of the champion adding the value in this cell.
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	dob DATE, -- examples: `1979-02-28`
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `constructor Reference name` description: id number identifying which races
	driverId INTEGER default 0 not null, --
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
878,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, --
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, -- description: lap time value description: in minutes / seconds / ...
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, --
	surname TEXT default '' not null, -- examples: `Driver`
);"
879,"CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	fastestLapSpeed TEXT, -- `fastest Lap Speed` description: fastest Lap Speed value description: (km / h)
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	nationality TEXT, -- description: nationality of drivers
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	primary key (raceId, driverId, lap),
	foreign key (driverId) references drivers(driverId),
);"
880,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Paul`
	surname TEXT default '' not null, -- examples: `Speed`, `di Resta`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	fastestLapSpeed TEXT, -- examples: `231.853`| `fastest Lap Speed` description: fastest Lap Speed value description: (km / h)
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	primary key (raceId, driverId, lap),
	foreign key (driverId) references drivers(driverId),
);"
881,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	date DATE default '0000-00-00' not null, -- examples: `2009-05-24`
	time TEXT, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, -- `driver ID` description: the identification number identifying the driver
	time TEXT, -- description: finish time value description: 1. if the value exists, it means the driver finished the race.  2. Only the time of the champion shows in the format of ""minutes: seconds.millionsecond"", the time of the other drivers shows as ""seconds.millionsecond"" , which means their actual time is the time of the champion adding the value in this cell.
	foreign key (raceId) references races(raceId),
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, -- description: id number identifying which drivers
	foreign key (raceId) references races(raceId),
);"
882,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Singapore Grand Prix`| description: name of the race
);"
883,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
	name TEXT default '' not null, -- description: name of the race
);"
884,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	date DATE default '0000-00-00' not null, -- examples: `2009-04-19`
);"
885,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	round INTEGER default 0 not null, -- description: round
	name TEXT default '' not null, -- description: name of the race
	date DATE default '0000-00-00' not null, -- examples: `2009-06-07`
);"
886,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	round INTEGER default 0 not null, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	number INTEGER, --
	foreign key (raceId) references races(raceId),
);"
887,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
	circuitId INTEGER default 0 not null, --
	name TEXT default '' not null, -- description: name of the race
);"
888,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
	circuitId INTEGER default 0 not null, -- `Circuit Id` description: circuit Id
	name TEXT default '' not null, -- examples: `European Grand Prix`
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- description: full name of circuit
	location TEXT, -- description: location of circuit
	country TEXT, -- description: country of circuit
);"
889,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
	circuitId INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `British Grand Prix`
	foreign key (year) references seasons(year),
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- examples: `Brands Hatch`
);

CREATE TABLE seasons
(
	year INTEGER default 0 not null primary key,
);"
890,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	circuitRef TEXT default '' not null, -- examples: `silverstone`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	circuitId INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `British Grand Prix`| description: name of the race
	foreign key (circuitId) references circuits(circuitId),
);"
891,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, --
	surname TEXT default '' not null, -- examples: `Driver`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, -- `driver ID` description: the identification number identifying the driver
	positionOrder INTEGER default 0 not null, -- `position order` description: the finishing order of positions
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Singapore Grand Prix`
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	position INTEGER, --
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
892,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- description: forename
	surname TEXT default '' not null, -- examples: `Driver`| description: surname
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	points REAL default 0 not null, -- description: how many points acquired in each race
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, --
);"
893,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Chinese Grand Prix`
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, --
	surname TEXT default '' not null, -- examples: `Driver`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	points REAL default 0 not null, -- description: points
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	points REAL default 0 not null, -- description: how many points acquired in each race
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
894,"CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, -- description: lap time value description: in minutes / seconds / ...
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, --
	surname TEXT default '' not null, -- examples: `Driver`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, --
	date DATE default '0000-00-00' not null, -- examples: `2009-07-26`
);"
895,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Sebastian`
	surname TEXT default '' not null, -- examples: `Vettel`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Chinese Grand Prix`
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, -- description: lap time value description: in minutes / seconds / ...
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
896,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	surname TEXT default '' not null, -- examples: `Hamilton`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	position INTEGER, -- description: The finishing position or track of circuits
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `constructor Reference name` description: id number identifying which races
	driverId INTEGER default 0 not null, --
	position INTEGER, --
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
897,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, --
	surname TEXT default '' not null, -- examples: `Driver`
	nationality TEXT, -- description: nationality of drivers
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	driverId INTEGER default 0 not null, --
	points REAL default 0 not null, -- description: how many points acquired in each race
	wins INTEGER default 0 not null, -- description: wins
	foreign key (driverId) references drivers(driverId),
);"
898,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, --
	surname TEXT default '' not null, -- examples: `Driver`
	dob DATE, -- examples: `1979-02-28`| `date of birth` description: date of birth
	nationality TEXT, -- examples: `Japanese`| description: nationality of drivers
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, --
);"
899,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
	circuitId INTEGER default 0 not null, --
	date DATE default '0000-00-00' not null, -- examples: `2009-07-26`
);"
900,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
	circuitId INTEGER default 0 not null, -- `Circuit Id` description: circuit Id
	name TEXT default '' not null, -- description: name of the race
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- description: full name of circuit
	location TEXT, -- description: location of circuit
	country TEXT, -- examples: `USA`| description: country of circuit
);"
901,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
	circuitId INTEGER default 0 not null, -- `Circuit Id` description: circuit Id
	name TEXT default '' not null, -- description: name of the race
	date DATE default '0000-00-00' not null, -- examples: `2009-06-21`
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- description: full name of circuit
	location TEXT, -- description: location of circuit
);"
902,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Alex`
	surname TEXT default '' not null, -- examples: `Yoong`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race ID` description: the identification number identifying the race
	driverId INTEGER default 0 not null, --
	position INTEGER, -- description: The finishing position or track of circuits
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- description: name of the race
);

CREATE TABLE qualifying
(
	qualifyId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race Id` description: the identification number identifying each race
	driverId INTEGER default 0 not null, --
	number INTEGER default 0 not null, --
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	position INTEGER, -- description: position or track of circuits
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
903,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- examples: `Sepang International Circuit`
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Michael`
	surname TEXT default '' not null, -- examples: `Schumacher`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	points REAL default 0 not null, --
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
904,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Michael`
	surname TEXT default '' not null, -- examples: `Schumacher`
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	milliseconds INTEGER, --
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	fastestLap INTEGER, -- `fastest lap` description: fastest lap number
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
905,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	driverRef TEXT default '' not null, -- examples: `irvine`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	points REAL default 0 not null, -- description: points
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	points REAL default 0 not null, -- description: how many points acquired in each race
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
906,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Lewis`
	surname TEXT default '' not null, -- examples: `Hamilton`, `Lewis`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	points REAL default 0 not null, --
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `constructor Reference name` description: id number identifying which races
	driverId INTEGER default 0 not null, --
	points REAL default 0 not null, -- description: how many points acquired in each race
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
907,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
	circuitId INTEGER default 0 not null, --
	date DATE default '0000-00-00' not null, -- examples: `2009-03-29`
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	country TEXT, -- description: country of circuit
);"
908,"CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	laps INTEGER default 0 not null, -- description: lap number
	foreign key (raceId) references races(raceId),
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
	circuitId INTEGER default 0 not null, --
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	location TEXT, -- description: location of circuit
);"
909,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `European Grand Prix`| description: name of the race
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	country TEXT, -- examples: `Germany`| description: country of circuit
);"
910,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- examples: `Silverstone Circuit`
	location TEXT, -- examples: `Silverstone`| description: location of circuit
	lat REAL, -- `latitude` description: latitude of location of circuit
	lng REAL, -- `longitude` description: longitude of location of circuit value description: Location coordinates: (lat, lng)
);"
911,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- examples: `Hungaroring`, `Silverstone Circuit`, `Hockenheimring`
	lat REAL, -- `latitude` description: latitude of location of circuit
);"
912,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	circuitRef TEXT default '' not null, -- examples: `marina_bay`| `circuit reference name` description: circuit reference name
	name TEXT default '' not null, -- examples: `Marina Bay Street Circuit`| description: full name of circuit
);"
913,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	country TEXT, -- description: country of circuit
	alt INTEGER, --
);"
914,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	code TEXT, -- description: abbreviated code for drivers value description: if ""null"" or empty, it means it doesn't have code
);"
915,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	dob DATE, -- examples: `1981-10-19`| `date of birth` description: date of birth
	nationality TEXT, -- description: nationality of drivers
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	country TEXT, -- description: country of circuit
);"
916,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	surname TEXT default '' not null, -- examples: `Driver`| description: surname
	nationality TEXT, -- examples: `Italian`| description: nationality of drivers
);"
917,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Anthony`
	surname TEXT default '' not null, -- examples: `Davidson`
	url TEXT default '' not null unique, -- description: the introduction website of the drivers
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	url TEXT unique, --
);"
918,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	driverRef TEXT default '' not null, -- examples: `lewis`, `hamilton`| `driver reference name` description: driver reference name
	forename TEXT default '' not null, -- examples: `Lewis`
	surname TEXT default '' not null, -- examples: `Hamilton`, `Lewis`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, --
);"
919,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
	circuitId INTEGER default 0 not null, -- `Circuit Id` description: circuit Id
	name TEXT default '' not null, -- examples: `Spanish Grand Prix`
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- description: full name of circuit
);"
920,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- examples: `Silverstone Circuit`| description: full name of circuit
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
	circuitId INTEGER default 0 not null, --
	foreign key (circuitId) references circuits(circuitId),
);"
921,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	circuitRef TEXT default '' not null, -- examples: `silverstone`
	name TEXT default '' not null, -- examples: `Silverstone Circuit`| description: full name of circuit
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	url TEXT unique, -- description: introduction of races
	foreign key (circuitId) references circuits(circuitId),
);"
922,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- examples: `Baku City Circuit`| description: full name of circuit
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
	circuitId INTEGER default 0 not null, -- `Circuit Id` description: circuit Id
	time TEXT, -- description: time of the location
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	foreign key (raceId) references races(raceId),
);"
923,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	country TEXT, -- examples: `Italy`| description: country of circuit
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, -- `Circuit Id` description: circuit Id
	foreign key (circuitId) references circuits(circuitId),
);"
924,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	circuitRef TEXT default '' not null, -- examples: `catalunya`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	circuitId INTEGER default 0 not null, --
	date DATE default '0000-00-00' not null, -- examples: `2009-05-24`
	foreign key (circuitId) references circuits(circuitId),
);"
925,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	circuitId INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Spanish Grand Prix`
	foreign key (circuitId) references circuits(circuitId),
);

CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	url TEXT default '' not null unique, -- description: url
);"
926,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Lewis`
	surname TEXT default '' not null, -- examples: `Hamilton`, `Lewis`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	driverId INTEGER default 0 not null, --
	fastestLapTime TEXT, -- `fastest Lap Time` description: fastest Lap Time value description: faster (smaller in the value) ""fastestLapTime"" leads to higher rank (smaller is higher rank)
	foreign key (driverId) references drivers(driverId),
);"
927,"CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	driverId INTEGER default 0 not null, -- `driver ID` description: the identification number identifying the driver
	fastestLapSpeed TEXT, -- `fastest Lap Speed` description: fastest Lap Speed value description: (km / h)
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- description: forename
	surname TEXT default '' not null, -- examples: `Speed`, `Driver`| description: surname
);"
928,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Australian Grand Prix`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, -- `driver ID` description: the identification number identifying the driver
	position INTEGER, --
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	driverRef TEXT default '' not null, -- examples: `driver`| `driver reference name` description: driver reference name
);"
929,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Lewis`
	surname TEXT default '' not null, -- examples: `Hamilton`, `Lewis`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, --
);"
930,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Lewis`
	surname TEXT default '' not null, -- examples: `Hamilton`, `Lewis`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	rank INTEGER default 0, -- description: starting rank positioned by fastest lap speed
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, --
);"
931,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- examples: `Spanish Grand Prix`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	fastestLapSpeed TEXT, -- `fastest Lap Speed` description: fastest Lap Speed value description: (km / h)
	foreign key (raceId) references races(raceId),
);"
932,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	driverRef TEXT default '' not null, -- examples: `lewis`, `hamilton`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
933,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Lewis`
	surname TEXT default '' not null, -- examples: `Hamilton`, `Lewis`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Australian Grand Prix`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	positionOrder INTEGER default 0 not null, -- `position order` description: the finishing order of positions
	rank INTEGER default 0, -- description: starting rank positioned by fastest lap speed
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
934,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Australian Grand Prix`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, -- `driver ID` description: the identification number identifying the driver
	grid INTEGER default 0 not null, -- description: the number identifying the area where cars are set into a grid formation in order to start the race.
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- description: forename
	surname TEXT default '' not null, -- examples: `Driver`| description: surname
);"
935,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Australian Grand Prix`
	time TEXT, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	time TEXT, -- description: finish time value description: 1. if the value exists, it means the driver finished the race.  2. Only the time of the champion shows in the format of ""minutes: seconds.millionsecond"", the time of the other drivers shows as ""seconds.millionsecond"" , which means their actual time is the time of the champion adding the value in this cell.
	foreign key (raceId) references races(raceId),
);"
936,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Lewis`
	surname TEXT default '' not null, -- examples: `Hamilton`, `Lewis`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
	name TEXT default '' not null, -- examples: `Australian Grand Prix`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	fastestLap INTEGER, -- `fastest lap` description: fastest lap number
	fastestLapTime TEXT, -- `fastest Lap Time` description: fastest Lap Time value description: faster (smaller in the value) ""fastestLapTime"" leads to higher rank (smaller is higher rank)
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
937,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Australian Grand Prix`
	time TEXT, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	position INTEGER, --
	time TEXT, -- description: finish time value description: 1. if the value exists, it means the driver finished the race.  2. Only the time of the champion shows in the format of ""minutes: seconds.millionsecond"", the time of the other drivers shows as ""seconds.millionsecond"" , which means their actual time is the time of the champion adding the value in this cell.
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
);"
938,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Australian Grand Prix`
	time TEXT, --
	url TEXT unique, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	time TEXT, -- description: finish time value description: 1. if the value exists, it means the driver finished the race.  2. Only the time of the champion shows in the format of ""minutes: seconds.millionsecond"", the time of the other drivers shows as ""seconds.millionsecond"" , which means their actual time is the time of the champion adding the value in this cell.
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	url TEXT default '' not null unique, --
);"
939,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	nationality TEXT, -- examples: `American`| description: nationality of drivers
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Australian Grand Prix`| description: name of the race
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, -- `driver ID` description: the identification number identifying the driver
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
940,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Australian Grand Prix`
	time TEXT, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race ID` description: the identification number identifying the race
	driverId INTEGER default 0 not null, --
	time TEXT, -- description: finish time value description: 1. if the value exists, it means the driver finished the race.  2. Only the time of the champion shows in the format of ""minutes: seconds.millionsecond"", the time of the other drivers shows as ""seconds.millionsecond"" , which means their actual time is the time of the champion adding the value in this cell.
	foreign key (raceId) references races(raceId),
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `constructor Reference name` description: id number identifying which races
	foreign key (raceId) references races(raceId),
);"
941,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Lewis`
	surname TEXT default '' not null, -- examples: `Hamilton`, `Lewis`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	points REAL default 0 not null, -- description: points
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	driverId INTEGER default 0 not null, --
	points REAL default 0 not null, -- description: how many points acquired in each race
	foreign key (driverId) references drivers(driverId),
);"
942,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Lewis`
	surname TEXT default '' not null, -- examples: `Hamilton`, `Lewis`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	fastestLapTime TEXT, -- `fastest Lap Time` description: fastest Lap Time value description: faster (smaller in the value) ""fastestLapTime"" leads to higher rank (smaller is higher rank)
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, --
	primary key (raceId, driverId, lap),
	foreign key (driverId) references drivers(driverId),
);"
943,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Australian Grand Prix`
	time TEXT, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	time TEXT, -- description: finish time value description: 1. if the value exists, it means the driver finished the race.  2. Only the time of the champion shows in the format of ""minutes: seconds.millionsecond"", the time of the other drivers shows as ""seconds.millionsecond"" , which means their actual time is the time of the champion adding the value in this cell.
	foreign key (raceId) references races(raceId),
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, -- description: lap number
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
);"
944,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Australian Grand Prix`
	time TEXT, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	position INTEGER, --
	time TEXT, -- description: finish time value description: 1. if the value exists, it means the driver finished the race.  2. Only the time of the champion shows in the format of ""minutes: seconds.millionsecond"", the time of the other drivers shows as ""seconds.millionsecond"" , which means their actual time is the time of the champion adding the value in this cell.
	foreign key (raceId) references races(raceId),
);"
945,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	location TEXT, -- description: location of circuit
	country TEXT, -- examples: `Australia`| description: country of circuit
);"
946,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	location TEXT, -- description: location of circuit
	country TEXT, -- examples: `USA`| description: country of circuit
	lat REAL, -- `latitude` description: latitude of location of circuit
	lng REAL, -- `longitude` description: longitude of location of circuit value description: Location coordinates: (lat, lng)
);"
947,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	dob DATE, -- examples: `1984-12-07`| `date of birth` description: date of birth
	nationality TEXT, -- examples: `British`| description: nationality of drivers
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
);"
948,"CREATE TABLE constructors
(
	constructorId INTEGER primary key autoincrement,
	nationality TEXT, -- examples: `British`| description: nationality of the constructor
);

CREATE TABLE constructorStandings
(
	constructorStandingsId INTEGER primary key autoincrement,
	constructorId INTEGER default 0 not null, --
	points REAL default 0 not null, -- description: how many points acquired in each race
	foreign key (constructorId) references constructors(constructorId),
);"
949,"CREATE TABLE constructorStandings
(
	constructorStandingsId INTEGER primary key autoincrement,
	constructorId INTEGER default 0 not null, -- `constructor id` description: id number identifying which id
	points REAL default 0 not null, --
	foreign key (constructorId) references constructors(constructorId),
);

CREATE TABLE constructors
(
	constructorId INTEGER primary key autoincrement,
	name TEXT default '' not null unique, -- description: full name of the constructor
);

CREATE TABLE constructorResults
(
	constructorResultsId INTEGER primary key autoincrement,
	constructorId INTEGER default 0 not null, -- `constructor Id` description: constructor id
	points REAL, -- description: points
	foreign key (constructorId) references constructors(constructorId),
);"
950,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- description: name of the race
);

CREATE TABLE constructorResults
(
	constructorResultsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race Id` description: race id
	constructorId INTEGER default 0 not null, --
	points REAL, --
	foreign key (raceId) references races(raceId),
	foreign key (constructorId) references constructors(constructorId),
);

CREATE TABLE constructors
(
	constructorId INTEGER primary key autoincrement,
	name TEXT default '' not null unique, -- description: full name of the constructor
);

CREATE TABLE constructorStandings
(
	constructorStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race id` description: id number identifying which races
	constructorId INTEGER default 0 not null, --
	foreign key (raceId) references races(raceId),
	foreign key (constructorId) references constructors(constructorId),
);"
951,"CREATE TABLE constructors
(
	constructorId INTEGER primary key autoincrement,
	nationality TEXT, -- examples: `Japanese`
);

CREATE TABLE constructorResults
(
	constructorResultsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	constructorId INTEGER default 0 not null, --
	points REAL, --
	foreign key (constructorId) references constructors(constructorId),
);

CREATE TABLE constructorStandings
(
	constructorStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race id` description: id number identifying which races
	constructorId INTEGER default 0 not null, --
	foreign key (constructorId) references constructors(constructorId),
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	points REAL default 0 not null, -- description: how many points acquired in each race
);"
952,"CREATE TABLE constructorStandings
(
	constructorStandingsId INTEGER primary key autoincrement,
	constructorId INTEGER default 0 not null, -- `constructor id` description: id number identifying which id
	position INTEGER, --
	foreign key (constructorId) references constructors(constructorId),
);

CREATE TABLE constructors
(
	constructorId INTEGER primary key autoincrement,
);"
953,"CREATE TABLE constructors
(
	constructorId INTEGER primary key autoincrement,
	nationality TEXT, -- examples: `French`| description: nationality of the constructor
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	constructorId INTEGER default 0 not null, -- `constructor Id` description: the identification number identifying which constructors
	laps INTEGER default 0 not null, -- description: lap number
	foreign key (constructorId) references constructors(constructorId),
);

CREATE TABLE qualifying
(
	qualifyId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	constructorId INTEGER default 0 not null, --
	foreign key (constructorId) references constructors(constructorId),
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, -- description: lap number
	primary key (raceId, driverId, lap),
);"
954,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	time TEXT, --
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	nationality TEXT, -- examples: `Japanese`| description: nationality of drivers
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	time TEXT, -- description: finish time value description: 1. if the value exists, it means the driver finished the race.  2. Only the time of the champion shows in the format of ""minutes: seconds.millionsecond"", the time of the other drivers shows as ""seconds.millionsecond"" , which means their actual time is the time of the champion adding the value in this cell.
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
955,"CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	time TEXT, -- description: finish time value description: 1. if the value exists, it means the driver finished the race.  2. Only the time of the champion shows in the format of ""minutes: seconds.millionsecond"", the time of the other drivers shows as ""seconds.millionsecond"" , which means their actual time is the time of the champion adding the value in this cell.
	foreign key (raceId) references races(raceId),
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	time TEXT, --
	foreign key (year) references seasons(year),
);

CREATE TABLE seasons
(
	year INTEGER default 0 not null primary key,
);"
956,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- description: forename
	surname TEXT default '' not null, -- examples: `Driver`| description: surname
	dob DATE, -- examples: `1979-10-17`| `date of birth` description: date of birth
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	driverId INTEGER default 0 not null, -- `driver ID` description: the identification number identifying the driver
	rank INTEGER default 0, -- description: starting rank positioned by fastest lap speed
	foreign key (driverId) references drivers(driverId),
);"
957,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	nationality TEXT, -- examples: `Italian`| description: nationality of drivers
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	time TEXT, -- description: finish time value description: 1. if the value exists, it means the driver finished the race.  2. Only the time of the champion shows in the format of ""minutes: seconds.millionsecond"", the time of the other drivers shows as ""seconds.millionsecond"" , which means their actual time is the time of the champion adding the value in this cell.
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	time TEXT, --
);"
958,"CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	driverId INTEGER default 0 not null, -- `driver ID` description: the identification number identifying the driver
	fastestLapTime TEXT, -- `fastest Lap Time` description: fastest Lap Time value description: faster (smaller in the value) ""fastestLapTime"" leads to higher rank (smaller is higher rank)
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- description: forename
	surname TEXT default '' not null, -- examples: `Driver`| description: surname
);"
959,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	time TEXT, -- description: finish time value description: 1. if the value exists, it means the driver finished the race.  2. Only the time of the champion shows in the format of ""minutes: seconds.millionsecond"", the time of the other drivers shows as ""seconds.millionsecond"" , which means their actual time is the time of the champion adding the value in this cell.
	fastestLap INTEGER, -- `fastest lap` description: fastest lap number
	foreign key (raceId) references races(raceId),
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	milliseconds INTEGER, --
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
);"
960,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Spanish Grand Prix`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	fastestLapSpeed TEXT, -- `fastest Lap Speed` description: fastest Lap Speed value description: (km / h)
	foreign key (raceId) references races(raceId),
);"
961,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- description: name of the race
	time TEXT, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	milliseconds INTEGER, -- description: the actual finishing time of drivers in milliseconds value description: the actual finishing time of drivers
	foreign key (raceId) references races(raceId),
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	milliseconds INTEGER, -- description: milliseconds
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
);"
962,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	dob DATE, -- examples: `1985-06-27`| `date of birth` description: date of birth
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	laps INTEGER default 0 not null, -- description: lap number
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, -- description: lap number
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
963,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	nationality TEXT, -- examples: `French`| description: nationality of drivers
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, -- description: lap time value description: in minutes / seconds / ...
	primary key (raceId, driverId, lap),
	foreign key (driverId) references drivers(driverId),
);"
964,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	code TEXT, -- description: abbreviated code for drivers value description: if ""null"" or empty, it means it doesn't have code
	nationality TEXT, -- examples: `American`| description: nationality of drivers
);"
965,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, -- description: year
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	number INTEGER, --
);"
966,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race ID` description: the identification number identifying the race
	driverId INTEGER default 0 not null, -- `driver ID` description: the identification number identifying the driver
	foreign key (raceId) references races(raceId),
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `constructor Reference name` description: id number identifying which races
	foreign key (raceId) references races(raceId),
);"
967,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	code TEXT, -- description: abbreviated code for drivers value description: if ""null"" or empty, it means it doesn't have code
	dob DATE, -- examples: `1981-10-19`| `date of birth` description: date of birth
	nationality TEXT, -- examples: `Dutch`| description: nationality of drivers
);"
968,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	driverRef TEXT default '' not null, -- examples: `kubica`| `driver reference name` description: driver reference name
	forename TEXT default '' not null, -- examples: `Robert`
	surname TEXT default '' not null, -- examples: `Kubica`
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, --
);"
969,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	dob DATE, -- examples: `1984-12-07`| `date of birth` description: date of birth
	nationality TEXT, -- examples: `Australian`| description: nationality of drivers
);"
970,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	dob DATE, -- examples: `1985-01-11`| `date of birth` description: date of birth
	nationality TEXT, -- examples: `German`| description: nationality of drivers
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, -- description: lap time value description: in minutes / seconds / ...
	primary key (raceId, driverId, lap),
	foreign key (driverId) references drivers(driverId),
);"
971,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	driverRef TEXT default '' not null, -- examples: `driver`| `driver reference name` description: driver reference name
	dob DATE, -- examples: `1979-02-28`| `date of birth` description: date of birth
	nationality TEXT, -- examples: `German`| description: nationality of drivers
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `German Grand Prix`
);"
972,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	code TEXT, --
	dob DATE, -- examples: `1979-10-17`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	driverId INTEGER default 0 not null, --
	fastestLapTime TEXT, -- `fastest Lap Time` description: fastest Lap Time value description: faster (smaller in the value) ""fastestLapTime"" leads to higher rank (smaller is higher rank)
	foreign key (driverId) references drivers(driverId),
);"
973,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	dob DATE, -- examples: `1981-07-29`| `date of birth` description: date of birth
	nationality TEXT, -- examples: `Spanish`| description: nationality of drivers
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, -- description: lap time value description: in minutes / seconds / ...
	primary key (raceId, driverId, lap),
	foreign key (driverId) references drivers(driverId),
);"
974,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	fastestLapTime TEXT, -- `fastest Lap Time` description: fastest Lap Time value description: faster (smaller in the value) ""fastestLapTime"" leads to higher rank (smaller is higher rank)
	foreign key (raceId) references races(raceId),
);"
975,"CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, --
	milliseconds INTEGER, --
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
);"
976,"CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, --
	milliseconds INTEGER, --
	primary key (raceId, driverId, lap),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, --
	surname TEXT default '' not null, -- examples: `Driver`
);"
977,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	time TEXT, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	time TEXT, --
	statusId INTEGER default 0 not null, --
	foreign key (raceId) references races(raceId),
	foreign key (statusId) references status(statusId),
);

CREATE TABLE qualifying
(
	qualifyId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	foreign key (raceId) references races(raceId),
);

CREATE TABLE status
(
	statusId INTEGER primary key autoincrement,
);"
978,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- description: full name of circuit
	location TEXT, -- description: location of circuit
	country TEXT, -- examples: `Austria`| description: country of circuit
	lat REAL, -- `latitude` description: latitude of location of circuit
	lng REAL, -- `longitude` description: longitude of location of circuit value description: Location coordinates: (lat, lng)
);"
979,"CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, -- `race ID` description: the identification number identifying the race
	number INTEGER, --
	time TEXT, -- description: finish time value description: 1. if the value exists, it means the driver finished the race.  2. Only the time of the champion shows in the format of ""minutes: seconds.millionsecond"", the time of the other drivers shows as ""seconds.millionsecond"" , which means their actual time is the time of the champion adding the value in this cell.
	foreign key (raceId) references races(raceId),
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	time TEXT, --
);"
980,"CREATE TABLE qualifying
(
	qualifyId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	q2 TEXT, -- `qualifying 2` description: time in qualifying 2 value description: in minutes / seconds / ...    only top 15 in the q1 has the record of q2  Q2 is slightly shorter but follows the same format. Drivers try to put down their best times to move on to Q1 as one of the 10 fastest cars. The five outside of the top 10 are eliminated and start the race from 11th to 15th based on their best lap time.
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	driverRef TEXT default '' not null, -- examples: `driver`
	dob DATE, -- examples: `1985-06-27`
	nationality TEXT, -- description: nationality of drivers
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, --
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);"
981,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- examples: `Max`
	surname TEXT default '' not null, -- examples: `Driver`
	dob DATE, -- examples: `1979-10-17`| `date of birth` description: date of birth
);

CREATE TABLE qualifying
(
	qualifyId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, --
	date DATE default '0000-00-00' not null, -- examples: `2009-07-26`
	time TEXT, --
);"
982,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	nationality TEXT, -- examples: `American`| description: nationality of drivers
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	driverId INTEGER default 0 not null, --
	statusId INTEGER default 0 not null, -- `status Id` description: status ID value description: its category description appear in the table status
	foreign key (driverId) references drivers(driverId),
	foreign key (statusId) references status(statusId),
);

CREATE TABLE status
(
	statusId INTEGER primary key autoincrement,
);"
983,"CREATE TABLE constructors
(
	constructorId INTEGER primary key autoincrement,
	nationality TEXT, -- examples: `Italian`| description: nationality of the constructor
	url TEXT default '' not null, -- description: the introduction website of the constructor value description: How to find out the detailed introduction of the constructor: through its url
);

CREATE TABLE constructorStandings
(
	constructorStandingsId INTEGER primary key autoincrement,
	constructorId INTEGER default 0 not null, --
	points REAL default 0 not null, -- description: how many points acquired in each race
	foreign key (constructorId) references constructors(constructorId),
);

CREATE TABLE qualifying
(
	qualifyId INTEGER primary key autoincrement,
	constructorId INTEGER default 0 not null, --
	foreign key (constructorId) references constructors(constructorId),
);

CREATE TABLE constructorResults
(
	constructorResultsId INTEGER primary key autoincrement,
	constructorId INTEGER default 0 not null, --
	points REAL, --
	foreign key (constructorId) references constructors(constructorId),
);"
984,"CREATE TABLE constructors
(
	constructorId INTEGER primary key autoincrement,
	name TEXT default '' not null unique, -- description: full name of the constructor
	url TEXT default '' not null, -- description: the introduction website of the constructor value description: How to find out the detailed introduction of the constructor: through its url
);

CREATE TABLE constructorStandings
(
	constructorStandingsId INTEGER primary key autoincrement,
	constructorId INTEGER default 0 not null, --
	wins INTEGER default 0 not null, -- description: wins
	foreign key (constructorId) references constructors(constructorId),
);"
985,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- examples: `French Grand Prix`
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, -- description: lap time value description: in minutes / seconds / ...
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, --
	surname TEXT default '' not null, -- examples: `Driver`
);"
986,"CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, --
	milliseconds INTEGER, --
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, --
);"
987,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `United States Grand Prix`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	rank INTEGER default 0, -- description: starting rank positioned by fastest lap speed
	fastestLapTime TEXT, -- `fastest Lap Time` description: fastest Lap Time value description: faster (smaller in the value) ""fastestLapTime"" leads to higher rank (smaller is higher rank)
	foreign key (raceId) references races(raceId),
);

CREATE TABLE lapTimes
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	lap INTEGER not null, --
	time TEXT, --
	primary key (raceId, driverId, lap),
	foreign key (raceId) references races(raceId),
);"
988,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	dob DATE, -- examples: `1985-01-11`| `date of birth` description: date of birth
	nationality TEXT, -- examples: `German`| description: nationality of drivers
);

CREATE TABLE pitStops
(
	raceId INTEGER not null, --
	driverId INTEGER not null, --
	stop INTEGER not null, --
	duration TEXT, -- description: duration time value description: seconds/
	primary key (raceId, driverId, stop),
	foreign key (driverId) references drivers(driverId),
);"
989,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Canadian Grand Prix`
	time TEXT, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	time TEXT, -- description: finish time value description: 1. if the value exists, it means the driver finished the race.  2. Only the time of the champion shows in the format of ""minutes: seconds.millionsecond"", the time of the other drivers shows as ""seconds.millionsecond"" , which means their actual time is the time of the champion adding the value in this cell.
	foreign key (raceId) references races(raceId),
	foreign key (driverId) references drivers(driverId),
);

CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, --
	surname TEXT default '' not null, --
);"
990,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Singapore Grand Prix`
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	driverId INTEGER default 0 not null, --
	constructorId INTEGER default 0 not null, --
	time TEXT, -- description: finish time value description: 1. if the value exists, it means the driver finished the race.  2. Only the time of the champion shows in the format of ""minutes: seconds.millionsecond"", the time of the other drivers shows as ""seconds.millionsecond"" , which means their actual time is the time of the champion adding the value in this cell.
	foreign key (raceId) references races(raceId),
	foreign key (constructorId) references constructors(constructorId),
);

CREATE TABLE constructors
(
	constructorId INTEGER primary key autoincrement,
	constructorRef TEXT default '' not null, -- `Constructor Reference name` description: Constructor Reference name
	url TEXT default '' not null, -- description: the introduction website of the constructor value description: How to find out the detailed introduction of the constructor: through its url
);"
991,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- description: forename
	surname TEXT default '' not null, -- examples: `Driver`| description: surname
	dob DATE, -- examples: `1981-07-29`| `date of birth` description: date of birth
	nationality TEXT, -- examples: `Austrian`| description: nationality of drivers
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, -- examples: `Austrian Grand Prix`
	date DATE default '0000-00-00' not null, -- examples: `2009-05-24`
);"
992,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	forename TEXT default '' not null, -- description: forename
	surname TEXT default '' not null, -- examples: `Driver`
	dob DATE, -- examples: `1985-06-27`| `date of birth` description: date of birth
	nationality TEXT, -- examples: `German`| description: nationality of drivers
	url TEXT default '' not null unique, --
);

CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, --
	date DATE default '0000-00-00' not null, -- examples: `2009-04-05`
);"
993,"CREATE TABLE circuits
(
	circuitId INTEGER primary key autoincrement,
	circuitRef TEXT default '' not null, -- examples: `hungaroring`
	location TEXT, -- description: location of circuit
	country TEXT, -- description: country of circuit
	lat REAL, -- `latitude` description: latitude of location of circuit
	lng REAL, -- `longitude` description: longitude of location of circuit value description: Location coordinates: (lat, lng)
);"
994,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	name TEXT default '' not null, -- examples: `Monaco Grand Prix`| description: name of the race
);

CREATE TABLE constructorResults
(
	constructorResultsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	constructorId INTEGER default 0 not null, --
	points REAL, --
	foreign key (raceId) references races(raceId),
	foreign key (constructorId) references constructors(constructorId),
);

CREATE TABLE constructors
(
	constructorId INTEGER primary key autoincrement,
	name TEXT default '' not null unique, --
	nationality TEXT, -- description: nationality of the constructor
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	constructorId INTEGER default 0 not null, --
	foreign key (raceId) references races(raceId),
	foreign key (constructorId) references constructors(constructorId),
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	points REAL default 0 not null, -- description: how many points acquired in each race
	foreign key (raceId) references races(raceId),
);"
995,
996,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	year INTEGER default 0 not null, --
	date DATE default '0000-00-00' not null, -- examples: `2009-04-26`
);"
997,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
	nationality TEXT, -- description: nationality of drivers
);"
998,"CREATE TABLE drivers
(
	driverId INTEGER primary key autoincrement,
);

CREATE TABLE driverStandings
(
	driverStandingsId INTEGER primary key autoincrement,
	driverId INTEGER default 0 not null, --
	points REAL default 0 not null, -- description: how many points acquired in each race
	wins INTEGER default 0 not null, -- description: wins
	foreign key (driverId) references drivers(driverId),
);"
999,"CREATE TABLE races
(
	raceId INTEGER primary key autoincrement,
	name TEXT default '' not null, --
);

CREATE TABLE results
(
	resultId INTEGER primary key autoincrement,
	raceId INTEGER default 0 not null, --
	fastestLapTime TEXT, -- `fastest Lap Time` description: fastest Lap Time value description: faster (smaller in the value) ""fastestLapTime"" leads to higher rank (smaller is higher rank)
	fastestLapSpeed TEXT, -- `fastest Lap Speed` description: fastest Lap Speed value description: (km / h)
	foreign key (raceId) references races(raceId),
);"
1312,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Angela`
	last_name TEXT, -- examples: `Sanders`| `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- `major name` description: major name
);"
1313,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	college TEXT, -- description: The name college that houses the department that offers the major
);"
1314,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	link_to_major TEXT, --
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	department TEXT, -- description: The name of the department that offers the major
);"
1315,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `Women's Soccer`| `event name` description: event name
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_event) references event(event_id),
);"
1316,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `Women's Soccer`| `event name` description: event name
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_event) references event(event_id),
	foreign key (link_to_member) references member(member_id),
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	phone TEXT, -- description: The best telephone at which to contact the member
);"
1317,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `Women's Soccer`| `event name` description: event name
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_event) references event(event_id),
	foreign key (link_to_member) references member(member_id),
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	t_shirt_size TEXT, -- examples: `Medium`| description: The size of tee shirt that member wants when shirts are ordered value description: usually the student ordered t-shirt with lager size has bigger body shape
);"
1318,"CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_member) references member(member_id),
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	position TEXT, -- description: The position the member holds in the club
);"
1319,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	position TEXT, -- examples: `President`, `Vice President`| description: The position the member holds in the club
	link_to_major TEXT, --
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	college TEXT, -- description: The name college that houses the department that offers the major
);"
1320,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Maya`| `first name` description: member's first name
	last_name TEXT, -- examples: `Mclean`| `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, --
	primary key (link_to_event, link_to_member),
	foreign key (link_to_event) references event(event_id),
	foreign key (link_to_member) references member(member_id),
);

CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- `event name` description: event name
);"
1321,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_date TEXT, -- examples: `2019-10-05T12:00:00`| `event date` description: The date the event took place or is scheduled to take place value description: e.g. 2020-03-10T12:00:00
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Sacha`
	last_name TEXT, -- examples: `Harrison`
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_event) references event(event_id),
	foreign key (link_to_member) references member(member_id),
);"
1322,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	type TEXT, -- examples: `Meeting`| description: The kind of event, such as game, social, election
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_event) references event(event_id),
);"
1323,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- `event name` description: event name
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_event) references event(event_id),
);"
1324,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `March Meeting`| `event name` description: event name
	event_date TEXT, -- examples: `2019-10-22T12:00:00`| `event date` description: The date the event took place or is scheduled to take place value description: e.g. 2020-03-10T12:00:00
	type TEXT, -- examples: `Meeting`| description: The kind of event, such as game, social, election
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_event) references event(event_id),
);"
1325,"CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_description TEXT, -- `expense description` description: A textual description of what the money was spend for
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_budget TEXT, --
	foreign key (link_to_budget) references budget(budget_id),
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	link_to_event TEXT, --
);"
1326,"CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- examples: `Environmental Engineering`| `major name` description: major name
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);"
1327,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `Laugh Out Loud`
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_event) references event(event_id),
	foreign key (link_to_member) references member(member_id),
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
);"
1328,"CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- examples: `Law and Constitutional Studies`| `major name` description: major name
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE attendance
(
	link_to_event TEXT, --
	link_to_member TEXT, --
	primary key (link_to_event, link_to_member),
	foreign key (link_to_member) references member(member_id),
);"
1329,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Sherri`| `first name` description: member's first name
	last_name TEXT, -- examples: `Ramsey`| `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	zip INTEGER, -- description: the zip code of the member's hometown
	foreign key (zip) references zip_code(zip_code),
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	county TEXT, -- examples: `Ramsey County`| description: The county to which the ZIP pertains
);"
1330,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Tyler`| `first name` description: member's first name
	last_name TEXT, -- examples: `Hewitt`| `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	college TEXT, -- description: The name college that houses the department that offers the major
);"
1331,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	position TEXT, -- examples: `President`, `Vice President`| description: The position the member holds in the club
);

CREATE TABLE income
(
	income_id TEXT constraint income_pk primary key,
	amount INTEGER, -- description: amount of funds value description: the unit is dollar
	link_to_member TEXT, --
	foreign key (link_to_member) references member(member_id),
);"
1332,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `September Meeting`
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, -- examples: `Food`| description: The area for which the amount is budgeted, such as, advertisement, food, parking
	spent REAL, -- description: The total amount spent in the budgeted category for an event. value description: the unit is dollar. This is summarized from the Expense table
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);"
1333,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	position TEXT, -- examples: `President`| description: The position the member holds in the club
	zip INTEGER, -- description: the zip code of the member's hometown
	foreign key (zip) references zip_code(zip_code),
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	city TEXT, -- examples: `Clubb`| description: The city to which the ZIP pertains
	state TEXT, -- description: The name of the state to which the ZIP pertains
);"
1334,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	zip INTEGER, -- description: the zip code of the member's hometown
	foreign key (zip) references zip_code(zip_code),
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	state TEXT, -- examples: `Illinois`
);"
1335,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `September Meeting`| `event name` description: event name
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, -- examples: `Advertisement`| description: The area for which the amount is budgeted, such as, advertisement, food, parking
	spent REAL, -- description: The total amount spent in the budgeted category for an event. value description: the unit is dollar. This is summarized from the Expense table
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);"
1336,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	last_name TEXT, -- examples: `Guidi`, `Pierce`| `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	department TEXT, -- description: The name of the department that offers the major
);"
1337,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `October Speaker`
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	amount INTEGER, -- description: The amount budgeted for the specified category and event value description: the unit is dollar   some computation like: amount = spent + remaining
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);"
1338,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `October Meeting`| `event name` description: event name
	event_date TEXT, -- examples: `2020-04-21T12:00:00`| `event date` description: The date the event took place or is scheduled to take place value description: e.g. 2020-03-10T12:00:00
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_date TEXT, -- examples: `2019-11-19`| `expense date` description: The date the expense was incurred value description: e.g. YYYY-MM-DD
	approved TEXT, -- examples: `true`| description: A true or false value indicating if the expense was approved value description: true/ false
	link_to_budget TEXT, --
	foreign key (link_to_budget) references budget(budget_id),
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);"
1339,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Elijah`
	last_name TEXT, -- examples: `Allen`
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_date TEXT, -- examples: `2019-09-01`| `expense date` description: The date the expense was incurred value description: e.g. YYYY-MM-DD
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_member TEXT, --
	foreign key (link_to_member) references member(member_id),
);"
1340,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_date TEXT, -- examples: `2019-10-22T12:00:00`| `event date` description: The date the event took place or is scheduled to take place value description: e.g. 2020-03-10T12:00:00
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	spent REAL, -- description: The total amount spent in the budgeted category for an event. value description: the unit is dollar. This is summarized from the Expense table
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);"
1341,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `Spring Budget Review`| `event name` description: event name
	location TEXT, -- description: Address where the event was held or is to be held or the name of such a location
);"
1342,"CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_description TEXT, -- examples: `Posters`| `expense description` description: A textual description of what the money was spend for
	expense_date TEXT, -- examples: `2019-10-10`| `expense date` description: The date the expense was incurred value description: e.g. YYYY-MM-DD
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
);

CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_date TEXT, -- examples: `2019-09-12T06:00:00`| `event date` description: The date the event took place or is scheduled to take place value description: e.g. 2020-03-10T12:00:00
);"
1343,"CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, -- examples: `Food`| description: The area for which the amount is budgeted, such as, advertisement, food, parking
	remaining REAL, -- description: A value calculated as the amount budgeted minus the amount spent value description: the unit is dollar   If the remaining < 0, it means that the cost has exceeded the budget.
	amount INTEGER, -- description: The amount budgeted for the specified category and event value description: the unit is dollar   some computation like: amount = spent + remaining
);"
1344,"CREATE TABLE income
(
	income_id TEXT constraint income_pk primary key,
	date_received TEXT, -- examples: `2019-10-08`| `date received` description: the date that the fund received
	source TEXT, -- examples: `Fundraising`| description: A value indicating where the funds come from such as dues, or the annual university allocation
	notes TEXT, -- description: A free-text value giving any needed details about the receipt of funds
);

CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	notes TEXT, -- description: A free text field for any notes about the event
);"
1345,"CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	college TEXT, -- description: The name college that houses the department that offers the major
);"
1346,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Carlo`| `first name` description: member's first name
	last_name TEXT, -- examples: `Jacobs`| `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	phone TEXT, -- description: The best telephone at which to contact the member
);"
1347,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Adela`| `first name` description: member's first name
	last_name TEXT, -- examples: `O'Gallagher`| `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	zip INTEGER, -- description: the zip code of the member's hometown
	foreign key (zip) references zip_code(zip_code),
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	county TEXT, -- description: The county to which the ZIP pertains
);"
1348,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `November Meeting`
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	remaining REAL, -- description: A value calculated as the amount budgeted minus the amount spent value description: the unit is dollar   If the remaining < 0, it means that the cost has exceeded the budget.
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_budget TEXT, -- `link to budget` description: The unique identifier of the record in the Budget table that indicates the expected total expenditure for a given category and event. value description: References the Budget table
	foreign key (link_to_budget) references budget(budget_id),
);"
1349,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `September Speaker`
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	amount INTEGER, -- description: The amount budgeted for the specified category and event value description: the unit is dollar   some computation like: amount = spent + remaining
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);"
1350,"CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_description TEXT, -- examples: `Post Cards, Posters`, `Posters`| `expense description` description: A textual description of what the money was spend for
	expense_date TEXT, -- examples: `2019-10-22`| `expense date` description: The date the expense was incurred value description: e.g. YYYY-MM-DD
	link_to_budget TEXT, --
	foreign key (link_to_budget) references budget(budget_id),
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	event_status TEXT, -- `event status` description: the status of the event value description: Closed / Open/ Planning    • Closed: It means that the event is closed. The spent and the remaining won't change anymore. • Open: It means that the event is already opened. The spent and the remaining will change with new expenses. • Planning: The event is not started yet but is planning. The spent and the remaining won't change at this stage.
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);

CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	status TEXT, --
);"
1351,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Brent`
	last_name TEXT, -- examples: `Thomason`
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- `major name` description: major name
);"
1352,"CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- examples: `Human Development and Family Studies`
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	t_shirt_size TEXT, -- examples: `Large`| description: The size of tee shirt that member wants when shirts are ordered value description: usually the student ordered t-shirt with lager size has bigger body shape
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);"
1353,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Christof`| `first name` description: member's first name
	last_name TEXT, -- examples: `Nielson`
	zip INTEGER, -- description: the zip code of the member's hometown
	foreign key (zip) references zip_code(zip_code),
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	type TEXT, -- description: The kind of ZIP code value description: � Standard: the normal codes with which most people are familiar  � PO Box: zip codes have post office boxes  � Unique: zip codes that are assigned to individual organizations.
);"
1354,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	position TEXT, -- examples: `President`, `Vice President`| description: The position the member holds in the club
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- `major name` description: major name
);"
1355,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Sacha`| `first name` description: member's first name
	last_name TEXT, -- examples: `Harrison`| `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	zip INTEGER, -- description: the zip code of the member's hometown
	foreign key (zip) references zip_code(zip_code),
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	state TEXT, -- description: The name of the state to which the ZIP pertains
);"
1356,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	position TEXT, -- examples: `President`| description: The position the member holds in the club
	link_to_major TEXT, --
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	department TEXT, -- description: The name of the department that offers the major
);"
1357,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Connor`
	last_name TEXT, -- examples: `Hilton`
	zip INTEGER, --
	foreign key (zip) references zip_code(zip_code),
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	city TEXT, -- examples: `Hilton`
);

CREATE TABLE income
(
	income_id TEXT constraint income_pk primary key,
	date_received TEXT, -- examples: `2019-09-29`| `date received` description: the date that the fund received
	source TEXT, -- examples: `Dues`| description: A value indicating where the funds come from such as dues, or the annual university allocation
	link_to_member TEXT, --
	foreign key (link_to_member) references member(member_id),
);"
1358,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
);

CREATE TABLE income
(
	income_id TEXT constraint income_pk primary key,
	date_received TEXT, -- examples: `2019-09-16`| `date received` description: the date that the fund received
	source TEXT, -- examples: `Dues`| description: A value indicating where the funds come from such as dues, or the annual university allocation
	link_to_member TEXT, --
	foreign key (link_to_member) references member(member_id),
);"
1359,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `October Meeting`, `Yearly Kickoff`| `event name` description: event name
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, -- examples: `Advertisement`| description: The area for which the amount is budgeted, such as, advertisement, food, parking
	amount INTEGER, -- description: The amount budgeted for the specified category and event value description: the unit is dollar   some computation like: amount = spent + remaining
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);"
1360,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `November Speaker`| `event name` description: event name
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, -- examples: `Parking`| description: The area for which the amount is budgeted, such as, advertisement, food, parking
	amount INTEGER, -- description: The amount budgeted for the specified category and event value description: the unit is dollar   some computation like: amount = spent + remaining
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	county TEXT, --
);"
1361,"CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_description TEXT, -- examples: `Pizza`| `expense description` description: A textual description of what the money was spend for
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
);"
1362,"CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	city TEXT, -- examples: `Orange`, `Virginia`| description: The city to which the ZIP pertains
	county TEXT, -- examples: `Orange County`| description: The county to which the ZIP pertains
	state TEXT, -- examples: `Virginia`| description: The name of the state to which the ZIP pertains
);"
1363,"CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- examples: `Political Science`
	department TEXT, -- description: The name of the department that offers the major
	college TEXT, -- description: The name college that houses the department that offers the major
);"
1364,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Amy`| `first name` description: member's first name
	last_name TEXT, -- examples: `Firth`| `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	zip INTEGER, -- description: the zip code of the member's hometown
	foreign key (zip) references zip_code(zip_code),
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	city TEXT, -- examples: `Hometown`, `Firth`| description: The city to which the ZIP pertains
	county TEXT, -- description: The county to which the ZIP pertains
	state TEXT, -- description: The name of the state to which the ZIP pertains
);"
1365,"CREATE TABLE budget
(
	budget_id TEXT primary key,
	remaining REAL, -- description: A value calculated as the amount budgeted minus the amount spent value description: the unit is dollar   If the remaining < 0, it means that the cost has exceeded the budget.
	link_to_event TEXT, --
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_description TEXT, -- `expense description` description: A textual description of what the money was spend for
	link_to_budget TEXT, -- `link to budget` description: The unique identifier of the record in the Budget table that indicates the expected total expenditure for a given category and event. value description: References the Budget table
	foreign key (link_to_budget) references budget(budget_id),
);"
1366,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `October Meeting`| `event name` description: event name
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_event) references event(event_id),
	foreign key (link_to_member) references member(member_id),
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
);"
1367,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	college TEXT, -- description: The name college that houses the department that offers the major
);"
1368,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	phone TEXT, -- description: The best telephone at which to contact the member
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- `major name` description: major name
);"
1369,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- `event name` description: event name
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	amount INTEGER, -- description: The amount budgeted for the specified category and event value description: the unit is dollar   some computation like: amount = spent + remaining
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event to which the budget line applies. value description: References the Event table
	foreign key (link_to_event) references event(event_id),
);"
1370,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	position TEXT, -- examples: `President`, `Vice President`
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_description TEXT, -- `expense description` description: A textual description of what the money was spend for
	link_to_member TEXT, -- `link to member` description: The member who incurred the expense
	foreign key (link_to_member) references member(member_id),
);"
1371,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `Women's Soccer`| `event name` description: event name
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_event) references event(event_id),
);"
1372,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Casey`
	last_name TEXT, -- examples: `Mason`| `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
);

CREATE TABLE income
(
	income_id TEXT constraint income_pk primary key,
	date_received TEXT, -- examples: `2019-09-16`| `date received` description: the date that the fund received
	link_to_member TEXT, --
	foreign key (link_to_member) references member(member_id),
);"
1373,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	zip INTEGER, -- description: the zip code of the member's hometown
	foreign key (zip) references zip_code(zip_code),
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	state TEXT, -- examples: `Maryland`| description: The name of the state to which the ZIP pertains
);"
1374,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	phone TEXT, -- description: The best telephone at which to contact the member
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_member) references member(member_id),
);"
1375,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	department TEXT, -- description: The name of the department that offers the major
);"
1376,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- `event name` description: event name
	status TEXT, -- examples: `Closed`| description: One of three values indicating if the event is in planning, is opened, or is closed value description: Open/ Closed/ Planning
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	spent REAL, -- description: The total amount spent in the budgeted category for an event. value description: the unit is dollar. This is summarized from the Expense table
	amount INTEGER, -- description: The amount budgeted for the specified category and event value description: the unit is dollar   some computation like: amount = spent + remaining
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);"
1377,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	position TEXT, -- examples: `President`| description: The position the member holds in the club
);"
1378,"CREATE TABLE budget
(
	budget_id TEXT primary key,
	spent REAL, -- description: The total amount spent in the budgeted category for an event. value description: the unit is dollar. This is summarized from the Expense table
	amount INTEGER, -- description: The amount budgeted for the specified category and event value description: the unit is dollar   some computation like: amount = spent + remaining
);"
1379,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_date TEXT, -- examples: `2019-10-24T13:00:00`| `event date` description: The date the event took place or is scheduled to take place value description: e.g. 2020-03-10T12:00:00
	type TEXT, -- examples: `Meeting`| description: The kind of event, such as game, social, election
);"
1380,"CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, -- examples: `Food`| description: The area for which the amount is budgeted, such as, advertisement, food, parking
	spent REAL, -- description: The total amount spent in the budgeted category for an event. value description: the unit is dollar. This is summarized from the Expense table
);"
1381,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_member) references member(member_id),
);"
1382,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `Community Theater`| `event name` description: event name
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- examples: `Interior Design`| `major name` description: major name
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_event) references event(event_id),
	foreign key (link_to_member) references member(member_id),
);"
1383,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	zip INTEGER, -- description: the zip code of the member's hometown
	foreign key (zip) references zip_code(zip_code),
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	city TEXT, -- examples: `Georgetown`, `Carolina`
	state TEXT, -- examples: `South Carolina`| description: The name of the state to which the ZIP pertains
);"
1384,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Grant`
	last_name TEXT, -- examples: `Gilmour`
);

CREATE TABLE income
(
	income_id TEXT constraint income_pk primary key,
	amount INTEGER, -- description: amount of funds value description: the unit is dollar
	link_to_member TEXT, --
	foreign key (link_to_member) references member(member_id),
);"
1385,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
);

CREATE TABLE income
(
	income_id TEXT constraint income_pk primary key,
	amount INTEGER, -- description: amount of funds value description: the unit is dollar
	link_to_member TEXT, --
	foreign key (link_to_member) references member(member_id),
);"
1386,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `Baseball game`, `Yearly Kickoff`
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_budget TEXT, -- `link to budget` description: The unique identifier of the record in the Budget table that indicates the expected total expenditure for a given category and event. value description: References the Budget table
	foreign key (link_to_budget) references budget(budget_id),
);"
1387,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `Yearly Kickoff`| `event name` description: event name
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event to which the budget line applies. value description: References the Event table
	foreign key (link_to_event) references event(event_id),
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, --
	last_name TEXT, --
);"
1388,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
);

CREATE TABLE income
(
	income_id TEXT constraint income_pk primary key,
	amount INTEGER, --
	source TEXT, -- description: A value indicating where the funds come from such as dues, or the annual university allocation
	link_to_member TEXT, --
	foreign key (link_to_member) references member(member_id),
);"
1389,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- `event name` description: event name
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	cost REAL, --
);"
1390,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `Yearly Kickoff`| `event name` description: event name
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_budget TEXT, -- `link to budget` description: The unique identifier of the record in the Budget table that indicates the expected total expenditure for a given category and event. value description: References the Budget table
	foreign key (link_to_budget) references budget(budget_id),
);"
1391,"CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- examples: `Finance`, `Physics`| `major name` description: major name
);"
1392,"CREATE TABLE income
(
	income_id TEXT constraint income_pk primary key,
	date_received TEXT, -- examples: `2019-10-17`| `date received` description: the date that the fund received
	amount INTEGER, -- description: amount of funds value description: the unit is dollar
	source TEXT, -- description: A value indicating where the funds come from such as dues, or the annual university allocation
);"
1393,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	email TEXT, -- description: member's email
	position TEXT, -- examples: `Secretary`| description: The position the member holds in the club
);"
1394,"CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- examples: `Physics Teaching`, `Physics`| `major name` description: major name
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);"
1395,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `Community Theater`| `event name` description: event name
	event_date TEXT, -- examples: `2019-10-24T13:00:00`| `event date` description: The date the event took place or is scheduled to take place value description: e.g. 2020-03-10T12:00:00
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_event) references event(event_id),
);"
1396,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Luisa`
	last_name TEXT, -- examples: `Guidi`
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- `major name` description: major name
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, --
	primary key (link_to_event, link_to_member),
	foreign key (link_to_member) references member(member_id),
);"
1397,"CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, -- examples: `Food`| description: The area for which the amount is budgeted, such as, advertisement, food, parking
	spent REAL, -- description: The total amount spent in the budgeted category for an event. value description: the unit is dollar. This is summarized from the Expense table
	event_status TEXT, -- examples: `Closed`| `event status` description: the status of the event value description: Closed / Open/ Planning    • Closed: It means that the event is closed. The spent and the remaining won't change anymore. • Open: It means that the event is already opened. The spent and the remaining will change with new expenses. • Planning: The event is not started yet but is planning. The spent and the remaining won't change at this stage.
);"
1398,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- `event name` description: event name
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, -- examples: `Advertisement`| description: The area for which the amount is budgeted, such as, advertisement, food, parking
	spent REAL, -- description: The total amount spent in the budgeted category for an event. value description: the unit is dollar. This is summarized from the Expense table
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);"
1399,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `Women's Soccer`| `event name` description: event name
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Maya`
	last_name TEXT, -- examples: `Mclean`
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_event) references event(event_id),
	foreign key (link_to_member) references member(member_id),
);"
1400,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_date TEXT, -- examples: `2019-10-22T12:00:00`| `event date` description: The date the event took place or is scheduled to take place value description: e.g. 2020-03-10T12:00:00
	type TEXT, -- examples: `Community Service`| description: The kind of event, such as game, social, election
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	county TEXT, --
);"
1401,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `September Speaker`| `event name` description: event name
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event to which the budget line applies. value description: References the Event table
	foreign key (link_to_event) references event(event_id),
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_description TEXT, -- examples: `Posters`| `expense description` description: A textual description of what the money was spend for
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_budget TEXT, --
	foreign key (link_to_budget) references budget(budget_id),
);"
1402,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	t_shirt_size TEXT, -- description: The size of tee shirt that member wants when shirts are ordered value description: usually the student ordered t-shirt with lager size has bigger body shape
);"
1403,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- `event name` description: event name
	status TEXT, -- examples: `Closed`| description: One of three values indicating if the event is in planning, is opened, or is closed value description: Open/ Closed/ Planning
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	remaining REAL, -- description: A value calculated as the amount budgeted minus the amount spent value description: the unit is dollar   If the remaining < 0, it means that the cost has exceeded the budget.
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_budget TEXT, -- `link to budget` description: The unique identifier of the record in the Budget table that indicates the expected total expenditure for a given category and event. value description: References the Budget table
	foreign key (link_to_budget) references budget(budget_id),
);"
1404,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `October Meeting`| `event name` description: event name
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_description TEXT, -- `expense description` description: A textual description of what the money was spend for
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	approved TEXT, -- description: A true or false value indicating if the expense was approved value description: true/ false
);"
1405,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `April Speaker`
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, -- description: The area for which the amount is budgeted, such as, advertisement, food, parking
	amount INTEGER, -- description: The amount budgeted for the specified category and event value description: the unit is dollar   some computation like: amount = spent + remaining
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);"
1406,"CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, -- examples: `Food`| description: The area for which the amount is budgeted, such as, advertisement, food, parking
	amount INTEGER, -- description: The amount budgeted for the specified category and event value description: the unit is dollar   some computation like: amount = spent + remaining
);"
1407,"CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, -- examples: `Advertisement`| description: The area for which the amount is budgeted, such as, advertisement, food, parking
	amount INTEGER, -- description: The amount budgeted for the specified category and event value description: the unit is dollar   some computation like: amount = spent + remaining
);"
1408,"CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_description TEXT, -- examples: `Parking`| `expense description` description: A textual description of what the money was spend for
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
);"
1409,"CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_date TEXT, -- examples: `2019-08-20`| `expense date` description: The date the expense was incurred value description: e.g. YYYY-MM-DD
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
);"
1410,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_member TEXT, -- `link to member` description: The member who incurred the expense
	foreign key (link_to_member) references member(member_id),
);"
1411,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Sacha`
	last_name TEXT, -- examples: `Harrison`
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_description TEXT, -- `expense description` description: A textual description of what the money was spend for
	link_to_member TEXT, -- `link to member` description: The member who incurred the expense
	foreign key (link_to_member) references member(member_id),
);"
1412,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	t_shirt_size TEXT, -- examples: `X-Large`| description: The size of tee shirt that member wants when shirts are ordered value description: usually the student ordered t-shirt with lager size has bigger body shape
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_description TEXT, -- examples: `Club shirts`| `expense description` description: A textual description of what the money was spend for
	link_to_member TEXT, -- `link to member` description: The member who incurred the expense
	foreign key (link_to_member) references member(member_id),
);"
1413,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	zip INTEGER, -- description: the zip code of the member's hometown
	foreign key (zip) references zip_code(zip_code),
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_member TEXT, -- `link to member` description: The member who incurred the expense
	foreign key (link_to_member) references member(member_id),
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
);"
1414,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Phillip`| `first name` description: member's first name
	last_name TEXT, -- examples: `Cullen`
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- `major name` description: major name
);"
1415,"CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- examples: `Business`| `major name` description: major name
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	position TEXT, -- examples: `Member`| description: The position the member holds in the club
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);"
1416,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	t_shirt_size TEXT, -- examples: `Medium`| description: The size of tee shirt that member wants when shirts are ordered value description: usually the student ordered t-shirt with lager size has bigger body shape
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- examples: `Business`| `major name` description: major name
);"
1417,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	type TEXT, -- examples: `Budget`| description: The kind of event, such as game, social, election
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	remaining REAL, -- description: A value calculated as the amount budgeted minus the amount spent value description: the unit is dollar   If the remaining < 0, it means that the cost has exceeded the budget.
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event to which the budget line applies. value description: References the Event table
	foreign key (link_to_event) references event(event_id),
);"
1418,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	type TEXT, -- description: The kind of event, such as game, social, election
	location TEXT, -- examples: `MU 215`| description: Address where the event was held or is to be held or the name of such a location
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, --
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event to which the budget line applies. value description: References the Event table
	foreign key (link_to_event) references event(event_id),
);"
1419,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_date TEXT, -- examples: `2020-03-10T12:00:00`| `event date` description: The date the event took place or is scheduled to take place value description: e.g. 2020-03-10T12:00:00
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, --
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event to which the budget line applies. value description: References the Event table
	foreign key (link_to_event) references event(event_id),
);"
1420,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	position TEXT, -- examples: `President`, `Vice President`| description: The position the member holds in the club
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- `major name` description: major name
);"
1421,"CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- examples: `Mathematics`
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	position TEXT, -- examples: `Member`| description: The position the member holds in the club
	zip INTEGER, --
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
	foreign key (zip) references zip_code(zip_code),
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	county TEXT, --
);"
1422,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	type TEXT, -- description: The kind of event, such as game, social, election
	location TEXT, -- examples: `MU 215`| description: Address where the event was held or is to be held or the name of such a location
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, --
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event to which the budget line applies. value description: References the Event table
	foreign key (link_to_event) references event(event_id),
);"
1423,"CREATE TABLE income
(
	income_id TEXT constraint income_pk primary key,
	amount INTEGER, -- description: amount of funds value description: the unit is dollar
);"
1424,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	position TEXT, -- examples: `Member`| description: The position the member holds in the club
	t_shirt_size TEXT, -- examples: `X-Large`| description: The size of tee shirt that member wants when shirts are ordered value description: usually the student ordered t-shirt with lager size has bigger body shape
);"
1425,"CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- examples: `Technology and Engineering Education`| `major name` description: major name
	department TEXT, -- description: The name of the department that offers the major
	college TEXT, -- description: The name college that houses the department that offers the major
);"
1426,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- examples: `Environmental Engineering`| `major name` description: major name
	department TEXT, -- description: The name of the department that offers the major
	college TEXT, -- description: The name college that houses the department that offers the major
);"
1427,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	type TEXT, -- examples: `Budget`, `Guest Speaker`
	location TEXT, -- examples: `MU 215`
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, -- description: The area for which the amount is budgeted, such as, advertisement, food, parking
	spent REAL, -- description: The total amount spent in the budgeted category for an event. value description: the unit is dollar. This is summarized from the Expense table
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);"
1428,"CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	department TEXT, -- description: The name of the department that offers the major
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	position TEXT, -- examples: `Member`| description: The position the member holds in the club
	zip INTEGER, -- description: the zip code of the member's hometown
	link_to_major TEXT, --
	foreign key (link_to_major) references major(major_id),
	foreign key (zip) references zip_code(zip_code),
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	city TEXT, --
	state TEXT, -- description: The name of the state to which the ZIP pertains
);"
1429,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- `event name` description: event name
	type TEXT, -- examples: `Social`| description: The kind of event, such as game, social, election
	location TEXT, -- examples: `900 E. Washington St.`| description: Address where the event was held or is to be held or the name of such a location
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	position TEXT, -- examples: `President`, `Vice President`| description: The position the member holds in the club
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, --
	primary key (link_to_event, link_to_member),
	foreign key (link_to_event) references event(event_id),
	foreign key (link_to_member) references member(member_id),
);"
1430,"CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_description TEXT, -- examples: `Pizza`| `expense description` description: A textual description of what the money was spend for
	expense_date TEXT, -- examples: `2019-09-10`| `expense date` description: The date the expense was incurred value description: e.g. YYYY-MM-DD
	link_to_member TEXT, -- `link to member` description: The member who incurred the expense
	foreign key (link_to_member) references member(member_id),
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	position TEXT, -- description: The position the member holds in the club
);"
1431,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `Women's Soccer`
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	position TEXT, -- examples: `Member`| description: The position the member holds in the club
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_event) references event(event_id),
	foreign key (link_to_member) references member(member_id),
);"
1432,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	position TEXT, -- examples: `Member`| description: The position the member holds in the club
	t_shirt_size TEXT, -- examples: `Medium`| description: The size of tee shirt that member wants when shirts are ordered value description: usually the student ordered t-shirt with lager size has bigger body shape
);

CREATE TABLE income
(
	income_id TEXT constraint income_pk primary key,
	amount INTEGER, -- description: amount of funds value description: the unit is dollar
	link_to_member TEXT, --
	foreign key (link_to_member) references member(member_id),
);"
1433,"CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	type TEXT, -- examples: `PO Box`| description: The kind of ZIP code value description: � Standard: the normal codes with which most people are familiar  � PO Box: zip codes have post office boxes  � Unique: zip codes that are assigned to individual organizations.
	state TEXT, -- description: The name of the state to which the ZIP pertains
);"
1434,"CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	type TEXT, -- examples: `PO Box`| description: The kind of ZIP code value description: � Standard: the normal codes with which most people are familiar  � PO Box: zip codes have post office boxes  � Unique: zip codes that are assigned to individual organizations.
	county TEXT, -- examples: `San Juan`, `San Juan Municipio`| description: The county to which the ZIP pertains
	state TEXT, -- examples: `Puerto Rico`| description: The name of the state to which the ZIP pertains
);"
1435,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- `event name` description: event name
	event_date TEXT, -- examples: `2020-03-10T09:30:00`| `event date` description: The date the event took place or is scheduled to take place value description: e.g. 2020-03-10T12:00:00
	type TEXT, -- examples: `Game`| description: The kind of event, such as game, social, election
	status TEXT, -- examples: `Closed`| description: One of three values indicating if the event is in planning, is opened, or is closed value description: Open/ Closed/ Planning
);"
1436,"CREATE TABLE expense
(
	expense_id TEXT primary key,
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_member TEXT, -- `link to member` description: The member who incurred the expense
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, --
	primary key (link_to_event, link_to_member),
);"
1437,"CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_date TEXT, -- examples: `2019-10-01`| `expense date` description: The date the expense was incurred value description: e.g. YYYY-MM-DD
	approved TEXT, -- description: A true or false value indicating if the expense was approved value description: true/ false
	link_to_member TEXT, -- `link to member` description: The member who incurred the expense
	foreign key (link_to_member) references member(member_id),
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, --
	last_name TEXT, --
);

CREATE TABLE attendance
(
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event which was attended value description: References the Event table
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_member) references member(member_id),
);"
1438,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Katy`| `first name` description: member's first name
	link_to_major TEXT, -- examples: `rec1N0upiVLy5esTO`| `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	college TEXT, -- description: The name college that houses the department that offers the major
);"
1439,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	phone TEXT, -- description: The best telephone at which to contact the member
	zip INTEGER, --
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
	foreign key (zip) references zip_code(zip_code),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- examples: `Business`
	college TEXT, -- description: The name college that houses the department that offers the major
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
);"
1440,"CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_date TEXT, -- examples: `2019-09-10`| `expense date` description: The date the expense was incurred value description: e.g. YYYY-MM-DD
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_member TEXT, -- `link to member` description: The member who incurred the expense
	foreign key (link_to_member) references member(member_id),
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	email TEXT, -- description: member's email
);"
1441,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, --
	college TEXT, -- description: The name college that houses the department that offers the major
);

CREATE TABLE attendance
(
	link_to_event TEXT, --
	link_to_member TEXT, -- `link to member` description: The unique identifier of the member who attended the event value description: References the Member table
	primary key (link_to_event, link_to_member),
	foreign key (link_to_member) references member(member_id),
);"
1442,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	remaining REAL, -- description: A value calculated as the amount budgeted minus the amount spent value description: the unit is dollar   If the remaining < 0, it means that the cost has exceeded the budget.
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event to which the budget line applies. value description: References the Event table
	foreign key (link_to_event) references event(event_id),
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	county TEXT, --
);"
1443,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_date TEXT, -- examples: `2019-09-12T06:00:00`| `event date` description: The date the event took place or is scheduled to take place value description: e.g. 2020-03-10T12:00:00
	location TEXT, -- description: Address where the event was held or is to be held or the name of such a location
	status TEXT, --
);"
1444,"CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_description TEXT, -- `expense description` description: A textual description of what the money was spend for
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
);"
1445,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	t_shirt_size TEXT, -- examples: `Large`, `X-Large`| description: The size of tee shirt that member wants when shirts are ordered value description: usually the student ordered t-shirt with lager size has bigger body shape
);"
1446,"CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	type TEXT, -- examples: `PO Box`| description: The kind of ZIP code value description: � Standard: the normal codes with which most people are familiar  � PO Box: zip codes have post office boxes  � Unique: zip codes that are assigned to individual organizations.
	county TEXT, -- description: The county to which the ZIP pertains
);"
1447,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- `event name` description: event name
	location TEXT, -- description: Address where the event was held or is to be held or the name of such a location
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	remaining REAL, -- description: A value calculated as the amount budgeted minus the amount spent value description: the unit is dollar   If the remaining < 0, it means that the cost has exceeded the budget.
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event to which the budget line applies. value description: References the Event table
	foreign key (link_to_event) references event(event_id),
);"
1448,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- `event name` description: event name
	event_date TEXT, -- examples: `2020-03-24T12:00:00`| `event date` description: The date the event took place or is scheduled to take place value description: e.g. 2020-03-10T12:00:00
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_description TEXT, -- examples: `Pizza`| `expense description` description: A textual description of what the money was spend for
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_budget TEXT, --
	foreign key (link_to_budget) references budget(budget_id),
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);"
1449,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	link_to_major TEXT, --
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- `major name` description: major name
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_member TEXT, -- `link to member` description: The member who incurred the expense
	foreign key (link_to_member) references member(member_id),
);"
1450,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	location TEXT, -- description: Address where the event was held or is to be held or the name of such a location
);

CREATE TABLE income
(
	income_id TEXT constraint income_pk primary key,
	amount INTEGER, -- description: amount of funds value description: the unit is dollar
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	city TEXT, --
	county TEXT, --
);"
1451,"CREATE TABLE expense
(
	expense_id TEXT primary key,
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_member TEXT, -- `link to member` description: The member who incurred the expense
	link_to_budget TEXT, --
	foreign key (link_to_budget) references budget(budget_id),
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	amount INTEGER, -- description: The amount budgeted for the specified category and event value description: the unit is dollar   some computation like: amount = spent + remaining
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);

CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
);"
1452,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	position TEXT, -- examples: `Member`| description: The position the member holds in the club
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_member TEXT, -- `link to member` description: The member who incurred the expense
	foreign key (link_to_member) references member(member_id),
);

CREATE TABLE income
(
	income_id TEXT constraint income_pk primary key,
	amount INTEGER, -- description: amount of funds value description: the unit is dollar
	link_to_member TEXT, --
	foreign key (link_to_member) references member(member_id),
);

CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
);"
1453,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- `event name` description: event name
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, -- examples: `Parking`| description: The area for which the amount is budgeted, such as, advertisement, food, parking
	spent REAL, -- description: The total amount spent in the budgeted category for an event. value description: the unit is dollar. This is summarized from the Expense table
	link_to_event TEXT, -- `link to event` description: The unique identifier of the event to which the budget line applies. value description: References the Event table
	foreign key (link_to_event) references event(event_id),
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	cost REAL, --
	link_to_budget TEXT, --
	foreign key (link_to_budget) references budget(budget_id),
);"
1454,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	type TEXT, -- examples: `Game`| description: The kind of event, such as game, social, election
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
);"
1455,"CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_description TEXT, -- examples: `Water, chips, cookies`| `expense description` description: A textual description of what the money was spend for
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_budget TEXT, -- `link to budget` description: The unique identifier of the record in the Budget table that indicates the expected total expenditure for a given category and event. value description: References the Budget table
	foreign key (link_to_budget) references budget(budget_id),
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
);"
1456,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_member TEXT, -- `link to member` description: The member who incurred the expense
	foreign key (link_to_member) references member(member_id),
);"
1457,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	phone TEXT, -- description: The best telephone at which to contact the member
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_member TEXT, -- `link to member` description: The member who incurred the expense
	foreign key (link_to_member) references member(member_id),
);"
1458,"CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	county TEXT, --
	state TEXT, -- examples: `Maine`, `Vermont`| description: The name of the state to which the ZIP pertains
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	position TEXT, -- examples: `Member`| description: The position the member holds in the club
	zip INTEGER, -- description: the zip code of the member's hometown
	foreign key (zip) references zip_code(zip_code),
);"
1459,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Garrett`
	last_name TEXT, -- examples: `Gerke`
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- `major name` description: major name
	department TEXT, -- description: The name of the department that offers the major
);"
1460,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
);

CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_description TEXT, -- examples: `Water, Veggie tray, supplies`| `expense description` description: A textual description of what the money was spend for
	cost REAL, -- description: The dollar amount of the expense value description: the unit is dollar
	link_to_member TEXT, -- `link to member` description: The member who incurred the expense
	link_to_budget TEXT, --
	foreign key (link_to_budget) references budget(budget_id),
	foreign key (link_to_member) references member(member_id),
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	spent REAL, -- description: The total amount spent in the budgeted category for an event. value description: the unit is dollar. This is summarized from the Expense table
);"
1461,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	phone TEXT, -- description: The best telephone at which to contact the member
	link_to_major TEXT, -- `link to major` description: The unique identifier of the major of the member. References the Major table
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	major_name TEXT, -- examples: `Elementary Education`
);"
1462,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `January Speaker`
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, -- description: The area for which the amount is budgeted, such as, advertisement, food, parking
	amount INTEGER, -- description: The amount budgeted for the specified category and event value description: the unit is dollar   some computation like: amount = spent + remaining
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);"
1463,"CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- `event name` description: event name
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, -- examples: `Food`| description: The area for which the amount is budgeted, such as, advertisement, food, parking
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);"
1464,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
);

CREATE TABLE income
(
	income_id TEXT constraint income_pk primary key,
	date_received TEXT, -- examples: `2019-09-04`| `date received` description: the date that the fund received
	amount INTEGER, -- description: amount of funds value description: the unit is dollar
	link_to_member TEXT, --
	foreign key (link_to_member) references member(member_id),
);"
1465,"CREATE TABLE expense
(
	expense_id TEXT primary key,
	expense_description TEXT, -- examples: `Posters`| `expense description` description: A textual description of what the money was spend for
	link_to_budget TEXT, -- `link to budget` description: The unique identifier of the record in the Budget table that indicates the expected total expenditure for a given category and event. value description: References the Budget table
	foreign key (link_to_budget) references budget(budget_id),
);

CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, -- description: The area for which the amount is budgeted, such as, advertisement, food, parking
);"
1466,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	position TEXT, -- examples: `Member`, `Secretary`| description: The position the member holds in the club
	link_to_major TEXT, --
	foreign key (link_to_major) references major(major_id),
);

CREATE TABLE major
(
	major_id TEXT constraint major_pk primary key,
	college TEXT, -- description: The name college that houses the department that offers the major
);"
1467,"CREATE TABLE budget
(
	budget_id TEXT primary key,
	category TEXT, -- examples: `Speaker Gifts`
	spent REAL, -- description: The total amount spent in the budgeted category for an event. value description: the unit is dollar. This is summarized from the Expense table
	link_to_event TEXT, --
	foreign key (link_to_event) references event(event_id),
);

CREATE TABLE event
(
	event_id TEXT constraint event_pk primary key,
	event_name TEXT, -- examples: `April Speaker`
);"
1468,"CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- examples: `Garrett`| `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	zip INTEGER, -- description: the zip code of the member's hometown
	foreign key (zip) references zip_code(zip_code),
);

CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	city TEXT, -- examples: `Garrett`, `Hometown`| description: The city to which the ZIP pertains
);"
1469,"CREATE TABLE zip_code
(
	zip_code INTEGER constraint zip_code_pk primary key,
	city TEXT, -- examples: `Hometown`, `Lincolnton`, `Carolina`, `North`| description: The city to which the ZIP pertains
	state TEXT, -- examples: `North Carolina`| description: The name of the state to which the ZIP pertains
);

CREATE TABLE member
(
	member_id TEXT constraint member_pk primary key,
	first_name TEXT, -- `first name` description: member's first name
	last_name TEXT, -- `last name` description: member's last name value description: full name is first_name + last_name. e.g. A member's first name is Angela and last name is Sanders. Thus, his/her full name is Angela Sanders.
	position TEXT, --
	zip INTEGER, -- description: the zip code of the member's hometown
	foreign key (zip) references zip_code(zip_code),
);"
1149,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
	Admission TEXT null, -- description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-) value description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-)
);"
1150,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
	Birthday DATE null, -- examples: `1934-02-13`
);"
1151,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1937-05-02`
	Admission TEXT null, -- description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-) value description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-)
);"
1152,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Admission TEXT null, -- description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-) value description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-)
	Diagnosis TEXT null, -- examples: `SLE`
);"
1153,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Diagnosis TEXT null, -- description: disease names
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-24`| description: Date of the laboratory tests (YYMMDD)
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1154,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
	Birthday DATE null, -- examples: `1948-10-07`| description: Birthday
);

CREATE TABLE Examination
(
	ID INTEGER null, -- description: identification of the patient
	`Examination Date` DATE null, -- examples: `1997-03-17`| description: Examination Date
	Symptoms TEXT null, -- description: other symptoms observed
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1155,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
	Birthday DATE null, -- examples: `1956-04-14`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-17`| description: Date of the laboratory tests (YYMMDD)
	LDH INTEGER null, -- `lactate dehydrogenase` description: lactate dehydrogenase value description: Commonsense evidence:  Normal range: N < 500
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1156,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1953-09-21`
);

CREATE TABLE Examination
(
	ID INTEGER null, -- description: identification of the patient
	RVVT TEXT null, -- examples: `+`| `measure of degree of coagulation` description: measure of degree of coagulation value description: +: positive  -: negative
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1157,"CREATE TABLE Examination
(
	ID INTEGER null, -- description: identification of the patient
	Thrombosis INTEGER null, -- description: degree of thrombosis value description: 0: negative (no thrombosis) 1: positive (the most severe one) 2: positive (severe)3: positive (mild)
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
	Diagnosis TEXT null, -- description: disease names
);"
1158,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1956-04-14`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-11`
	`T-CHO` INTEGER null, -- `total cholesterol` description: total cholesterol value description: Commonsense evidence: Normal range: N < 250
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1159,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-24`
	ALB REAL null, -- `albumin` description: albumin value description: Commonsense evidence:  Normal range: 3.5 < N < 5.5
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
	Diagnosis TEXT null, --
);"
1160,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-17`
	TP REAL null, -- `total protein` description: total protein value description: Commonsense evidence:  Normal range: 6.0 < N < 8.5
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1161,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1934-02-13`
	Admission TEXT null, -- description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-) value description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-)
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	`aCL IgG` REAL null, -- `anti-Cardiolipin antibody (IgG)` description: anti-Cardiolipin antibody (IgG) concentration
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1162,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
	Description DATE null, -- examples: `1997-08-13`| description: the first date when a patient data was recorded value description: null or empty: not recorded
	Admission TEXT null, -- description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-) value description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-)
);"
1163,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1937-05-02`| description: Birthday
	`First Date` DATE null, -- examples: `1989-03-17`| description: the date when a patient came to the hospital
);"
1164,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
);

CREATE TABLE Examination
(
	ID INTEGER null, -- description: identification of the patient
	`Examination Date` DATE null, -- examples: `1992-12-21`
	Thrombosis INTEGER null, -- description: degree of thrombosis value description: 0: negative (no thrombosis) 1: positive (the most severe one) 2: positive (severe)3: positive (mild)
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1165,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1953-09-21`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-27`
	TG INTEGER null, -- `triglyceride` description: triglyceride value description: Commonsense evidence:  Normal range: N < 200
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1166,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1956-04-14`
	Diagnosis TEXT null, --
);

CREATE TABLE Examination
(
	ID INTEGER null, -- description: identification of the patient
	Diagnosis TEXT null, --
	Symptoms TEXT null, -- description: other symptoms observed
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1167,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-24`| description: Date of the laboratory tests (YYMMDD)
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1168,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1937-11-24`
	`First Date` DATE null, -- examples: `1973-01-01`| description: the date when a patient came to the hospital
	Diagnosis TEXT null, -- examples: `SJS`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-17`| description: Date of the laboratory tests (YYMMDD)
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1169,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-17`
	UA REAL null, -- `uric acid` description: uric acid value description: Commonsense evidence:  Normal range: N > 8.0 (Male)N > 6.5 (Female)
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1170,"CREATE TABLE Examination
(
	ID INTEGER null, -- description: identification of the patient
	`Examination Date` DATE null, -- examples: `1992-12-21`| description: Examination Date
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	`First Date` DATE null, -- examples: `1993-02-10`| description: the date when a patient came to the hospital
);"
1171,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1954-03-16`
);

CREATE TABLE Examination
(
	ID INTEGER null, -- description: identification of the patient
	`Examination Date` DATE null, -- examples: `1996-10-17`| description: Examination Date
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1172,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-25`
	`T-BIL` REAL null, -- `total bilirubin` description: total bilirubin value description: Commonsense evidence:  Normal range: N < 2.0
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1173,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-11`| description: Date of the laboratory tests (YYMMDD)
	primary key (ID, Date),
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	`Examination Date` DATE null, -- examples: `1997-05-06`| description: Examination Date
	Diagnosis TEXT null, -- description: disease names
);"
1174,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1923-07-25`| description: Birthday
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-25`| description: Date of the laboratory tests (YYMMDD)
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1175,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1956-04-14`
);

CREATE TABLE Examination
(
	ID INTEGER null, -- description: identification of the patient
	`Examination Date` DATE null, -- examples: `1996-10-17`| description: Examination Date
	Diagnosis TEXT null, --
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-26`| description: Date of the laboratory tests (YYMMDD)
	HGB REAL null, -- `Hemoglobin` description: Hemoglobin value description: Commonsense evidence:  Normal range: 10 < N < 17
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1176,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	`Examination Date` DATE null, -- examples: `1995-04-20`| description: Examination Date
	ANA INTEGER null, -- `anti-nucleus antibody` description: anti-nucleus antibody concentration
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1177,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-24`
	`T-CHO` INTEGER null, -- `total cholesterol` description: total cholesterol value description: Commonsense evidence: Normal range: N < 250
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1178,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
	Description DATE null, -- examples: `1997-08-13`| description: the first date when a patient data was recorded value description: null or empty: not recorded
	Diagnosis TEXT null, -- examples: `AORTITIS`| description: disease names
);"
1179,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Description DATE null, -- examples: `1998-07-16`
	Diagnosis TEXT null, -- examples: `SLE`
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	`Examination Date` DATE null, -- examples: `1995-11-13`
	`aCL IgM` REAL null, -- `anti-Cardiolipin antibody (IgM)` description: anti-Cardiolipin antibody (IgM) concentration
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1180,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-25`| description: Date of the laboratory tests (YYMMDD)
	GPT INTEGER null, -- `ALT glutamic pyruvic transaminase` description: ALT glutamic pyruvic transaminase value description: Commonsense evidence:  Normal range: N < 60
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1181,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1953-09-21`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`| description: Date of the laboratory tests (YYMMDD)
	UA REAL null, -- `uric acid` description: uric acid value description: Commonsense evidence:  Normal range: N > 8.0 (Male)N > 6.5 (Female)
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1182,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	`First Date` DATE null, -- examples: `1986-11-06`| description: the date when a patient came to the hospital
	Diagnosis TEXT null, -- examples: `SJS`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-27`| description: Date of the laboratory tests (YYMMDD)
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1183,"CREATE TABLE Examination
(
	ID INTEGER null, --
	`Examination Date` DATE null, -- examples: `1995-11-13`| description: Examination Date
	Diagnosis TEXT null, -- examples: `SLE`
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	`First Date` DATE null, -- examples: `1973-01-01`| description: the date when a patient came to the hospital
	Diagnosis TEXT null, -- examples: `SLE`
);"
1184,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1954-03-16`| description: Birthday
);

CREATE TABLE Examination
(
	ID INTEGER null, -- description: identification of the patient
	`Examination Date` DATE null, -- examples: `1997-05-06`| description: Examination Date
	Symptoms TEXT null, -- description: other symptoms observed
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1185,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1923-07-25`| description: Birthday
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-24`| description: Date of the laboratory tests (YYMMDD)
	`T-CHO` INTEGER null, -- `total cholesterol` description: total cholesterol value description: Commonsense evidence: Normal range: N < 250
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1186,"CREATE TABLE Examination
(
	ID INTEGER null, -- description: identification of the patient
	`Examination Date` DATE null, -- examples: `1997-07-01`| description: Examination Date
	Diagnosis TEXT null, -- examples: `Behcet`
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Description DATE null, -- examples: `1994-02-14`| description: the first date when a patient data was recorded value description: null or empty: not recorded
	Diagnosis TEXT null, -- examples: `arthritis (r/o Behcets)`| description: disease names
);"
1187,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-20`| description: Date of the laboratory tests (YYMMDD)
	GPT INTEGER null, -- `ALT glutamic pyruvic transaminase` description: ALT glutamic pyruvic transaminase value description: Commonsense evidence:  Normal range: N < 60
	ALB REAL null, --
	primary key (ID, Date),
);

CREATE TABLE Examination
(
	ID INTEGER null, --
);"
1188,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
	Birthday DATE null, -- examples: `1937-11-24`
	Admission TEXT null, -- description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-) value description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-)
);"
1189,"CREATE TABLE Examination
(
	ID INTEGER null, --
	`aCL IgM` REAL null, -- `anti-Cardiolipin antibody (IgM)` description: anti-Cardiolipin antibody (IgM) concentration
	ANA INTEGER null, --
	`ANA Pattern` TEXT null, --
	Thrombosis INTEGER null, --
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-25`
	IGM INTEGER null, --
	primary key (ID, Date),
);"
1190,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`
	UA REAL null, -- `uric acid` description: uric acid value description: Commonsense evidence:  Normal range: N > 8.0 (Male)N > 6.5 (Female)
	`U-PRO` TEXT null, -- examples: `100`| `proteinuria` description: proteinuria value description: Commonsense evidence:  Normal range: 0 < N < 30
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
);"
1191,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
	`First Date` DATE null, -- examples: `1972-10-19`| description: the date when a patient came to the hospital
	Diagnosis TEXT null, -- examples: `BEHCET`
);"
1192,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Admission TEXT null, -- description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-) value description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-)
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-26`| description: Date of the laboratory tests (YYMMDD)
	`T-BIL` REAL null, -- `total bilirubin` description: total bilirubin value description: Commonsense evidence:  Normal range: N < 2.0
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1193,"CREATE TABLE Examination
(
	ID INTEGER null, --
	`ANA Pattern` TEXT null, -- `pattern observed in the sheet of ANA examination` description: pattern observed in the sheet of ANA examination
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
	Birthday DATE null, -- examples: `1937-05-02`
);"
1194,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
);

CREATE TABLE Examination
(
	ID INTEGER null, -- description: identification of the patient
	Diagnosis TEXT null, -- examples: `PSS`
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-26`
	LDH INTEGER null, --
	CRE REAL null, -- `creatinine` description: creatinine value description: Commonsense evidence:  Normal range: N < 1.5
	CRP TEXT null, -- `C-reactive protein` description: C-reactive protein value description: Commonsense evidence:  Normal range: N= -, +-, or N < 1.0
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1195,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
	Diagnosis TEXT null, -- examples: `SLE`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-19`
	ALB REAL null, -- `albumin` description: albumin value description: Commonsense evidence:  Normal range: 3.5 < N < 5.5
	PLT INTEGER null, --
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1196,"CREATE TABLE Examination
(
	ID INTEGER null, --
	Diagnosis TEXT null, -- examples: `SLE`| description: disease names
	Symptoms TEXT null, -- description: other symptoms observed
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Diagnosis TEXT null, -- examples: `SLE`| description: disease names
);"
1197,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Description DATE null, -- examples: `1994-02-14`| description: the first date when a patient data was recorded value description: null or empty: not recorded
	Diagnosis TEXT null, -- description: disease names
);"
1198,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
	Diagnosis TEXT null, -- examples: `APS`
);

CREATE TABLE Examination
(
	ID INTEGER null, -- description: identification of the patient
	Diagnosis TEXT null, -- examples: `APS`
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1199,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-20`| description: Date of the laboratory tests (YYMMDD)
	TP REAL null, -- `total protein` description: total protein value description: Commonsense evidence:  Normal range: 6.0 < N < 8.5
	primary key (ID, Date),
);"
1200,"CREATE TABLE Examination
(
	ID INTEGER null, --
	Symptoms TEXT null, -- examples: `thrombocytopenia`
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Diagnosis TEXT null, -- examples: `SLE`
);"
1201,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
	Birthday DATE null, -- examples: `1956-04-14`
	Diagnosis TEXT null, --
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-25`| description: Date of the laboratory tests (YYMMDD)
	RA TEXT null, -- `Rhuematoid Factor` description: Rhuematoid Factor value description: Commonsense evidence:  Normal range: N= -, +-
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1202,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
	Admission TEXT null, -- description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-) value description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-)
	Diagnosis TEXT null, -- examples: `BEHCET`| description: disease names
);

CREATE TABLE Examination
(
	ID INTEGER null, -- description: identification of the patient
	`Examination Date` DATE null, -- examples: `1995-04-20`| description: Examination Date
	Diagnosis TEXT null, --
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1203,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-17`
	WBC REAL null, -- `White blood cell` description: White blood cell value description: Commonsense evidence: Normal range: 3.5 < N < 9.0
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1204,"CREATE TABLE Examination
(
	ID INTEGER null, -- description: identification of the patient
	`Examination Date` DATE null, -- examples: `1992-12-21`| description: Examination Date
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	`First Date` DATE null, -- examples: `1992-02-03`| description: the date when a patient came to the hospital
);"
1205,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-26`
	UA REAL null, -- `uric acid` description: uric acid value description: Commonsense evidence:  Normal range: N > 8.0 (Male)N > 6.5 (Female)
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1206,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-20`| description: Date of the laboratory tests (YYMMDD)
	GOT INTEGER null, -- `AST glutamic oxaloacetic transaminase` description: AST glutamic oxaloacetic transaminase value description: Commonsense evidence:  Normal range: N < 60
	primary key (ID, Date),
);"
1207,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
	Birthday DATE null, -- examples: `1936-03-25`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-20`| description: Date of the laboratory tests (YYMMDD)
	GOT INTEGER null, -- `AST glutamic oxaloacetic transaminase` description: AST glutamic oxaloacetic transaminase value description: Commonsense evidence:  Normal range: N < 60
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1208,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-27`
	GPT INTEGER null, -- `ALT glutamic pyruvic transaminase` description: ALT glutamic pyruvic transaminase value description: Commonsense evidence:  Normal range: N < 60
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1209,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1923-07-25`
	Diagnosis TEXT null, --
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-25`| description: Date of the laboratory tests (YYMMDD)
	GPT INTEGER null, -- `ALT glutamic pyruvic transaminase` description: ALT glutamic pyruvic transaminase value description: Commonsense evidence:  Normal range: N < 60
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1210,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-11`
	LDH INTEGER null, -- `lactate dehydrogenase` description: lactate dehydrogenase value description: Commonsense evidence:  Normal range: N < 500
	primary key (ID, Date),
);"
1211,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1954-03-16`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-20`| description: Date of the laboratory tests (YYMMDD)
	LDH INTEGER null, -- `lactate dehydrogenase` description: lactate dehydrogenase value description: Commonsense evidence:  Normal range: N < 500
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1212,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-17`
	ALP INTEGER null, -- `alkaliphophatase` description: alkaliphophatase value description: Commonsense evidence:  Normal range: N < 300
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Admission TEXT null, -- description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-) value description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-)
);"
1213,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1937-11-24`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-27`
	ALP INTEGER null, -- `alkaliphophatase` description: alkaliphophatase value description: Commonsense evidence:  Normal range: N < 300
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1214,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
	Birthday DATE null, -- examples: `1956-04-14`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-11`| description: Date of the laboratory tests (YYMMDD)
	TP REAL null, -- `total protein` description: total protein value description: Commonsense evidence:  Normal range: 6.0 < N < 8.5
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1215,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-25`
	TP REAL null, -- `total protein` description: total protein value description: Commonsense evidence:  Normal range: 6.0 < N < 8.5
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1216,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
	Birthday DATE null, -- examples: `1936-03-25`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-17`| description: Date of the laboratory tests (YYMMDD)
	ALB REAL null, -- `albumin` description: albumin value description: Commonsense evidence:  Normal range: 3.5 < N < 5.5
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1217,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1954-03-16`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-24`| description: Date of the laboratory tests (YYMMDD)
	ALB REAL null, -- `albumin` description: albumin value description: Commonsense evidence:  Normal range: 3.5 < N < 5.5
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1218,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`
	UA REAL null, -- `uric acid` description: uric acid value description: Commonsense evidence:  Normal range: N > 8.0 (Male)N > 6.5 (Female)
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1219,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`
	UA REAL null, -- `uric acid` description: uric acid value description: Commonsense evidence:  Normal range: N > 8.0 (Male)N > 6.5 (Female)
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
);"
1220,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
	Birthday DATE null, -- examples: `1937-11-24`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`| description: Date of the laboratory tests (YYMMDD)
	UN INTEGER null, -- `urea nitrogen` description: urea nitrogen value description: Commonsense evidence:  Normal range: N < 30
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1221,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
	Birthday DATE null, -- examples: `1944-07-13`
	Diagnosis TEXT null, --
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-17`
	UN INTEGER null, -- `urea nitrogen` description: urea nitrogen value description: Commonsense evidence:  Normal range: N < 30
	RA TEXT null, -- `Rhuematoid Factor` description: Rhuematoid Factor value description: Commonsense evidence:  Normal range: N= -, +-
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1222,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-20`
	CRE REAL null, -- `creatinine` description: creatinine value description: Commonsense evidence:  Normal range: N < 1.5
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1223,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-25`
	CRE REAL null, -- `creatinine` description: creatinine value description: Commonsense evidence:  Normal range: N < 1.5
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1224,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-17`| description: Date of the laboratory tests (YYMMDD)
	`T-BIL` REAL null, -- `total bilirubin` description: total bilirubin value description: Commonsense evidence:  Normal range: N < 2.0
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
	Birthday DATE null, -- examples: `1948-10-07`| description: Birthday
);"
1225,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-11`
	`T-BIL` REAL null, -- `total bilirubin` description: total bilirubin value description: Commonsense evidence:  Normal range: N < 2.0
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1226,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1944-07-13`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-20`
	`T-CHO` INTEGER null, -- `total cholesterol` description: total cholesterol value description: Commonsense evidence: Normal range: N < 250
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1227,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
	Birthday DATE null, -- examples: `1954-03-16`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-24`
	`T-CHO` INTEGER null, -- `total cholesterol` description: total cholesterol value description: Commonsense evidence: Normal range: N < 250
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1228,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Diagnosis TEXT null, --
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-26`
	TG INTEGER null, -- `triglyceride` description: triglyceride value description: Commonsense evidence:  Normal range: N < 200
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1229,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1936-03-25`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-17`
	TG INTEGER null, -- `triglyceride` description: triglyceride value description: Commonsense evidence:  Normal range: N < 200
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1230,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Admission TEXT null, -- description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-) value description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-)
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-20`
	CPK INTEGER null, -- `creatinine phosphokinase` description: creatinine phosphokinase value description: Commonsense evidence: Normal range: N < 250
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1231,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
	Birthday DATE null, -- examples: `1937-11-24`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-24`
	CPK INTEGER null, -- `creatinine phosphokinase` description: creatinine phosphokinase value description: Commonsense evidence: Normal range: N < 250
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1232,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
	Birthday DATE null, -- examples: `1937-11-24`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-26`| description: Date of the laboratory tests (YYMMDD)
	`T-CHO` INTEGER null, -- `total cholesterol` description: total cholesterol value description: Commonsense evidence: Normal range: N < 250
	GLU INTEGER null, -- `blood glucose` description: blood glucose value description: Commonsense evidence: Normal range: N < 180
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1233,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Description DATE null, -- examples: `1994-02-14`| description: the first date when a patient data was recorded value description: null or empty: not recorded
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-24`| description: Date of the laboratory tests (YYMMDD)
	GLU INTEGER null, -- `blood glucose` description: blood glucose value description: Commonsense evidence: Normal range: N < 180
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1234,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
	Birthday DATE null, -- examples: `1937-05-02`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-30`| description: Date of the laboratory tests (YYMMDD)
	WBC REAL null, -- `White blood cell` description: White blood cell value description: Commonsense evidence: Normal range: 3.5 < N < 9.0
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1235,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1948-10-07`
	Diagnosis TEXT null, -- description: disease names
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`
	RBC REAL null, -- `Red blood cell` description: Red blood cell value description: Commonsense evidence:  Normal range: 3.5 < N < 6.0
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1236,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
	Birthday DATE null, -- examples: `1944-07-13`
	Admission TEXT null, -- description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-) value description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-)
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-25`
	RBC REAL null, -- `Red blood cell` description: Red blood cell value description: Commonsense evidence:  Normal range: 3.5 < N < 6.0
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1237,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
	Admission TEXT null, -- description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-) value description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-)
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-26`
	HGB REAL null, -- `Hemoglobin` description: Hemoglobin value description: Commonsense evidence:  Normal range: 10 < N < 17
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1238,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
	Birthday DATE null, -- examples: `1936-03-25`
	Diagnosis TEXT null, -- examples: `SLE`
);

CREATE TABLE Examination
(
	ID INTEGER null, -- description: identification of the patient
	Diagnosis TEXT null, -- examples: `SLE`, `Normal`
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-26`| description: Date of the laboratory tests (YYMMDD)
	HGB REAL null, --
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1239,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1934-02-13`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`| description: Date of the laboratory tests (YYMMDD)
	HCT REAL null, -- `Hematoclit` description: Hematoclit value description: Commonsense evidence: Normal range: 29 < N < 52
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1240,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-19`| description: Date of the laboratory tests (YYMMDD)
	HCT REAL null, -- `Hematoclit` description: Hematoclit value description: Commonsense evidence: Normal range: 29 < N < 52
	primary key (ID, Date),
);"
1241,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`
	PLT INTEGER null, -- `platelet` description: platelet value description: Commonsense evidence:  Normal range: 100 < N < 400
	primary key (ID, Date),
);"
1242,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1956-04-14`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-20`| description: Date of the laboratory tests (YYMMDD)
	PLT INTEGER null, -- `platelet` description: platelet value description: Commonsense evidence:  Normal range: 100 < N < 400
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1243,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
	Birthday DATE null, -- examples: `1948-10-07`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-11`
	PT REAL null, -- `prothrombin time` description: prothrombin time value description: Commonsense evidence:  Normal range: N < 14
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1244,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	`First Date` DATE null, -- examples: `1993-02-10`| description: the date when a patient came to the hospital
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-17`
	PT REAL null, -- `prothrombin time` description: prothrombin time value description: Commonsense evidence:  Normal range: N < 14
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1245,"CREATE TABLE Examination
(
	ID INTEGER null, --
	`Examination Date` DATE null, -- examples: `1997-03-10`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-26`
	APTT INTEGER null, -- `activated partial prothrombin time` description: activated partial prothrombin time value description: Commonsense evidence:  Normal range: N < 45
	primary key (ID, Date),
);"
1246,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-11`
	APTT INTEGER null, -- `activated partial prothrombin time` description: activated partial prothrombin time value description: Commonsense evidence:  Normal range: N < 45
	primary key (ID, Date),
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	Thrombosis INTEGER null, -- description: degree of thrombosis value description: 0: negative (no thrombosis) 1: positive (the most severe one) 2: positive (severe)3: positive (mild)
);"
1247,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`
	WBC REAL null, -- `White blood cell` description: White blood cell value description: Commonsense evidence: Normal range: 3.5 < N < 9.0
	FG REAL null, -- `fibrinogen` description: fibrinogen value description: Commonsense evidence:  Normal range: 150 < N < 450
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1248,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1948-10-07`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-11`| description: Date of the laboratory tests (YYMMDD)
	FG REAL null, -- `fibrinogen` description: fibrinogen value description: Commonsense evidence:  Normal range: 150 < N < 450
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1249,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Diagnosis TEXT null, -- description: disease names
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-19`
	`U-PRO` TEXT null, -- `proteinuria` description: proteinuria value description: Commonsense evidence:  Normal range: 0 < N < 30
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1250,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Diagnosis TEXT null, -- examples: `SLE`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-20`
	`U-PRO` TEXT null, -- `proteinuria` description: proteinuria value description: Commonsense evidence:  Normal range: 0 < N < 30
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1251,"CREATE TABLE Examination
(
	ID INTEGER null, --
	Symptoms TEXT null, -- examples: `abortion`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-11`
	IGG INTEGER null, -- `Ig G` description: Ig G value description: Commonsense evidence:  Normal range: 900 < N < 2000
	primary key (ID, Date),
);"
1252,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`
	IGG INTEGER null, -- `Ig G` description: Ig G value description: Commonsense evidence:  Normal range: 900 < N < 2000
	primary key (ID, Date),
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	Symptoms TEXT null, --
);"
1253,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-30`
	IGA INTEGER null, -- `Ig A` description: Ig A value description: Commonsense evidence:  Normal range: 80 < N < 500
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Diagnosis TEXT null, --
);"
1254,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	`First Date` DATE null, -- examples: `1992-02-03`| description: the date when a patient came to the hospital
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-24`
	IGA INTEGER null, -- `Ig A` description: Ig A value description: Commonsense evidence:  Normal range: 80 < N < 500
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1255,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`
	IGM INTEGER null, -- `Ig M` description: Ig M value description: Commonsense evidence:  Normal range: 40 < N < 400
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Diagnosis TEXT null, --
);"
1256,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Description DATE null, -- examples: `1991-08-13`| description: the first date when a patient data was recorded value description: null or empty: not recorded
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-20`
	CRP TEXT null, -- examples: `1.05`| `C-reactive protein` description: C-reactive protein value description: Commonsense evidence:  Normal range: N= -, +-, or N < 1.0
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1257,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`
	CRP TEXT null, -- `C-reactive protein` description: C-reactive protein value description: Commonsense evidence:  Normal range: N= -, +-, or N < 1.0
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1956-04-14`
);"
1258,"CREATE TABLE Examination
(
	ID INTEGER null, --
	KCT TEXT null, -- `measure of degree of coagulation` description: measure of degree of coagulation value description: +: positive  -: negative
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-24`
	RA TEXT null, -- `Rhuematoid Factor` description: Rhuematoid Factor value description: Commonsense evidence:  Normal range: N= -, +-
	primary key (ID, Date),
);"
1259,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1944-07-13`
	Diagnosis TEXT null, -- description: disease names
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-17`| description: Date of the laboratory tests (YYMMDD)
	RA TEXT null, -- `Rhuematoid Factor` description: Rhuematoid Factor value description: Commonsense evidence:  Normal range: N= -, +-
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1260,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1934-02-13`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-27`
	RF TEXT null, -- `RAHA` description: RAHA value description: Commonsense evidence:  Normal range: N < 20
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1261,"CREATE TABLE Examination
(
	ID INTEGER null, --
	Thrombosis INTEGER null, -- description: degree of thrombosis value description: 0: negative (no thrombosis) 1: positive (the most severe one) 2: positive (severe)3: positive (mild)
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`
	RF TEXT null, -- `RAHA` description: RAHA value description: Commonsense evidence:  Normal range: N < 20
	primary key (ID, Date),
);"
1262,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	ANA INTEGER null, -- `anti-nucleus antibody` description: anti-nucleus antibody concentration
	`ANA Pattern` TEXT null, -- `pattern observed in the sheet of ANA examination` description: pattern observed in the sheet of ANA examination
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-19`
	C3 INTEGER null, -- `complement 3` description: complement 3 value description: Commonsense evidence:  Normal range: N > 35
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1263,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	`aCL IgA` INTEGER null, -- `anti-Cardiolipin antibody (IgA) concentration` description: anti-Cardiolipin antibody (IgA) concentration
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-19`
	HCT REAL null, -- `Hematoclit` description: Hematoclit value description: Commonsense evidence: Normal range: 29 < N < 52
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1264,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Diagnosis TEXT null, -- examples: `APS`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-30`
	C4 INTEGER null, -- `complement 4` description: complement 4 value description: Commonsense evidence:  Normal range: N > 10
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1265,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Admission TEXT null, -- description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-) value description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-)
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-24`
	RNP TEXT null, -- examples: `negative`| `anti-ribonuclear protein` description: anti-ribonuclear protein value description: Commonsense evidence:  Normal range: N= -, +-
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1266,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1937-05-02`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-20`| description: Date of the laboratory tests (YYMMDD)
	RNP TEXT null, -- `anti-ribonuclear protein` description: anti-ribonuclear protein value description: Commonsense evidence:  Normal range: N= -, +-
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1267,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	Thrombosis INTEGER null, -- description: degree of thrombosis value description: 0: negative (no thrombosis) 1: positive (the most severe one) 2: positive (severe)3: positive (mild)
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-17`
	SM TEXT null, -- examples: `1`, `negative`| `anti-SM` description: anti-SM value description: Commonsense evidence:  Normal range: N= -, +-
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1268,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1936-03-25`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-17`| description: Date of the laboratory tests (YYMMDD)
	SM TEXT null, -- `anti-SM` description: anti-SM value description: Commonsense evidence:  Normal range: N= -, +-
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1269,"CREATE TABLE Examination
(
	ID INTEGER null, -- description: identification of the patient
	`Examination Date` DATE null, -- examples: `1995-11-13`| description: Examination Date
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-25`| description: Date of the laboratory tests (YYMMDD)
	SC170 TEXT null, -- `anti-scl70` description: anti-scl70 value description: Commonsense evidence:  Normal range: N= -, +-
	primary key (ID, Date),
);"
1270,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	Symptoms TEXT null, -- description: other symptoms observed
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-30`
	SC170 TEXT null, -- `anti-scl70` description: anti-scl70 value description: Commonsense evidence:  Normal range: N= -, +-
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1271,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	`First Date` DATE null, -- examples: `1995-06-20`| description: the date when a patient came to the hospital
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`
	SSA TEXT null, -- `anti-SSA` description: anti-SSA value description: Commonsense evidence:  Normal range: N= -, +-
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1272,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	`First Date` DATE null, -- examples: `1993-02-10`| description: the date when a patient came to the hospital
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-25`
	SSA TEXT null, -- `anti-SSA` description: anti-SSA value description: Commonsense evidence:  Normal range: N= -, +-
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1273,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-27`
	SSB TEXT null, -- examples: `negative`| `anti-SSB` description: anti-SSB value description: Commonsense evidence:  Normal range: N= -, +-
	primary key (ID, Date),
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	Diagnosis TEXT null, -- examples: `SLE`, `Normal`
);"
1274,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-19`
	SSB TEXT null, -- `anti-SSB` description: anti-SSB value description: Commonsense evidence:  Normal range: N= -, +-
	primary key (ID, Date),
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	Symptoms TEXT null, -- description: other symptoms observed
);"
1275,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-11`
	SSB TEXT null, -- `anti-SSB` description: anti-SSB value description: Commonsense evidence:  Normal range: N= -, +-
	CENTROMEA TEXT null, -- `anti-centromere` description: anti-centromere value description: Commonsense evidence:  Normal range: N= -, +-
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1276,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-19`
	DNA TEXT null, -- `anti-DNA` description: anti-DNA value description: Commonsense evidence:  Normal range: N < 8
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Diagnosis TEXT null, -- description: disease names
);"
1277,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Description DATE null, -- examples: `1994-02-14`| description: the first date when a patient data was recorded value description: null or empty: not recorded
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-25`
	DNA TEXT null, -- `anti-DNA` description: anti-DNA value description: Commonsense evidence:  Normal range: N < 8
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1278,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Admission TEXT null, -- description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-) value description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-)
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-25`
	`DNA-II` INTEGER null, -- `anti-DNA` description: anti-DNA value description: Commonsense evidence:  Normal range: N < 8
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1279,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Diagnosis TEXT null, -- examples: `SLE`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-11`
	GOT INTEGER null, -- `AST glutamic oxaloacetic transaminase` description: AST glutamic oxaloacetic transaminase value description: Commonsense evidence:  Normal range: N < 60
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1280,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-25`
	GOT INTEGER null, -- `AST glutamic oxaloacetic transaminase` description: AST glutamic oxaloacetic transaminase value description: Commonsense evidence:  Normal range: N < 60
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1281,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1936-03-25`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-26`
	GOT INTEGER null, -- `AST glutamic oxaloacetic transaminase` description: AST glutamic oxaloacetic transaminase value description: Commonsense evidence:  Normal range: N < 60
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1282,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1953-09-21`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-19`
	GPT INTEGER null, -- `ALT glutamic pyruvic transaminase` description: ALT glutamic pyruvic transaminase value description: Commonsense evidence:  Normal range: N < 60
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1283,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-25`
	GOT INTEGER null, -- `AST glutamic oxaloacetic transaminase` description: AST glutamic oxaloacetic transaminase value description: Commonsense evidence:  Normal range: N < 60
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1284,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	`First Date` DATE null, -- examples: `1986-11-06`| description: the date when a patient came to the hospital
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-26`| description: Date of the laboratory tests (YYMMDD)
	LDH INTEGER null, -- `lactate dehydrogenase` description: lactate dehydrogenase value description: Commonsense evidence:  Normal range: N < 500
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1285,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	`First Date` DATE null, -- examples: `1983-01-20`| description: the date when a patient came to the hospital
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-27`| description: Date of the laboratory tests (YYMMDD)
	LDH INTEGER null, -- `lactate dehydrogenase` description: lactate dehydrogenase value description: Commonsense evidence:  Normal range: N < 500
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1286,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Admission TEXT null, -- description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-) value description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-)
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-25`
	ALP INTEGER null, -- `alkaliphophatase` description: alkaliphophatase value description: Commonsense evidence:  Normal range: N < 300
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1287,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Admission TEXT null, -- description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-) value description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-)
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-25`
	ALP INTEGER null, -- `alkaliphophatase` description: alkaliphophatase value description: Commonsense evidence:  Normal range: N < 300
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1288,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`
	TP REAL null, -- `total protein` description: total protein value description: Commonsense evidence:  Normal range: 6.0 < N < 8.5
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Diagnosis TEXT null, --
);"
1289,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Diagnosis TEXT null, -- examples: `SJS`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-19`
	TP REAL null, -- `total protein` description: total protein value description: Commonsense evidence:  Normal range: 6.0 < N < 8.5
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1290,"CREATE TABLE Examination
(
	ID INTEGER null, --
	`Examination Date` DATE null, -- examples: `1997-03-17`| description: Examination Date
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-30`| description: Date of the laboratory tests (YYMMDD)
	ALB REAL null, -- `albumin` description: albumin value description: Commonsense evidence:  Normal range: 3.5 < N < 5.5
	primary key (ID, Date),
);"
1291,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-11`
	TP REAL null, -- `total protein` description: total protein value description: Commonsense evidence:  Normal range: 6.0 < N < 8.5
	ALB REAL null, -- `albumin` description: albumin value description: Commonsense evidence:  Normal range: 3.5 < N < 5.5
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1292,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, --
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	`aCL IgG` REAL null, -- `anti-Cardiolipin antibody (IgG)` description: anti-Cardiolipin antibody (IgG) concentration
	`aCL IgM` REAL null, -- `anti-Cardiolipin antibody (IgM)` description: anti-Cardiolipin antibody (IgM) concentration
	`aCL IgA` INTEGER null, -- `anti-Cardiolipin antibody (IgA) concentration` description: anti-Cardiolipin antibody (IgA) concentration
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-26`
	UA REAL null, --
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1293,"CREATE TABLE Examination
(
	ID INTEGER null, --
	ANA INTEGER null, -- `anti-nucleus antibody` description: anti-nucleus antibody concentration
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`
	CRE REAL null, -- `creatinine` description: creatinine value description: Commonsense evidence:  Normal range: N < 1.5
	primary key (ID, Date),
);"
1294,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`
	CRE REAL null, -- `creatinine` description: creatinine value description: Commonsense evidence:  Normal range: N < 1.5
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	`aCL IgA` INTEGER null, -- `anti-Cardiolipin antibody (IgA) concentration` description: anti-Cardiolipin antibody (IgA) concentration
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
);"
1295,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-11`
	`T-BIL` REAL null, -- `total bilirubin` description: total bilirubin value description: Commonsense evidence:  Normal range: N < 2.0
	primary key (ID, Date),
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	ANA INTEGER null, -- `anti-nucleus antibody` description: anti-nucleus antibody concentration
	`ANA Pattern` TEXT null, -- `pattern observed in the sheet of ANA examination` description: pattern observed in the sheet of ANA examination
);"
1296,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-19`
	`T-BIL` REAL null, -- `total bilirubin` description: total bilirubin value description: Commonsense evidence:  Normal range: N < 2.0
	primary key (ID, Date),
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	ANA INTEGER null, -- `anti-nucleus antibody` description: anti-nucleus antibody concentration
);"
1297,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`
	`T-CHO` INTEGER null, -- `total cholesterol` description: total cholesterol value description: Commonsense evidence: Normal range: N < 250
	primary key (ID, Date),
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	KCT TEXT null, -- `measure of degree of coagulation` description: measure of degree of coagulation value description: +: positive  -: negative
);"
1298,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-26`
	`T-CHO` INTEGER null, -- `total cholesterol` description: total cholesterol value description: Commonsense evidence: Normal range: N < 250
	primary key (ID, Date),
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	ANA INTEGER null, -- `anti-nucleus antibody` description: anti-nucleus antibody concentration
	`ANA Pattern` TEXT null, -- `pattern observed in the sheet of ANA examination` description: pattern observed in the sheet of ANA examination
);"
1299,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-21`
	TG INTEGER null, -- `triglyceride` description: triglyceride value description: Commonsense evidence:  Normal range: N < 200
	primary key (ID, Date),
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	Symptoms TEXT null, --
);"
1300,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-26`
	TG INTEGER null, -- `triglyceride` description: triglyceride value description: Commonsense evidence:  Normal range: N < 200
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Diagnosis TEXT null, -- description: disease names
);"
1301,"CREATE TABLE Examination
(
	ID INTEGER null, -- description: identification of the patient
	Thrombosis INTEGER null, -- description: degree of thrombosis value description: 0: negative (no thrombosis) 1: positive (the most severe one) 2: positive (severe)3: positive (mild)
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-30`
	CPK INTEGER null, -- `creatinine phosphokinase` description: creatinine phosphokinase value description: Commonsense evidence: Normal range: N < 250
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
);"
1302,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-20`
	CPK INTEGER null, -- `creatinine phosphokinase` description: creatinine phosphokinase value description: Commonsense evidence: Normal range: N < 250
	primary key (ID, Date),
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	KCT TEXT null, -- `measure of degree of coagulation` description: measure of degree of coagulation value description: +: positive  -: negative
	RVVT TEXT null, -- `measure of degree of coagulation` description: measure of degree of coagulation value description: +: positive  -: negative
	LAC TEXT null, -- `measure of degree of coagulation` description: measure of degree of coagulation value description: +: positive  -: negative
);"
1303,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Birthday DATE null, -- examples: `1954-03-16`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-19`| description: Date of the laboratory tests (YYMMDD)
	GLU INTEGER null, -- `blood glucose` description: blood glucose value description: Commonsense evidence: Normal range: N < 180
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1304,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-27`
	GLU INTEGER null, -- `blood glucose` description: blood glucose value description: Commonsense evidence: Normal range: N < 180
	primary key (ID, Date),
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	Thrombosis INTEGER null, -- description: degree of thrombosis value description: 0: negative (no thrombosis) 1: positive (the most severe one) 2: positive (severe)3: positive (mild)
);"
1305,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Admission TEXT null, -- description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-) value description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-)
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-30`
	WBC REAL null, -- `White blood cell` description: White blood cell value description: Commonsense evidence: Normal range: 3.5 < N < 9.0
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1306,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Diagnosis TEXT null, -- examples: `SLE`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-20`
	WBC REAL null, -- `White blood cell` description: White blood cell value description: Commonsense evidence: Normal range: 3.5 < N < 9.0
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1307,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Admission TEXT null, -- description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-) value description: patient was admitted to the hospital (+) or followed at the outpatient clinic (-)
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, -- description: identification of the patient
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-11`
	RBC REAL null, -- `Red blood cell` description: Red blood cell value description: Commonsense evidence:  Normal range: 3.5 < N < 6.0
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1308,"CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-17`
	PLT INTEGER null, -- `platelet` description: platelet value description: Commonsense evidence:  Normal range: 100 < N < 400
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Examination
(
	ID INTEGER null, --
	Diagnosis TEXT null, -- examples: `Normal`
	Symptoms TEXT null, --
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Diagnosis TEXT null, --
);"
1309,"CREATE TABLE Examination
(
	ID INTEGER null, --
	Diagnosis TEXT null, -- examples: `Normal`, `MCTD`
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);

CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	Diagnosis TEXT null, -- examples: `MCTD`
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-24`
	PLT INTEGER null, -- `platelet` description: platelet value description: Commonsense evidence:  Normal range: 100 < N < 400
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1310,"CREATE TABLE Patient
(
	ID INTEGER default 0 not null primary key,
	SEX TEXT null, -- description: Sex value description: F: female; M: male
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-20`
	PT REAL null, -- `prothrombin time` description: prothrombin time value description: Commonsense evidence:  Normal range: N < 14
	primary key (ID, Date),
	foreign key (ID) references Patient (ID) on update cascade on delete cascade,
);"
1311,"CREATE TABLE Examination
(
	ID INTEGER null, --
	Thrombosis INTEGER null, -- description: degree of thrombosis value description: 0: negative (no thrombosis) 1: positive (the most severe one) 2: positive (severe)3: positive (mild)
);

CREATE TABLE Laboratory
(
	ID INTEGER default 0 not null, --
	Date DATE default '0000-00-00' not null, -- examples: `1991-09-26`
	PT REAL null, -- `prothrombin time` description: prothrombin time value description: Commonsense evidence:  Normal range: N < 14
	primary key (ID, Date),
);"
195,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);"
196,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `c`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
197,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `o`
	PRIMARY KEY (`atom_id`),
);"
198,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`, `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, --
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
199,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `na`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
200,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
201,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `c`
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
202,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);"
203,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`element` TEXT DEFAULT NULL, -- examples: `b`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);"
204,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
205,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);"
206,"CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	PRIMARY KEY (`bond_id`),
);"
207,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);"
208,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
209,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, --
	`element` TEXT DEFAULT NULL, -- description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, --
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
210,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, --
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
211,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, --
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
212,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
213,"CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);"
214,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`, `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
215,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `i`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);"
216,"CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);"
217,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
218,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `f`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
219,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, --
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
220,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);"
221,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
222,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`, `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
223,"CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	PRIMARY KEY (`bond_id`),
);"
224,"CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	PRIMARY KEY (`atom_id`),
);"
225,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	PRIMARY KEY (`molecule_id`),
);"
226,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);"
227,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
228,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `i`
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	PRIMARY KEY (`molecule_id`),
);"
229,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);"
230,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
231,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`, `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
232,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, --
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
233,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	PRIMARY KEY (`bond_id`),
);"
234,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	PRIMARY KEY (`atom_id`),
);"
235,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `b`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
236,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	PRIMARY KEY (`atom_id`),
);"
237,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
238,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);"
239,"CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
);"
240,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);"
241,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
242,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
243,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`element` TEXT DEFAULT NULL, -- description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
244,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
245,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`element` TEXT DEFAULT NULL, -- examples: `i`
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	PRIMARY KEY (`bond_id`),
);"
246,"CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	PRIMARY KEY (`atom_id`),
);"
247,"CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);"
248,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, --
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
249,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);"
250,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
251,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
252,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);"
253,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);"
254,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`element` TEXT DEFAULT NULL, -- description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
255,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`, `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, --
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
256,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`element` TEXT DEFAULT NULL, -- examples: `c`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);"
257,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`element` TEXT DEFAULT NULL, -- description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
258,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`element` TEXT DEFAULT NULL, -- description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, --
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);"
259,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, --
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`element` TEXT DEFAULT NULL, --
	PRIMARY KEY (`atom_id`),
);"
260,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `p`
	PRIMARY KEY (`atom_id`),
);"
261,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
262,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
263,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `c`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
264,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
265,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
266,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
267,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
268,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, --
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);"
269,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`element` TEXT DEFAULT NULL, -- examples: `i`
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	PRIMARY KEY (`bond_id`),
);"
270,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `c`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`, `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
271,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`element` TEXT DEFAULT NULL, -- examples: `c`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);"
272,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `i`
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, --
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
273,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `c`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
274,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `i`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
275,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);"
276,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, --
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	PRIMARY KEY (`atom_id`),
);"
277,"CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	PRIMARY KEY (`bond_id`),
);"
278,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
279,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, --
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, --
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
280,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`, `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
281,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
282,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, --
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`, `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
283,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `c`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`, `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
284,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, --
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
285,"CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	PRIMARY KEY (`bond_id`),
);"
286,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, --
	PRIMARY KEY (`molecule_id`),
);"
287,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);"
288,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
289,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
290,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);"
291,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
292,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, --
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	PRIMARY KEY (`molecule_id`),
);"
293,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
294,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, --
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
295,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
296,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	PRIMARY KEY (`atom_id`),
);"
297,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `c`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
298,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
299,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
300,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	PRIMARY KEY (`atom_id`),
);"
301,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);"
302,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);"
303,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, --
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
304,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
305,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, --
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	PRIMARY KEY (`atom_id`),
);"
306,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, --
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
307,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
308,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`element` TEXT DEFAULT NULL, -- examples: `c`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
309,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
310,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
311,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, --
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);"
312,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
313,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	PRIMARY KEY (`atom_id`),
);"
314,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);"
315,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
316,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `c`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
317,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `c`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
318,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	PRIMARY KEY (`bond_id`),
);"
319,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);"
320,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, --
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
321,"CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, --
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	PRIMARY KEY (`atom_id`),
);"
322,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: the unique id of atoms
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);"
323,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`, `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
324,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);"
325,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `na`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
326,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, --
	PRIMARY KEY (`atom_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, --
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
327,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
328,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, --
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
329,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
330,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
331,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
332,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	PRIMARY KEY (`molecule_id`),
);"
333,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
);"
334,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
335,"CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `o`
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, --
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	PRIMARY KEY (`molecule_id`),
);"
336,"CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `-`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);"
337,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `o`, `f`, `c`, `na`, `i`, `p`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
338,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `c`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE bond
(
	`bond_id` TEXT NOT NULL, -- description: unique id representing bonds value description: TRxxx_A1_A2: TRXXX refers to which molecule A1 and A2 refers to which atom
	`molecule_id` TEXT DEFAULT NULL, -- description: identifying the molecule in which the bond appears
	`bond_type` TEXT DEFAULT NULL, -- description: type of the bond value description: -: single bond '=': double bond '#': triple bond
	PRIMARY KEY (`bond_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);

CREATE TABLE connected
(
	`atom_id` TEXT NOT NULL, -- `atom id` description: id of the first atom
	`atom_id2` TEXT NOT NULL, -- `atom id 2` description: id of the second atom
	`bond_id` TEXT DEFAULT NULL, -- `bond id` description: bond id representing bond between two atoms
	PRIMARY KEY (`atom_id`,`atom_id2`),
	FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE,
);"
339,"CREATE TABLE molecule
(
	`molecule_id` TEXT NOT NULL, -- `molecule id` description: unique id of molecule value description: ""+"" --> this molecule / compound is carcinogenic '-' this molecule is not / compound carcinogenic
	`label` TEXT DEFAULT NULL, -- examples: `+`| description: whether this molecule is carcinogenic or not
	PRIMARY KEY (`molecule_id`),
);

CREATE TABLE atom
(
	`atom_id` TEXT NOT NULL, --
	`molecule_id` TEXT DEFAULT NULL, -- `molecule id` description: identifying the molecule to which the atom belongs value description: TRXXX_i represents ith atom of molecule TRXXX
	`element` TEXT DEFAULT NULL, -- examples: `o`| description: the element of the toxicology value description:  cl: chlorine  c: carbon  h: hydrogen  o: oxygen  s: sulfur  n: nitrogen  p: phosphorus  na: sodium  br: bromine  f: fluorine  i: iodine  sn: Tin  pb: lead  te: tellurium  ca: Calcium
	PRIMARY KEY (`atom_id`),
	FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`),
);"
340,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	cardKingdomFoilId TEXT, -- `card Kingdom Foil Id` description: card Kingdom Foil Id value description: cardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful.
	cardKingdomId TEXT, -- `card Kingdom Id` description: card Kingdom Id value description: A list of all the colors in the color indicator
);"
341,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	borderColor TEXT, -- examples: `borderless`| `border Color` description: The color of the card border. value description: ""black"", ""borderless"", ""gold"", ""silver"", ""white""
	cardKingdomFoilId TEXT, -- `card Kingdom Foil Id` description: card Kingdom Foil Id value description: cardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful.
	cardKingdomId TEXT, -- `card Kingdom Id` description: card Kingdom Id value description: A list of all the colors in the color indicator
);"
342,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	faceConvertedManaCost REAL, -- `face Converted Mana Cost` description: The converted mana cost or mana value for the face for either half or part of the card. value description: if value is higher, it means that this card cost more converted mana for the face
	name TEXT, --
);"
343,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	edhrecRank INTEGER, -- `rec Rank in edh` description: The card rank on EDHRec
	frameVersion TEXT, -- examples: `2015`| `frame Version` description: The version of the card frame style. value description: ""1993"", ""1997"", ""2003"", ""2015"", ""future""
	name TEXT, --
);"
344,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	rarity TEXT, -- examples: `mythic`| description: The card printing rarity.
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	format TEXT, -- examples: `gladiator`
	status TEXT, -- examples: `Banned`| value description: • legal • banned • restricted
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
345,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	side TEXT, -- description: The identifier of the card side. value description: Used on cards with multiple faces on the same card.  if this value is empty, then it means this card doesn't have multiple faces on the same card.
	type TEXT, -- description: The type of the card as visible, including any supertypes and subtypes. value description: ""Artifact"", ""Card"", ""Conspiracy"", ""Creature"", ""Dragon"", ""Dungeon"", ""Eaturecray"", ""Elemental"", ""Elite"", ""Emblem"", ""Enchantment"", ""Ever"", ""Goblin"", ""Hero"", ""Instant"", ""Jaguar"", ""Knights"", ""Land"", ""Phenomenon"", ""Plane"", ""Planeswalker"", ""Scariest"", ""Scheme"", ""See"", ""Sorcery"", ""Sticker"", ""Summon"", ""Token"", ""Tribal"", ""Vanguard"", ""Wolf"", ""You’ll"", ""instant""
	types TEXT, -- examples: `Artifact`| description: A list of all card types of the card, including Un‑sets and gameplay variants.
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	format TEXT, -- examples: `vintage`
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
346,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, --
	power TEXT, -- description: The power of the card. value description: ∞ means infinite power null or * refers to unknown power
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	format TEXT, -- examples: `commander`
	status TEXT, -- examples: `Legal`| value description: • legal • banned • restricted
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
347,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `Stephen Daniele`
	hasContentWarning INTEGER default 0 not null, -- `has Content Warning` description: If the card marked by Wizards of the Coast (opens new window) for having sensitive content. See this official article (opens new window) for more information. value description: 0: doesn't have 1: has sensitve content or Wizards of the Coast  Cards with this property may have missing or degraded properties and values.
	text TEXT, -- description: The rules text of the card.
	uuid TEXT not null unique, --
);

CREATE TABLE rulings
(
	id INTEGER not null primary key autoincrement,
	text TEXT, --
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
348,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Sublime Epiphany`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	number TEXT, -- examples: `74s`| description: The number of the card
	uuid TEXT not null unique, --
);

CREATE TABLE rulings
(
	id INTEGER not null primary key autoincrement,
	text TEXT, --
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
349,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- description: The name of the artist that illustrated the card art.
	isPromo INTEGER default 0 not null, -- `is Promotion` description: If the card is a promotional printing. value description: 0: is not 1: is
	name TEXT, --
	printings TEXT, --
	uuid TEXT not null unique, --
);

CREATE TABLE rulings
(
	id INTEGER not null primary key autoincrement,
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
350,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	isAlternative INTEGER default 0 not null, --
	name TEXT, -- examples: `Annul`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	number TEXT, -- description: The number of the card
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);"
351,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	isAlternative INTEGER default 0 not null, -- `is Alternative` description: If the card is an alternate variation to an original printing value description: 0: is not 1: is
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Japanese`| description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);"
352,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Chinese Simplified`| description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);"
353,"CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Italian`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, --
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	name TEXT, -- description: The name of the set.
	totalSetSize INTEGER, -- `total Set Size` description: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications - however those cards are included in the set itself.
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	number TEXT, --
);"
354,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `Aaron Boyd`| description: The name of the artist that illustrated the card art.
	setCode TEXT, --
	types TEXT, -- description: A list of all card types of the card, including Un‑sets and gameplay variants.
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
);"
355,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	keywords TEXT, -- description: A list of keywords found on the card.
	name TEXT, -- examples: `Angel of Mercy`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
);"
356,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	power TEXT, -- description: The power of the card. value description: ∞ means infinite power null or * refers to unknown power
);"
357,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Duress`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	promoTypes TEXT, -- examples: `setpromo`| `promo Types` description: A list of promotional types for a card. value description: ""arenaleague"", ""boosterfun"", ""boxtopper"", ""brawldeck"", ""bundle"", ""buyabox"", ""convention"", ""datestamped"", ""draculaseries"", ""draftweekend"", ""duels"", ""event"", ""fnm"", ""gameday"", ""gateway"", ""giftbox"", ""gilded"", ""godzillaseries"", ""instore"", ""intropack"", ""jpwalker"", ""judgegift"", ""league"", ""mediainsert"", ""neonink"", ""openhouse"", ""planeswalkerstamped"", ""playerrewards"", ""playpromo"", ""premiereshop"", ""prerelease"", ""promopack"", ""release"", ""setpromo"", ""stamped"", ""textured"", ""themepack"", ""thick"", ""tourney"", ""wizardsplaynetwork""
	setCode TEXT, --
	type TEXT, --
);"
358,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	borderColor TEXT, -- `border Color` description: The color of the card border. value description: ""black"", ""borderless"", ""gold"", ""silver"", ""white""
	name TEXT, -- examples: `Ancestor's Chosen`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
);"
359,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Ancestor's Chosen`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	originalType TEXT, -- examples: `Summon - Ancestor`| description: original Type value description: The type of the card as originally printed. Includes any supertypes and subtypes.
	type TEXT, -- description: The type of the card as visible, including any supertypes and subtypes. value description: ""Artifact"", ""Card"", ""Conspiracy"", ""Creature"", ""Dragon"", ""Dungeon"", ""Eaturecray"", ""Elemental"", ""Elite"", ""Emblem"", ""Enchantment"", ""Ever"", ""Goblin"", ""Hero"", ""Instant"", ""Jaguar"", ""Knights"", ""Land"", ""Phenomenon"", ""Plane"", ""Planeswalker"", ""Scariest"", ""Scheme"", ""See"", ""Sorcery"", ""Sticker"", ""Summon"", ""Token"", ""Tribal"", ""Vanguard"", ""Wolf"", ""You’ll"", ""instant""
);"
360,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Angel of Mercy`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	setCode TEXT, -- `Set Code` description: The set printing code that the card is from.
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, --
	setCode TEXT references sets (code) on update cascade on delete cascade, --
);"
361,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	isTextless INTEGER default 0 not null, -- `is Text less` description: If the card does not have a text box. value description: 0: has a text box; 1: doesn't have a text box;
	text TEXT, --
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	status TEXT, -- examples: `Restricted`| value description: • legal • banned • restricted
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
362,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Ancestor's Chosen`, `Condemn`
	uuid TEXT not null unique, --
);

CREATE TABLE rulings
(
	id INTEGER not null primary key autoincrement,
	text TEXT, --
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	flavorText TEXT, -- `flavor Text` description: The foreign flavor text of the card.
	multiverseid INTEGER, --
	uuid TEXT references cards (uuid), --
);"
363,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	isStarter INTEGER default 0 not null, -- `is Starter` description: If the card is found in a starter deck such as Planeswalker/Brawl decks. value description: 0: is not 1: is
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	status TEXT, -- examples: `Restricted`| value description: • legal • banned • restricted
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
364,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Cloudchaser Eagle`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	status TEXT, --
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
365,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Benalish Knight`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	type TEXT, -- description: The type of the card as visible, including any supertypes and subtypes. value description: ""Artifact"", ""Card"", ""Conspiracy"", ""Creature"", ""Dragon"", ""Dungeon"", ""Eaturecray"", ""Elemental"", ""Elite"", ""Emblem"", ""Enchantment"", ""Ever"", ""Goblin"", ""Hero"", ""Instant"", ""Jaguar"", ""Knights"", ""Land"", ""Phenomenon"", ""Plane"", ""Planeswalker"", ""Scariest"", ""Scheme"", ""See"", ""Sorcery"", ""Sticker"", ""Summon"", ""Token"", ""Tribal"", ""Vanguard"", ""Wolf"", ""You’ll"", ""instant""
);"
366,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Benalish Knight`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	format TEXT, -- description: format of play value description: each value refers to different rules to play
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
367,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- description: The name of the artist that illustrated the card art.
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Phyrexian`| description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);"
368,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	borderColor TEXT, -- examples: `borderless`| `border Color` description: The color of the card border. value description: ""black"", ""borderless"", ""gold"", ""silver"", ""white""
);"
369,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	isReprint INTEGER default 0 not null, -- `is Reprint` description: If the card has been reprinted. value description: 0: has not 1: has not been
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `German`| description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `German`
);"
370,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	borderColor TEXT, -- examples: `borderless`| `border Color` description: The color of the card border. value description: ""black"", ""borderless"", ""gold"", ""silver"", ""white""
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Russian`| description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);"
371,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	isStorySpotlight INTEGER default 0 not null, -- `is Story Spotlight` description: If the card is a Story Spotlight card. value description: 0: is not 1: is
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `French`| description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);"
372,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	toughness TEXT, -- description: The toughness of the card.
);"
373,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `Aaron Boyd`| description: The name of the artist that illustrated the card art.
	name TEXT, -- description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
);"
374,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	availability TEXT, -- examples: `mtgo`
	borderColor TEXT, -- examples: `black`| `border Color` description: The color of the card border. value description: ""black"", ""borderless"", ""gold"", ""silver"", ""white""
);"
375,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	convertedManaCost REAL, -- `converted Mana Cost` description: The converted mana cost of the card. Use the manaValue property. value description: if value is higher, it means that this card cost more converted mana
);"
376,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	keywords TEXT, -- examples: `Flying`| description: A list of keywords found on the card.
	layout TEXT, -- description: The type of card layout. For a token card, this will be ""token""
);"
377,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	originalType TEXT, -- examples: `Summon - Angel`| description: original Type value description: The type of the card as originally printed. Includes any supertypes and subtypes.
	subtypes TEXT, -- examples: `Angel`| description: A list of card subtypes found after em-dash.
);"
378,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	cardKingdomFoilId TEXT, -- `card Kingdom Foil Id` description: card Kingdom Foil Id value description: cardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful.
	cardKingdomId TEXT, -- `card Kingdom Id` description: card Kingdom Id value description: A list of all the colors in the color indicator
);"
379,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	duelDeck TEXT, -- `duel Deck` description: The indicator for which duel deck the card is in.
);"
380,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	edhrecRank INTEGER, -- `rec Rank in edh` description: The card rank on EDHRec
	frameVersion TEXT, -- examples: `2015`| `frame Version` description: The version of the card frame style. value description: ""1993"", ""1997"", ""2003"", ""2015"", ""future""
);"
381,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- description: The name of the artist that illustrated the card art.
	setCode TEXT, --
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Chinese Simplified`| description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Chinese Simplified`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
);"
382,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	availability TEXT, -- examples: `paper`
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Japanese`| description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);"
383,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	borderColor TEXT, -- examples: `white`| `border Color` description: The color of the card border. value description: ""black"", ""borderless"", ""gold"", ""silver"", ""white""
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	status TEXT, -- examples: `Banned`| value description: • legal • banned • restricted
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
384,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	format TEXT, -- examples: `legacy`
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);"
385,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Beacon of Immortality`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	uuid TEXT not null unique, --
);

CREATE TABLE rulings
(
	id INTEGER not null primary key autoincrement,
	text TEXT, --
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
386,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	frameVersion TEXT, -- examples: `future`| `frame Version` description: The version of the card frame style. value description: ""1993"", ""1997"", ""2003"", ""2015"", ""future""
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	status TEXT, -- examples: `Legal`| value description: • legal • banned • restricted
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
387,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	colors TEXT, -- description: A list of all the colors in manaCost and colorIndicator. value description: Some cards may not have values, such as cards with ""Devoid"" in its text.
	name TEXT, --
	setCode TEXT, -- examples: `OGW`| `Set Code` description: The set printing code that the card is from.
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, -- examples: `OGW`| description: The set code for the set.
);"
388,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	convertedManaCost REAL, -- `converted Mana Cost` description: The converted mana cost of the card. Use the manaValue property. value description: if value is higher, it means that this card cost more converted mana
	name TEXT, --
	setCode TEXT, -- examples: `10E`| `Set Code` description: The set printing code that the card is from.
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, --
	setCode TEXT references sets (code) on update cascade on delete cascade, -- examples: `10E`
	translation TEXT, --
);"
389,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Creature Guy`
	originalType TEXT, -- examples: `Creature - Elf`| description: original Type value description: The type of the card as originally printed. Includes any supertypes and subtypes.
	uuid TEXT not null unique, --
);

CREATE TABLE rulings
(
	id INTEGER not null primary key autoincrement,
	date DATE, -- examples: `2008-04-01`
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
390,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	colors TEXT, --
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	format TEXT, --
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
391,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	colors TEXT, --
	originalType TEXT, -- examples: `Artifact`
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);"
392,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Rarity`
	rarity TEXT, -- examples: `uncommon`| description: The card printing rarity.
	uuid TEXT not null unique, --
);

CREATE TABLE rulings
(
	id INTEGER not null primary key autoincrement,
	date DATE, -- examples: `2009-10-01`
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
393,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `John Avon`
	cardKingdomFoilId TEXT, -- `card Kingdom Foil Id` description: card Kingdom Foil Id value description: cardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful.
	cardKingdomId TEXT, -- `card Kingdom Id` description: card Kingdom Id value description: A list of all the colors in the color indicator
);"
394,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	borderColor TEXT, -- examples: `white`| `border Color` description: The color of the card border. value description: ""black"", ""borderless"", ""gold"", ""silver"", ""white""
	cardKingdomFoilId TEXT, -- `card Kingdom Foil Id` description: card Kingdom Foil Id value description: cardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful.
	cardKingdomId TEXT, -- `card Kingdom Id` description: card Kingdom Id value description: A list of all the colors in the color indicator
);"
395,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `UDON`| description: The name of the artist that illustrated the card art.
	availability TEXT, -- examples: `mtgo`
	hand TEXT, -- description: The starting maximum hand size total modifier. value description: A + or - character precedes an integer.   positive maximum hand size: +1, +2, .... negative maximum hand size: -1, .... neural maximum hand size: 0....
	types TEXT, --
);"
396,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	availability TEXT, -- examples: `paper`
	frameVersion TEXT, -- examples: `1993`| `frame Version` description: The version of the card frame style. value description: ""1993"", ""1997"", ""2003"", ""2015"", ""future""
	hasContentWarning INTEGER default 0 not null, -- `has Content Warning` description: If the card marked by Wizards of the Coast (opens new window) for having sensitive content. See this official article (opens new window) for more information. value description: 0: doesn't have 1: has sensitve content or Wizards of the Coast  Cards with this property may have missing or degraded properties and values.
);"
397,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	availability TEXT, -- examples: `mtgo`, `paper`| description: A list of the card's available printing types. value description: ""arena"", ""dreamcast"", ""mtgo"", ""paper"", ""shandalar""
	borderColor TEXT, -- examples: `black`| `border Color` description: The color of the card border. value description: ""black"", ""borderless"", ""gold"", ""silver"", ""white""
	colors TEXT, --
	frameVersion TEXT, -- examples: `2003`| `frame Version` description: The version of the card frame style. value description: ""1993"", ""1997"", ""2003"", ""2015"", ""future""
	layout TEXT, -- examples: `normal`
	manaCost TEXT, -- `mana Cost` description: The mana cost of the card wrapped in brackets for each value. value description: manaCost is unconverted mana cost
);"
398,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `Rob Alexander`| description: The name of the artist that illustrated the card art.
	manaCost TEXT, -- `mana Cost` description: The mana cost of the card wrapped in brackets for each value. value description: manaCost is unconverted mana cost
);"
399,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	availability TEXT, -- examples: `arena`| description: A list of the card's available printing types. value description: ""arena"", ""dreamcast"", ""mtgo"", ""paper"", ""shandalar""
	subtypes TEXT, -- description: A list of card subtypes found after em-dash.
	supertypes TEXT, -- `super types` description: A list of card supertypes found before em-dash. value description: list of all types should be the union of subtypes and supertypes
	types TEXT, -- description: A list of all card types of the card, including Un‑sets and gameplay variants.
);"
400,"CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Spanish`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
);"
401,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	frameEffects TEXT, -- examples: `legendary`| `frame Effects` description: The visual frame effects. value description: ""colorshifted"", ""companion"", ""compasslanddfc"", ""devoid"", ""draft"", ""etched"", ""extendedart"", ""fullart"", ""inverted"", ""legendary"", ""lesson"", ""miracle"", ""mooneldrazidfc"", ""nyxtouched"", ""originpwdfc"", ""showcase"", ""snow"", ""sunmoondfc"", ""textless"", ""tombstone"", ""waxingandwaningmoondfc""
	hand TEXT, -- description: The starting maximum hand size total modifier. value description: A + or - character precedes an integer.   positive maximum hand size: +1, +2, .... negative maximum hand size: -1, .... neural maximum hand size: 0....
);"
402,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	isStorySpotlight INTEGER default 0 not null, -- `is Story Spotlight` description: If the card is a Story Spotlight card. value description: 0: is not 1: is
	isTextless INTEGER default 0 not null, -- `is Text less` description: If the card does not have a text box. value description: 0: has a text box; 1: doesn't have a text box;
	text TEXT, --
);"
403,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Spanish`| description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);"
404,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	baseSetSize INTEGER, -- `base Set Size` description: The number of cards in the set.
	code TEXT not null unique, -- description: The set code for the set.
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, --
	setCode TEXT references sets (code) on update cascade on delete cascade, --
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	number TEXT, -- examples: `309`
);"
405,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	block TEXT, -- examples: `Commander`| description: The block name the set was in.
	code TEXT not null unique, -- description: The set code for the set.
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Portuguese (Brazil)`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
);"
406,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	types TEXT, -- examples: `Creature`| description: A list of all card types of the card, including Un‑sets and gameplay variants.
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	status TEXT, -- examples: `Legal`| value description: • legal • banned • restricted
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
407,"CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `German`| description: The foreign language of card.
	type TEXT, -- description: The foreign type of the card. Includes any supertypes and subtypes.
	uuid TEXT references cards (uuid), --
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	subtypes TEXT, -- description: A list of card subtypes found after em-dash.
	supertypes TEXT, -- `super types` description: A list of card supertypes found before em-dash. value description: list of all types should be the union of subtypes and supertypes
	types TEXT, -- description: A list of all card types of the card, including Un‑sets and gameplay variants.
	uuid TEXT not null unique, --
);"
408,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	power TEXT, -- description: The power of the card. value description: ∞ means infinite power null or * refers to unknown power
	text TEXT, --
);"
409,"CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	format TEXT, -- examples: `premodern`
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);

CREATE TABLE rulings
(
	id INTEGER not null primary key autoincrement,
	text TEXT, --
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	side TEXT, -- description: The identifier of the card side. value description: Used on cards with multiple faces on the same card.  if this value is empty, then it means this card doesn't have multiple faces on the same card.
	text TEXT, --
	uuid TEXT not null unique, --
);"
410,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `Erica Yang`
	availability TEXT, -- examples: `paper`| description: A list of the card's available printing types. value description: ""arena"", ""dreamcast"", ""mtgo"", ""paper"", ""shandalar""
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	format TEXT, -- examples: `pauper`
	status TEXT, --
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
411,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- description: The name of the artist that illustrated the card art.
	text TEXT, --
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	flavorText TEXT, -- `flavor Text` description: The foreign flavor text of the card.
	uuid TEXT references cards (uuid), --
);"
412,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `Matthew D. Wilson`| description: The name of the artist that illustrated the card art.
	borderColor TEXT, -- examples: `black`| `border Color` description: The color of the card border. value description: ""black"", ""borderless"", ""gold"", ""silver"", ""white""
	colors TEXT, --
	layout TEXT, -- examples: `normal`
	name TEXT, -- examples: `Creature Guy`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	type TEXT, --
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `French`| description: The foreign language of card.
	name TEXT, -- description: The foreign name of the card.
	uuid TEXT references cards (uuid), --
);"
413,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	rarity TEXT, -- examples: `rare`| description: The card printing rarity.
	uuid TEXT not null unique, --
);

CREATE TABLE rulings
(
	id INTEGER not null primary key autoincrement,
	date DATE, -- examples: `2010-08-15`
	text TEXT, --
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
414,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	baseSetSize INTEGER, -- `base Set Size` description: The number of cards in the set.
	block TEXT, -- examples: `Ravnica`
	code TEXT not null unique, --
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, --
	setCode TEXT references sets (code) on update cascade on delete cascade, --
);"
415,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	hasContentWarning INTEGER default 0 not null, -- `has Content Warning` description: If the card marked by Wizards of the Coast (opens new window) for having sensitive content. See this official article (opens new window) for more information. value description: 0: doesn't have 1: has sensitve content or Wizards of the Coast  Cards with this property may have missing or degraded properties and values.
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	format TEXT, -- examples: `commander`
	status TEXT, -- examples: `Legal`| value description: • legal • banned • restricted
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
416,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	power TEXT, -- description: The power of the card. value description: ∞ means infinite power null or * refers to unknown power
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `French`| description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);"
417,"CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Japanese`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	type TEXT, -- examples: `expansion`| description: The expansion type of the set. value description: ""alchemy"", ""archenemy"", ""arsenal"", ""box"", ""commander"", ""core"", ""draft_innovation"", ""duel_deck"", ""expansion"", ""from_the_vault"", ""funny"", ""masterpiece"", ""masters"", ""memorabilia"", ""planechase"", ""premium_deck"", ""promo"", ""spellbook"", ""starter"", ""token"", ""treasure_chest"", ""vanguard""
);"
418,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `Daren Bader`| description: The name of the artist that illustrated the card art.
	availability TEXT, -- description: A list of the card's available printing types. value description: ""arena"", ""dreamcast"", ""mtgo"", ""paper"", ""shandalar""
	printings TEXT, -- description: A list of set printing codes the card was printed in, formatted in uppercase.
);"
419,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	borderColor TEXT, -- examples: `borderless`| `border Color` description: The color of the card border. value description: ""black"", ""borderless"", ""gold"", ""silver"", ""white""
	colors TEXT, -- description: A list of all the colors in manaCost and colorIndicator. value description: Some cards may not have values, such as cards with ""Devoid"" in its text.
	edhrecRank INTEGER, -- `rec Rank in edh` description: The card rank on EDHRec
);"
420,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	isOversized INTEGER default 0 not null, -- `is Oversized` description: If the card is oversized. value description: 0: is not 1: is
	isPromo INTEGER default 0 not null, -- `is Promotion` description: If the card is a promotional printing. value description: 0: is not 1: is
	isReprint INTEGER default 0 not null, -- `is Reprint` description: If the card has been reprinted. value description: 0: has not 1: has not been
);"
421,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Arena`
	power TEXT, -- description: The power of the card. value description: ∞ means infinite power null or * refers to unknown power
	promoTypes TEXT, -- examples: `arenaleague`| `promo Types` description: A list of promotional types for a card. value description: ""arenaleague"", ""boosterfun"", ""boxtopper"", ""brawldeck"", ""bundle"", ""buyabox"", ""convention"", ""datestamped"", ""draculaseries"", ""draftweekend"", ""duels"", ""event"", ""fnm"", ""gameday"", ""gateway"", ""giftbox"", ""gilded"", ""godzillaseries"", ""instore"", ""intropack"", ""jpwalker"", ""judgegift"", ""league"", ""mediainsert"", ""neonink"", ""openhouse"", ""planeswalkerstamped"", ""playerrewards"", ""playpromo"", ""premiereshop"", ""prerelease"", ""promopack"", ""release"", ""setpromo"", ""stamped"", ""textured"", ""themepack"", ""thick"", ""tourney"", ""wizardsplaynetwork""
	types TEXT, -- description: A list of all card types of the card, including Un‑sets and gameplay variants.
);"
422,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	multiverseId TEXT, --
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- description: The foreign language of card.
	multiverseid INTEGER, -- description: The foreign multiverse identifier of the card.
	uuid TEXT references cards (uuid), --
);"
423,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	cardKingdomFoilId TEXT, -- `card Kingdom Foil Id` description: card Kingdom Foil Id value description: cardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful.
	cardKingdomId TEXT, -- `card Kingdom Id` description: card Kingdom Id value description: A list of all the colors in the color indicator
);"
424,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	isTextless INTEGER default 0 not null, -- `is Text less` description: If the card does not have a text box. value description: 0: has a text box; 1: doesn't have a text box;
	layout TEXT, -- examples: `normal`| description: The type of card layout. For a token card, this will be ""token""
	text TEXT, --
);"
425,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	number TEXT, -- description: The number of the card
	side TEXT, -- description: The identifier of the card side. value description: Used on cards with multiple faces on the same card.  if this value is empty, then it means this card doesn't have multiple faces on the same card.
	subtypes TEXT, -- examples: `Angel`, `Wizard`
);"
426,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	mtgoCode TEXT, -- `magic the gathering online code` description: The set code for the set as it appears on Magic: The Gathering Online value description: if the value is null or empty, then it doesn't appear on Magic: The Gathering Online
	name TEXT, -- examples: `Magic 2010`
);"
427,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, -- examples: `ARC`
	mcmName TEXT, -- examples: `Archenemy`| `magic card market name`
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, --
	setCode TEXT references sets (code) on update cascade on delete cascade, -- examples: `ARC`
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	setCode TEXT, -- examples: `ARC`
);"
428,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, -- description: The set code for the set.
	name TEXT, -- description: The name of the set.
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, --
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	number TEXT, -- examples: `65`
);"
429,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	number TEXT, -- examples: `206`
	setCode TEXT, --
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, -- description: The set code for the set.
	type TEXT, -- examples: `expansion`| description: The expansion type of the set. value description: ""alchemy"", ""archenemy"", ""arsenal"", ""box"", ""commander"", ""core"", ""draft_innovation"", ""duel_deck"", ""expansion"", ""from_the_vault"", ""funny"", ""masterpiece"", ""masters"", ""memorabilia"", ""planechase"", ""premium_deck"", ""promo"", ""spellbook"", ""starter"", ""token"", ""treasure_chest"", ""vanguard""
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, --
	setCode TEXT references sets (code) on update cascade on delete cascade, --
);"
430,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	block TEXT, -- examples: `Shadowmoor`
	code TEXT not null unique, --
	name TEXT, -- examples: `Shadowmoor`
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Italian`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
);"
431,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	isFoilOnly INTEGER default 0 not null, -- `is Foil Only` description: If the set is only available in foil.
	isForeignOnly INTEGER default 0 not null, -- `is Foreign Only` description: If the set is available only outside the United States of America.
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Japanese`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Japanese`| description: The foreign language of card.
);"
432,"CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Russian`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	baseSetSize INTEGER, -- `base Set Size` description: The number of cards in the set.
	code TEXT not null unique, --
	name TEXT, --
);"
433,"CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Chinese Simplified`| description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	isOnlineOnly INTEGER default 0 not null, -- `is Online Only` description: If the card is only available in online game variations. value description: 0: is not 1: is
	uuid TEXT not null unique, --
);"
434,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	mtgoCode TEXT, -- `magic the gathering online code` description: The set code for the set as it appears on Magic: The Gathering Online value description: if the value is null or empty, then it doesn't appear on Magic: The Gathering Online
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Japanese`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
);"
435,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	borderColor TEXT, -- examples: `black`| `border Color` description: The color of the card border. value description: ""black"", ""borderless"", ""gold"", ""silver"", ""white""
	colors TEXT, --
);"
436,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	frameEffects TEXT, -- examples: `extendedart`| `frame Effects` description: The visual frame effects. value description: ""colorshifted"", ""companion"", ""compasslanddfc"", ""devoid"", ""draft"", ""etched"", ""extendedart"", ""fullart"", ""inverted"", ""legendary"", ""lesson"", ""miracle"", ""mooneldrazidfc"", ""nyxtouched"", ""originpwdfc"", ""showcase"", ""snow"", ""sunmoondfc"", ""textless"", ""tombstone"", ""waxingandwaningmoondfc""
);"
437,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	borderColor TEXT, -- examples: `white`, `black`| `border Color` description: The color of the card border. value description: ""black"", ""borderless"", ""gold"", ""silver"", ""white""
	isFullArt INTEGER default 0 not null, -- `is Full Art` description: If the card has full artwork. value description: 0: doesn't have, 1: has full artwork
);"
438,"CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, --
	setCode TEXT references sets (code) on update cascade on delete cascade, --
);"
439,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, -- examples: `ALL`| description: The set code for the set.
	name TEXT, -- description: The name of the set.
);"
440,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Fellwar Stone`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- description: The foreign language of card.
	name TEXT, -- examples: `A Pedra Fellwar`| description: The foreign name of the card.
	uuid TEXT references cards (uuid), --
);"
441,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, -- description: The set code for the set.
	releaseDate DATE, -- examples: `2003-07-28`| `release Date` description: The release date in ISO 8601 format for the set.
);"
442,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	baseSetSize INTEGER, -- `base Set Size` description: The number of cards in the set.
	block TEXT, -- examples: `Masques`, `Mirage`| description: The block name the set was in.
	code TEXT not null unique, -- description: The set code for the set.
);"
443,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, -- description: The set code for the set.
	type TEXT, -- examples: `expansion`| description: The expansion type of the set. value description: ""alchemy"", ""archenemy"", ""arsenal"", ""box"", ""commander"", ""core"", ""draft_innovation"", ""duel_deck"", ""expansion"", ""from_the_vault"", ""funny"", ""masterpiece"", ""masters"", ""memorabilia"", ""planechase"", ""premium_deck"", ""promo"", ""spellbook"", ""starter"", ""token"", ""treasure_chest"", ""vanguard""
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	setCode TEXT, -- `Set Code` description: The set printing code that the card is from.
);"
444,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	type TEXT, --
	uuid TEXT not null unique, --
	watermark TEXT, -- examples: `boros`| description: The name of the watermark on the card.
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Élite boros`| description: The foreign name of the card.
	type TEXT, -- description: The foreign type of the card. Includes any supertypes and subtypes.
	uuid TEXT references cards (uuid), --
);"
445,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	flavorText TEXT, -- `flavor Text` description: The italicized text found below the rules text that has no game function. value description: The italicized text found below the rules text that has no game function.
	type TEXT, --
	uuid TEXT not null unique, --
	watermark TEXT, -- examples: `colorpie`, `flavor`| description: The name of the watermark on the card.
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	flavorText TEXT, -- `flavor Text` description: The foreign flavor text of the card.
	language TEXT, -- description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);"
446,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	convertedManaCost REAL, -- `converted Mana Cost` description: The converted mana cost of the card. Use the manaValue property. value description: if value is higher, it means that this card cost more converted mana
	name TEXT, -- examples: `Abyssal Horror`
);"
447,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, -- description: The set code for the set.
	type TEXT, -- examples: `expansion`, `commander`| description: The expansion type of the set. value description: ""alchemy"", ""archenemy"", ""arsenal"", ""box"", ""commander"", ""core"", ""draft_innovation"", ""duel_deck"", ""expansion"", ""from_the_vault"", ""funny"", ""masterpiece"", ""masters"", ""memorabilia"", ""planechase"", ""premium_deck"", ""promo"", ""spellbook"", ""starter"", ""token"", ""treasure_chest"", ""vanguard""
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	setCode TEXT, -- `Set Code` description: The set printing code that the card is from.
);"
448,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	type TEXT, --
	uuid TEXT not null unique, --
	watermark TEXT, -- examples: `abzan`| description: The name of the watermark on the card.
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- description: The foreign name of the card.
	type TEXT, -- description: The foreign type of the card. Includes any supertypes and subtypes.
	uuid TEXT references cards (uuid), --
);"
449,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	type TEXT, -- description: The type of the card as visible, including any supertypes and subtypes. value description: ""Artifact"", ""Card"", ""Conspiracy"", ""Creature"", ""Dragon"", ""Dungeon"", ""Eaturecray"", ""Elemental"", ""Elite"", ""Emblem"", ""Enchantment"", ""Ever"", ""Goblin"", ""Hero"", ""Instant"", ""Jaguar"", ""Knights"", ""Land"", ""Phenomenon"", ""Plane"", ""Planeswalker"", ""Scariest"", ""Scheme"", ""See"", ""Sorcery"", ""Sticker"", ""Summon"", ""Token"", ""Tribal"", ""Vanguard"", ""Wolf"", ""You’ll"", ""instant""
	uuid TEXT not null unique, --
	watermark TEXT, -- examples: `azorius`| description: The name of the watermark on the card.
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- description: The foreign language of card.
	type TEXT, --
	uuid TEXT references cards (uuid), --
);"
450,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `Aaron Miller`| description: The name of the artist that illustrated the card art.
	cardKingdomFoilId TEXT, -- `card Kingdom Foil Id` description: card Kingdom Foil Id value description: cardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful.
	cardKingdomId TEXT, -- `card Kingdom Id` description: card Kingdom Id value description: A list of all the colors in the color indicator
);"
451,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	availability TEXT, -- examples: `paper`
	hand TEXT, -- description: The starting maximum hand size total modifier. value description: A + or - character precedes an integer.   positive maximum hand size: +1, +2, .... negative maximum hand size: -1, .... neural maximum hand size: 0....
);"
452,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	isTextless INTEGER default 0 not null, -- `is Text less` description: If the card does not have a text box. value description: 0: has a text box; 1: doesn't have a text box;
	name TEXT, -- description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	text TEXT, --
);"
453,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	convertedManaCost REAL, -- `converted Mana Cost` description: The converted mana cost of the card. Use the manaValue property. value description: if value is higher, it means that this card cost more converted mana
	manaCost TEXT, -- `mana Cost` description: The mana cost of the card wrapped in brackets for each value. value description: manaCost is unconverted mana cost
	name TEXT, -- examples: `Ancestor's Chosen`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
);"
454,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	borderColor TEXT, -- examples: `white`| `border Color` description: The color of the card border. value description: ""black"", ""borderless"", ""gold"", ""silver"", ""white""
	colors TEXT, -- description: A list of all the colors in manaCost and colorIndicator. value description: Some cards may not have values, such as cards with ""Devoid"" in its text.
	power TEXT, -- description: The power of the card. value description: ∞ means infinite power null or * refers to unknown power
);"
455,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	isPromo INTEGER default 0 not null, -- `is Promotion` description: If the card is a promotional printing. value description: 0: is not 1: is
	name TEXT, -- description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	side TEXT, -- description: The identifier of the card side. value description: Used on cards with multiple faces on the same card.  if this value is empty, then it means this card doesn't have multiple faces on the same card.
);"
456,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Molimo, Maro-Sorcerer`
	subtypes TEXT, -- description: A list of card subtypes found after em-dash.
	supertypes TEXT, -- `super types` description: A list of card supertypes found before em-dash. value description: list of all types should be the union of subtypes and supertypes
	types TEXT, -- examples: `Sorcery`| description: A list of all card types of the card, including Un‑sets and gameplay variants.
);"
457,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	promoTypes TEXT, -- examples: `bundle`| `promo Types` description: A list of promotional types for a card. value description: ""arenaleague"", ""boosterfun"", ""boxtopper"", ""brawldeck"", ""bundle"", ""buyabox"", ""convention"", ""datestamped"", ""draculaseries"", ""draftweekend"", ""duels"", ""event"", ""fnm"", ""gameday"", ""gateway"", ""giftbox"", ""gilded"", ""godzillaseries"", ""instore"", ""intropack"", ""jpwalker"", ""judgegift"", ""league"", ""mediainsert"", ""neonink"", ""openhouse"", ""planeswalkerstamped"", ""playerrewards"", ""playpromo"", ""premiereshop"", ""prerelease"", ""promopack"", ""release"", ""setpromo"", ""stamped"", ""textured"", ""themepack"", ""thick"", ""tourney"", ""wizardsplaynetwork""
	purchaseUrls TEXT, -- `purchase Urls` description: Links that navigate to websites where the card can be purchased.
	types TEXT, -- description: A list of all card types of the card, including Un‑sets and gameplay variants.
);"
458,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- description: The name of the artist that illustrated the card art.
	availability TEXT, -- examples: `arena`, `mtgo`| description: A list of the card's available printing types. value description: ""arena"", ""dreamcast"", ""mtgo"", ""paper"", ""shandalar""
	borderColor TEXT, -- examples: `black`| `border Color` description: The color of the card border. value description: ""black"", ""borderless"", ""gold"", ""silver"", ""white""
	colors TEXT, --
	printings TEXT, --
);"
459,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	convertedManaCost REAL, -- `converted Mana Cost` description: The converted mana cost of the card. Use the manaValue property. value description: if value is higher, it means that this card cost more converted mana
	name TEXT, -- examples: `Serra Angel`, `Serra`, `Shrine Keeper`
);"
460,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- description: The name of the artist that illustrated the card art.
	flavorName TEXT, -- examples: `Battra, Dark Destroyer`| `flavor Name` description: The promotional card name printed above the true card name on special cards that has no game function. value description: The promotional card name printed above the true card name on special cards that has no game function.
	name TEXT, -- examples: `Dark Depths`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
);"
461,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	convertedManaCost REAL, -- `converted Mana Cost` description: The converted mana cost of the card. Use the manaValue property. value description: if value is higher, it means that this card cost more converted mana
	frameVersion TEXT, -- examples: `2003`| `frame Version` description: The version of the card frame style. value description: ""1993"", ""1997"", ""2003"", ""2015"", ""future""
	name TEXT, -- description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
);"
462,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Ancestor's Chosen`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	setCode TEXT, --
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Italian`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, --
);"
463,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Angel of Mercy`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	setCode TEXT, --
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, --
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, --
);"
464,"CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, -- examples: `Hauptset Zehnte Edition`
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, --
	setCode TEXT, --
);"
465,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Ancestor's Chosen`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Korean`| description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Korean`
);"
466,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `Adam Rex`| description: The name of the artist that illustrated the card art.
	setCode TEXT, -- `Set Code` description: The set printing code that the card is from.
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, -- examples: `Hauptset Zehnte Edition`
);"
467,"CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, -- examples: `Hauptset Zehnte Edition`
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	baseSetSize INTEGER, -- `base Set Size` description: The number of cards in the set.
	code TEXT not null unique, --
);"
468,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	name TEXT, -- examples: `Eighth Edition`| description: The name of the set.
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Chinese Simplified`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, -- examples: `Базовый выпуск Eighth Edition`
);"
469,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Angel of Mercy`
	setCode TEXT, --
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	mtgoCode TEXT, -- `magic the gathering online code` description: The set code for the set as it appears on Magic: The Gathering Online value description: if the value is null or empty, then it doesn't appear on Magic: The Gathering Online
);"
470,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Ancestor's Chosen`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	setCode TEXT, -- `Set Code` description: The set printing code that the card is from.
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	releaseDate DATE, -- examples: `2004-06-04`
);"
471,"CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, -- examples: `Hauptset Zehnte Edition`
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	type TEXT, -- examples: `expansion`| description: The expansion type of the set. value description: ""alchemy"", ""archenemy"", ""arsenal"", ""box"", ""commander"", ""core"", ""draft_innovation"", ""duel_deck"", ""expansion"", ""from_the_vault"", ""funny"", ""masterpiece"", ""masters"", ""memorabilia"", ""planechase"", ""premium_deck"", ""promo"", ""spellbook"", ""starter"", ""token"", ""treasure_chest"", ""vanguard""
);"
472,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	block TEXT, -- examples: `Ice Age`| description: The block name the set was in.
	code TEXT not null unique, --
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Italian`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, --
);"
473,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Adarkar Valkyrie`
	setCode TEXT, --
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	isForeignOnly INTEGER default 0 not null, -- `is Foreign Only` description: If the set is available only outside the United States of America.
);"
474,"CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Italian`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, --
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	baseSetSize INTEGER, -- `base Set Size` description: The number of cards in the set.
	code TEXT not null unique, --
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	number TEXT, -- description: The number of the card
);"
475,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	borderColor TEXT, -- examples: `black`| `border Color` description: The color of the card border. value description: ""black"", ""borderless"", ""gold"", ""silver"", ""white""
	colors TEXT, --
	name TEXT, -- examples: `Cold Snap`
	setCode TEXT, -- `Set Code` description: The set printing code that the card is from.
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	name TEXT, -- examples: `Coldsnap`
);"
476,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	convertedManaCost REAL, -- `converted Mana Cost` description: The converted mana cost of the card. Use the manaValue property. value description: if value is higher, it means that this card cost more converted mana
	name TEXT, -- examples: `Cold Snap`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	name TEXT, -- examples: `Coldsnap`| description: The name of the set.
);"
477,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `Jeremy Jarvis`, `Chippy`, `Aaron Miller`| description: The name of the artist that illustrated the card art.
	name TEXT, -- examples: `Cold Snap`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	setCode TEXT, -- `Set Code` description: The set printing code that the card is from.
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	name TEXT, -- examples: `Coldsnap`
);"
478,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Cold Snap`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	number TEXT, -- description: The number of the card
	setCode TEXT, -- `Set Code` description: The set printing code that the card is from.
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	name TEXT, -- examples: `Coldsnap`
);"
479,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	convertedManaCost REAL, -- `converted Mana Cost` description: The converted mana cost of the card. Use the manaValue property. value description: if value is higher, it means that this card cost more converted mana
	name TEXT, -- examples: `Cold Snap`
	power TEXT, --
	setCode TEXT, --
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	name TEXT, -- examples: `Coldsnap`
);"
480,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	flavorText TEXT, -- `flavor Text` description: The italicized text found below the rules text that has no game function. value description: The italicized text found below the rules text that has no game function.
	name TEXT, -- examples: `Ancestor's Chosen`
	text TEXT, -- description: The rules text of the card.
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	flavorText TEXT, -- `flavor Text` description: The foreign flavor text of the card.
	language TEXT, -- examples: `Italian`| description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);"
481,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	flavorText TEXT, -- `flavor Text` description: The italicized text found below the rules text that has no game function. value description: The italicized text found below the rules text that has no game function.
	name TEXT, -- examples: `Ancestor's Chosen`
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	flavorText TEXT, -- `flavor Text` description: The foreign flavor text of the card.
	language TEXT, -- description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);"
482,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Ancestor's Chosen`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `German`| description: The foreign language of card.
	type TEXT, --
	uuid TEXT references cards (uuid), --
);"
483,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Cold Snap`
	setCode TEXT, -- `Set Code` description: The set printing code that the card is from.
	text TEXT, -- description: The rules text of the card.
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Italian`| description: The foreign language of card.
	text TEXT, -- description: The foreign text ruling of the card.
	uuid TEXT references cards (uuid), --
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	name TEXT, -- examples: `Coldsnap`
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Italian`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
);"
484,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	convertedManaCost REAL, -- `converted Mana Cost` description: The converted mana cost of the card. Use the manaValue property. value description: if value is higher, it means that this card cost more converted mana
	name TEXT, -- examples: `Cold Snap`
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Italian`| description: The foreign language of card.
	name TEXT, -- description: The foreign name of the card.
	uuid TEXT references cards (uuid), --
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	name TEXT, -- examples: `Coldsnap`
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Italian`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
);"
485,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Reminisce`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	uuid TEXT not null unique, --
);

CREATE TABLE rulings
(
	id INTEGER not null primary key autoincrement,
	date DATE, -- examples: `2013-07-01`
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
486,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	convertedManaCost REAL, -- `converted Mana Cost` description: The converted mana cost of the card. Use the manaValue property. value description: if value is higher, it means that this card cost more converted mana
	name TEXT, -- examples: `Cold Snap`
	setCode TEXT, -- examples: `SUM`
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, -- examples: `SUM`
	name TEXT, -- examples: `Coldsnap`
);"
487,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	cardKingdomFoilId TEXT, -- `card Kingdom Foil Id` description: card Kingdom Foil Id value description: cardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful.
	cardKingdomId TEXT, -- `card Kingdom Id` description: card Kingdom Id value description: A list of all the colors in the color indicator
	name TEXT, -- examples: `Foil`
	setCode TEXT, -- examples: `SUM`
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Coldsnap`
);"
488,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, -- description: The set code for the set.
	releaseDate DATE, -- examples: `1997-03-24`| `release Date` description: The release date in ISO 8601 format for the set.
);"
489,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, -- examples: `PKHC`| description: The set code for the set.
	keyruneCode TEXT, -- examples: `KHC`| `keyrune Code` description: The matching Keyrune code for set image icons.
);"
490,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, -- examples: `SS2`
	mcmId INTEGER, -- `magic card market id` description: The Magic Card Marketset identifier.
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	mcmId TEXT, --
);"
491,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	mcmName TEXT, -- `magic card market name`
	releaseDate DATE, -- examples: `1997-03-24`
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	setCode TEXT references sets (code) on update cascade on delete cascade, --
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Magic Word`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
);"
492,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `From the Vault: Lore`
	type TEXT, -- examples: `expansion`| description: The expansion type of the set. value description: ""alchemy"", ""archenemy"", ""arsenal"", ""box"", ""commander"", ""core"", ""draft_innovation"", ""duel_deck"", ""expansion"", ""from_the_vault"", ""funny"", ""masterpiece"", ""masters"", ""memorabilia"", ""planechase"", ""premium_deck"", ""promo"", ""spellbook"", ""starter"", ""token"", ""treasure_chest"", ""vanguard""
);"
493,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Commander 2014 Oversized`, `Commander 2014`| description: The name of the set.
	parentCode TEXT, -- `parent Code` description: The parent set code for set variations like promotions, guild kits, etc.
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	isOversized INTEGER default 0 not null, -- `is Oversized` description: If the card is oversized. value description: 0: is not 1: is
);"
494,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `Jim Pavelec`| description: The name of the artist that illustrated the card art.
	hasContentWarning INTEGER default 0 not null, -- `has Content Warning` description: If the card marked by Wizards of the Coast (opens new window) for having sensitive content. See this official article (opens new window) for more information. value description: 0: doesn't have 1: has sensitve content or Wizards of the Coast  Cards with this property may have missing or degraded properties and values.
	text TEXT, -- description: The rules text of the card.
	uuid TEXT not null unique, --
);

CREATE TABLE rulings
(
	id INTEGER not null primary key autoincrement,
	text TEXT, --
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
495,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Evacuation`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	setCode TEXT, -- `Set Code` description: The set printing code that the card is from.
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	releaseDate DATE, -- examples: `1994-04-01`| `release Date` description: The release date in ISO 8601 format for the set.
);"
496,"CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, -- examples: `Rinascita di Alara`
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	baseSetSize INTEGER, -- `base Set Size` description: The number of cards in the set.
	code TEXT not null unique, --
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	number TEXT, -- description: The number of the card
);"
497,"CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, -- examples: `Huitième édition`
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	type TEXT, -- examples: `expansion`| description: The expansion type of the set. value description: ""alchemy"", ""archenemy"", ""arsenal"", ""box"", ""commander"", ""core"", ""draft_innovation"", ""duel_deck"", ""expansion"", ""from_the_vault"", ""funny"", ""masterpiece"", ""masters"", ""memorabilia"", ""planechase"", ""premium_deck"", ""promo"", ""spellbook"", ""starter"", ""token"", ""treasure_chest"", ""vanguard""
);"
498,"CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- description: The foreign name of the card.
	uuid TEXT references cards (uuid), --
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Tendo Ice Bridge`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	setCode TEXT, --
	uuid TEXT not null unique, --
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `French`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, --
);"
499,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	name TEXT, -- examples: `Salvat 2011`| description: The name of the set.
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, --
);"
500,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Fellwar Stone`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	uuid TEXT not null unique, --
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Japanese`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, --
);"
501,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	convertedManaCost REAL, -- `converted Mana Cost` description: The converted mana cost of the card. Use the manaValue property. value description: if value is higher, it means that this card cost more converted mana
	name TEXT, -- examples: `Hero's Blade`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	setCode TEXT, --
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	name TEXT, -- examples: `Journey into Nyx`, `Journey into Nyx Hero's Path`| description: The name of the set.
);"
502,"CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, --
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, -- examples: `Ola de frío`
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	releaseDate DATE, -- examples: `1995-04-01`| `release Date` description: The release date in ISO 8601 format for the set.
);"
503,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Samite Pilgrim`| description: The name of the card. value description: Cards with multiple faces, like ""Split"" and ""Meld"" cards are given a delimiter.
	setCode TEXT, --
	type TEXT, -- description: The type of the card as visible, including any supertypes and subtypes. value description: ""Artifact"", ""Card"", ""Conspiracy"", ""Creature"", ""Dragon"", ""Dungeon"", ""Eaturecray"", ""Elemental"", ""Elite"", ""Emblem"", ""Enchantment"", ""Ever"", ""Goblin"", ""Hero"", ""Instant"", ""Jaguar"", ""Knights"", ""Land"", ""Phenomenon"", ""Plane"", ""Planeswalker"", ""Scariest"", ""Scheme"", ""See"", ""Sorcery"", ""Sticker"", ""Summon"", ""Token"", ""Tribal"", ""Vanguard"", ""Wolf"", ""You’ll"", ""instant""
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	type TEXT, -- examples: `expansion`| description: The expansion type of the set. value description: ""alchemy"", ""archenemy"", ""arsenal"", ""box"", ""commander"", ""core"", ""draft_innovation"", ""duel_deck"", ""expansion"", ""from_the_vault"", ""funny"", ""masterpiece"", ""masters"", ""memorabilia"", ""planechase"", ""premium_deck"", ""promo"", ""spellbook"", ""starter"", ""token"", ""treasure_chest"", ""vanguard""
);"
504,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	convertedManaCost REAL, -- `converted Mana Cost` description: The converted mana cost of the card. Use the manaValue property. value description: if value is higher, it means that this card cost more converted mana
	name TEXT, -- examples: `1996 World Champion`
	setCode TEXT, -- `Set Code` description: The set printing code that the card is from.
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	name TEXT, -- examples: `World Championship Decks 2004`| description: The name of the set.
);"
505,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	name TEXT, -- examples: `Mirrodin`| description: The name of the set.
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Chinese Simplified`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, -- examples: `Mirrodin`
);"
506,"CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Japanese`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, --
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, -- examples: `SUM`
	isNonFoilOnly INTEGER default 0 not null, -- `is Non Foil Only` description: If the set is only available in non-foil.
);"
507,"CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Portuguese (Brazil)`| description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, -- examples: `SUM`
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Portuguese (Brazil)`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, --
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	isOnlineOnly INTEGER default 0 not null, -- `is Online Only` description: If the card is only available in online game variations. value description: 0: is not 1: is
	uuid TEXT not null unique, --
);"
508,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `Aleksi Briclot`
	availability TEXT, -- description: A list of the card's available printing types. value description: ""arena"", ""dreamcast"", ""mtgo"", ""paper"", ""shandalar""
	isTextless INTEGER default 0 not null, -- `is Text less` description: If the card does not have a text box. value description: 0: has a text box; 1: doesn't have a text box;
	printings TEXT, -- description: A list of set printing codes the card was printed in, formatted in uppercase.
	text TEXT, --
);"
509,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	baseSetSize INTEGER, -- `base Set Size` description: The number of cards in the set.
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	number TEXT, -- description: The number of the card
);"
510,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- description: The name of the artist that illustrated the card art.
	convertedManaCost REAL, -- `converted Mana Cost` description: The converted mana cost of the card. Use the manaValue property. value description: if value is higher, it means that this card cost more converted mana
	side TEXT, -- description: The identifier of the card side. value description: Used on cards with multiple faces on the same card.  if this value is empty, then it means this card doesn't have multiple faces on the same card.
);"
511,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	cardKingdomFoilId TEXT, -- `card Kingdom Foil Id` description: card Kingdom Foil Id value description: cardKingdomFoilId, when paired with cardKingdomId that is not Null, is incredibly powerful.
	cardKingdomId TEXT, -- `card Kingdom Id` description: card Kingdom Id value description: A list of all the colors in the color indicator
	frameEffects TEXT, -- `frame Effects` description: The visual frame effects. value description: ""colorshifted"", ""companion"", ""compasslanddfc"", ""devoid"", ""draft"", ""etched"", ""extendedart"", ""fullart"", ""inverted"", ""legendary"", ""lesson"", ""miracle"", ""mooneldrazidfc"", ""nyxtouched"", ""originpwdfc"", ""showcase"", ""snow"", ""sunmoondfc"", ""textless"", ""tombstone"", ""waxingandwaningmoondfc""
);"
512,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	duelDeck TEXT, -- `duel Deck` description: The indicator for which duel deck the card is in.
	hasFoil INTEGER default 0 not null, -- `has Foil` description: If the card can be found in foil value description: 0: cannot be found 1: can be found
	power TEXT, -- description: The power of the card. value description: ∞ means infinite power null or * refers to unknown power
);"
513,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	totalSetSize INTEGER, -- `total Set Size` description: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications - however those cards are included in the set itself.
	type TEXT, -- examples: `expansion`, `commander`| description: The expansion type of the set. value description: ""alchemy"", ""archenemy"", ""arsenal"", ""box"", ""commander"", ""core"", ""draft_innovation"", ""duel_deck"", ""expansion"", ""from_the_vault"", ""funny"", ""masterpiece"", ""masters"", ""memorabilia"", ""planechase"", ""premium_deck"", ""promo"", ""spellbook"", ""starter"", ""token"", ""treasure_chest"", ""vanguard""
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	number TEXT, --
);"
514,"CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	format TEXT, -- examples: `duel`
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	manaCost TEXT, -- `mana Cost` description: The mana cost of the card wrapped in brackets for each value. value description: manaCost is unconverted mana cost
	name TEXT, --
	uuid TEXT not null unique, --
);"
515,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	originalReleaseDate TEXT, -- examples: `2016/12/1`| description: original Release Date value description: The original release date in ISO 8601(opens new window) format for a promotional card printed outside of a cycle window, such as Secret Lair Drop promotions.
	rarity TEXT, -- examples: `mythic`| description: The card printing rarity.
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	format TEXT, --
	status TEXT, -- examples: `Legal`| value description: • legal • banned • restricted
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
516,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `Volkan Baǵa`| description: The name of the artist that illustrated the card art.
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `French`| description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);"
517,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Rarity`, `Abundance`
	rarity TEXT, -- examples: `rare`| description: The card printing rarity.
	types TEXT, -- examples: `Enchantment`| description: A list of all card types of the card, including Un‑sets and gameplay variants.
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	format TEXT, --
	status TEXT, -- examples: `Legal`| value description: • legal • banned • restricted
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
518,"CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	format TEXT, -- description: format of play value description: each value refers to different rules to play
	status TEXT, -- examples: `Banned`| value description: • legal • banned • restricted
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, --
	uuid TEXT not null unique, --
);"
519,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	name TEXT, -- examples: `Battlebond`| description: The name of the set.
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, --
	setCode TEXT references sets (code) on update cascade on delete cascade, --
);"
520,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- description: The name of the artist that illustrated the card art.
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	format TEXT, -- description: format of play value description: each value refers to different rules to play
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
521,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `D. Alexander Gregory`| description: The name of the artist that illustrated the card art.
	frameVersion TEXT, -- examples: `1997`| `frame Version` description: The version of the card frame style. value description: ""1993"", ""1997"", ""2003"", ""2015"", ""future""
	hasContentWarning INTEGER default 0 not null, -- `has Content Warning` description: If the card marked by Wizards of the Coast (opens new window) for having sensitive content. See this official article (opens new window) for more information. value description: 0: doesn't have 1: has sensitve content or Wizards of the Coast  Cards with this property may have missing or degraded properties and values.
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	format TEXT, -- examples: `legacy`
	status TEXT, --
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
522,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	edhrecRank INTEGER, -- `rec Rank in edh` description: The card rank on EDHRec
	name TEXT, --
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	format TEXT, --
	status TEXT, -- examples: `Banned`| value description: • legal • banned • restricted
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
523,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	releaseDate DATE, -- examples: `2001-04-11`| `release Date` description: The release date in ISO 8601 format for the set.
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, --
	setCode TEXT references sets (code) on update cascade on delete cascade, --
);

CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	number TEXT, -- examples: `2012`
	uuid TEXT not null unique, --
);

CREATE TABLE foreign_data
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- description: The foreign language of card.
	uuid TEXT references cards (uuid), --
);"
524,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- description: The name of the artist that illustrated the card art.
	availability TEXT, -- examples: `arena`| description: A list of the card's available printing types. value description: ""arena"", ""dreamcast"", ""mtgo"", ""paper"", ""shandalar""
	borderColor TEXT, -- examples: `black`| `border Color` description: The color of the card border. value description: ""black"", ""borderless"", ""gold"", ""silver"", ""white""
);"
525,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	format TEXT, -- examples: `oldschool`| description: format of play value description: each value refers to different rules to play
	status TEXT, -- examples: `Banned`, `Restricted`| value description: • legal • banned • restricted
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
526,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `Matthew D. Wilson`| description: The name of the artist that illustrated the card art.
	availability TEXT, -- examples: `paper`
);"
527,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `Kev Walker`| description: The name of the artist that illustrated the card art.
	uuid TEXT not null unique, --
);

CREATE TABLE rulings
(
	id INTEGER not null primary key autoincrement,
	date DATE, -- examples: `2009-10-01`
	text TEXT, --
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
528,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	name TEXT, -- examples: `Devastation`, `Hour of Devastation`
	setCode TEXT, --
	uuid TEXT not null unique, --
);

CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, --
	name TEXT, -- examples: `Hour of Devastation`| description: The name of the set.
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	format TEXT, --
	status TEXT, -- examples: `Legal`| value description: • legal • banned • restricted
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
529,"CREATE TABLE sets
(
	id INTEGER not null primary key autoincrement,
	code TEXT not null unique, -- description: The set code for the set.
	name TEXT, -- description: The name of the set.
);

CREATE TABLE set_translations
(
	id INTEGER not null primary key autoincrement,
	language TEXT, -- examples: `Japanese`, `Korean`
	setCode TEXT references sets (code) on update cascade on delete cascade, --
	translation TEXT, --
);"
530,"CREATE TABLE cards
(
	id INTEGER not null primary key autoincrement,
	artist TEXT, -- examples: `Allen Williams`
	frameVersion TEXT, -- `frame Version` description: The version of the card frame style. value description: ""1993"", ""1997"", ""2003"", ""2015"", ""future""
	uuid TEXT not null unique, --
);

CREATE TABLE legalities
(
	id INTEGER not null primary key autoincrement,
	status TEXT, -- examples: `Banned`| value description: • legal • banned • restricted
	uuid TEXT references cards (uuid) on update cascade on delete cascade, --
);"
531,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Reputation INTEGER null, -- description: the user's reputation value description: The user with higher reputation has more influence.
	DisplayName TEXT null, -- examples: `Harlan`, `Jarrod`, `Jarrod Dixon`| `Display Name` description: the user's display name
);"
532,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	CreationDate DATETIME null, -- examples: `2010-07-19 19:03:27.0`| `Creation Date` description: the creation date of the user account
	DisplayName TEXT null, -- examples: `name`, `user`| `Display Name` description: the user's display name
);"
533,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	LastAccessDate DATETIME null, -- examples: `2014-01-02 09:31:02.0`| `Last Access Date` description: the last access date of the user account
);"
534,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `user`| `Display Name` description: the user's display name
	Views INTEGER null, -- description: the number of views
);"
535,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	UpVotes INTEGER null, -- description: the number of upvotes
	DownVotes INTEGER null, -- description: the number of downvotes
);"
536,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	CreationDate DATETIME null, -- examples: `2010-07-19 19:04:07.0`| `Creation Date` description: the creation date of the user account
	Views INTEGER null, -- description: the number of views
);"
537,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `csgillespie`, `user`| `Display Name` description: the user's display name
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
538,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `csgillespie`, `user`| `Display Name` description: the user's display name
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	Title TEXT null, -- description: the title of the post
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	OwnerDisplayName TEXT null, -- `Owner Display Name` description: the display name of the post owner
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
539,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, -- `Owner User Id` description: the id of the owner user
	Title TEXT null, -- description: the title of the post
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `expertalmost`| `Display Name` description: the user's display name
);"
540,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `csgillespie`| `Display Name` description: the user's display name
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	ViewCount INTEGER null, -- `View Count` description: the view count of the post value description: Higher view count means the post has higher popularity
	OwnerUserId INTEGER null, --
	Title TEXT null, -- description: the title of the post
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
541,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, -- `Owner User Id` description: the id of the owner user
	FavoriteCount INTEGER null, -- `Favorite Count` description: the total number of favorites of the post value description: more favorite count refers to more valuable posts.
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	OwnerDisplayName TEXT null, -- `Owner Display Name` description: the display name of the post owner
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `user`| `Display Name` description: the user's display name
);"
542,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	CommentCount INTEGER null, -- `Comment Count` description: the total number of comments of the post
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	OwnerDisplayName TEXT null, -- `Owner Display Name` description: the display name of the post owner
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	UserId INTEGER null, --
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `csgillespie`| `Display Name` description: the user's display name
);"
543,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `csgillespie`| `Display Name` description: the user's display name
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	AnswerCount INTEGER null, -- `Answer Count` description: the total number of answers of the post
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
544,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	Title TEXT null, --
	LastEditorUserId INTEGER null, -- `Last Editor User Id` description: the id of the last editor
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `user`| `Display Name` description: the user's display name
);"
545,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `null`, `csgillespie`
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, -- description: the id of the parent post value description: If the parent id is null, the post is the root post. Otherwise, the post is the child post of other post.
	OwnerDisplayName TEXT null, -- `Owner Display Name` description: the display name of the post owner
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
546,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	ClosedDate DATETIME null, -- examples: `2010-08-05 13:06:12.0`| `Closed Date` description: the closed date of the post value description: if ClosedDate is null or empty, it means this post is not well-finished if CloseDate is not null or empty, it means this post has well-finished.
	OwnerDisplayName TEXT null, -- `Owner Display Name` description: the display name of the post owner
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `null`| `Display Name` description: the user's display name
);"
547,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Age INTEGER null, -- description: user's age value description:  teenager: 13-18  adult: 19-65  elder: > 65
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Score INTEGER null, -- description: the score of the post
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
548,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, -- `Owner User Id` description: the id of the owner user
	Title TEXT null, -- description: the title of the post
	LastEditorUserId INTEGER null, -- `Last Editor User Id` description: the id of the last editor
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Location TEXT null, -- examples: `Location`| description: user's location
);"
549,"CREATE TABLE tags
(
	Id INTEGER not null primary key,
	TagName TEXT null, -- examples: `bayesian`| `Tag Name` description: the name of the tag
	ExcerptPostId INTEGER null, -- `Excerpt Post Id` description: the excerpt post id of the tag
	foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Body TEXT null, -- description: the body of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
550,"CREATE TABLE tags
(
	Id INTEGER not null primary key,
	Count INTEGER null, -- description: the count of posts that contain this tag value description: more counts --> this tag is more popular
	ExcerptPostId INTEGER null, -- `Excerpt Post Id` description: the excerpt post id of the tag
	foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Body TEXT null, -- description: the body of the post
	Tags TEXT null, -- description: the tag of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
551,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `csgillespie`, `user`| `Display Name` description: the user's display name
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
552,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `csgillespie`, `user`| `Display Name` description: the user's display name
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Name TEXT null, -- description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
553,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `csgillespie`| `Display Name` description: the user's display name
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Date DATETIME null, -- examples: `2010-07-19 19:59:06.0`| description: the date that the user obtained the badge
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
554,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, -- `User Id` description: the unique id of the user
	Name TEXT null, -- description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `user`| `Display Name` description: the user's display name
);"
555,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `csgillespie`, `user`| `Display Name` description: the user's display name
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Score INTEGER null, -- description: the score of the post
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
556,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `user`
	Views INTEGER null, -- description: the number of views
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
557,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Score INTEGER null, -- description: the score of the post
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Age INTEGER null, -- description: user's age value description:  teenager: 13-18  adult: 19-65  elder: > 65
);"
558,"CREATE TABLE votes
(
	Id INTEGER not null primary key,
	CreationDate DATE null, -- examples: `2010-07-20`| `Creation Date` description: the creation date of the vote
	UserId INTEGER null, -- `User Id` description: the id of the voter
);"
559,"CREATE TABLE votes
(
	Id INTEGER not null primary key,
	CreationDate DATE null, -- examples: `2010-07-26`| `Creation Date` description: the creation date of the vote
);"
560,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	Name TEXT null, -- examples: `Revival`| description: the badge name the user obtained
);"
561,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	Score INTEGER null, -- description: rating score value description: The score is from 0 to 100. The score more than 60 refers that the comment is a positive comment. The score less than 60 refers that the comment is a negative comment.
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Title TEXT null, -- description: the title of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
562,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	ViewCount INTEGER null, -- `View Count` description: the view count of the post value description: Higher view count means the post has higher popularity
	CommentCount INTEGER null, -- `Comment Count` description: the total number of comments of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
563,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	CreationDate DATETIME null, -- examples: `2010-07-19 19:18:54.0`| `Creation Date` description: the creation date of the comment
	UserId INTEGER null, -- `User Id` description: the id of the user who post the comment
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	FavoriteCount INTEGER null, -- `Favorite Count` description: the total number of favorites of the post value description: more favorite count refers to more valuable posts.
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
564,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	Text TEXT null, -- description: the detailed content of the comment
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	CommentCount INTEGER null, -- `Comment Count` description: the total number of comments of the post
	ParentId INTEGER null, -- description: the id of the parent post value description: If the parent id is null, the post is the root post. Otherwise, the post is the child post of other post.
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
565,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	CreationDate DATETIME null, -- examples: `2010-07-19 19:30:24.0`| `Creation Date` description: the creation date of the comment
	UserId INTEGER null, -- `User Id` description: the id of the user who post the comment
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	ParentId INTEGER null, --
	ClosedDate DATETIME null, -- examples: `2010-07-29 23:43:25.0`| `Closed Date` description: the closed date of the post value description: if ClosedDate is null or empty, it means this post is not well-finished if CloseDate is not null or empty, it means this post has well-finished.
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
566,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, -- `Owner User Id` description: the id of the owner user
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Reputation INTEGER null, -- description: the user's reputation value description: The user with higher reputation has more influence.
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	UserId INTEGER null, -- `User Id` description: the user who post the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
567,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `Tiago Pasqualini`, `Tiago`| `Display Name` description: the user's display name
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, -- `Owner User Id` description: the id of the owner user
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
568,"CREATE TABLE votes
(
	Id INTEGER not null primary key,
	UserId INTEGER null, -- `User Id` description: the id of the voter
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `user`| `Display Name` description: the user's display name
);"
569,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Title TEXT null, -- description: the title of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE votes
(
	Id INTEGER not null primary key,
	PostId INTEGER null, -- `Post Id` description: the id of the post that is voted
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
570,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `DatEpicCoderGuyWhoPrograms`| `Display Name` description: the user's display name
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Name TEXT null, -- description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
571,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, -- `Owner User Id` description: the id of the owner user
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
);

CREATE TABLE votes
(
	Id INTEGER not null primary key,
	PostId INTEGER null, -- `Post Id` description: the id of the post that is voted
	UserId INTEGER null, -- `User Id` description: the id of the voter
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
572,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	ViewCount INTEGER null, -- `View Count` description: the view count of the post value description: Higher view count means the post has higher popularity
	OwnerUserId INTEGER null, --
	Title TEXT null, -- description: the title of the post
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Views INTEGER null, -- description: the number of views
);"
573,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	Score INTEGER null, -- description: rating score value description: The score is from 0 to 100. The score more than 60 refers that the comment is a positive comment. The score less than 60 refers that the comment is a negative comment.
	Text TEXT null, -- description: the detailed content of the comment
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	Comment TEXT null, -- description: comments of the post
);"
574,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `user`| `Display Name` description: the user's display name
	WebsiteUrl TEXT null, -- `Website Url` description: the website url of the user account
);"
575,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `SilentGhost`, `user`| `Display Name` description: the user's display name
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Name TEXT null, -- description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
576,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	Text TEXT null, -- description: the detailed content of the comment
	UserId INTEGER null, -- `User Id` description: the id of the user who post the comment
	UserDisplayName TEXT null, -- `User Display Name` description: user's display name
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `Thank you`, `user`| `Display Name` description: the user's display name
);"
577,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `user`| `Display Name` description: the user's display name
);

CREATE TABLE comments
(
	Id INTEGER not null primary key,
	Text TEXT null, -- description: the detailed content of the comment
	UserId INTEGER null, -- `User Id` description: the id of the user who post the comment
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	UserId INTEGER null, -- `User Id` description: the user who post the post
	Comment TEXT null, -- description: comments of the post
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
578,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	Title TEXT null, -- description: the title of the post
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Reputation INTEGER null, -- description: the user's reputation value description: The user with higher reputation has more influence.
	DisplayName TEXT null, -- examples: `user`| `Display Name` description: the user's display name
);"
579,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Title TEXT null, -- description: the title of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	Text TEXT null, -- description: the detailed content of the comment
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
580,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Name TEXT null, -- examples: `Necromancer`| description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `Name`| `Display Name` description: the user's display name
);"
581,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	Title TEXT null, -- description: the title of the post
	LastEditorUserId INTEGER null, -- `Last Editor User Id` description: the id of the last editor
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `editor`, `data`
);"
582,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `Vebjorn Ljosa`
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	Title TEXT null, -- description: the title of the post
	LastEditorUserId INTEGER null, -- `Last Editor User Id` description: the id of the last editor
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
583,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `Yevgeny`
	WebsiteUrl TEXT null, --
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Score INTEGER null, -- description: the score of the post
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, -- `Last Editor User Id` description: the id of the last editor
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
584,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Title TEXT null, -- description: the title of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	Text TEXT null, -- description: the detailed content of the comment
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
585,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Title TEXT null, -- description: the title of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE votes
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	BountyAmount INTEGER null, -- `Bounty Amount` description: the amount of bounty
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
586,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	Title TEXT null, -- description: the title of the post
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE votes
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	UserId INTEGER null, --
	BountyAmount INTEGER null, -- `Bounty Amount` description: the amount of bounty
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `user`| `Display Name` description: the user's display name
);"
587,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Score INTEGER null, -- description: the score of the post
	ViewCount INTEGER null, -- `View Count` description: the view count of the post value description: Higher view count means the post has higher popularity
	Title TEXT null, -- description: the title of the post
	Tags TEXT null, -- description: the tag of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	Score INTEGER null, -- description: rating score value description: The score is from 0 to 100. The score more than 60 refers that the comment is a positive comment. The score less than 60 refers that the comment is a negative comment.
	Text TEXT null, --
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE tags
(
	Id INTEGER not null primary key,
	Count INTEGER null, -- description: the count of posts that contain this tag value description: more counts --> this tag is more popular
	ExcerptPostId INTEGER null, --
	foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
588,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	UserId INTEGER null, -- `User Id` description: the id of the user who post the comment
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	Comment TEXT null, -- description: comments of the post
);"
589,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Reputation INTEGER null, -- description: the user's reputation value description: The user with higher reputation has more influence.
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, -- `User Id` description: the unique id of the user
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
590,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Views INTEGER null, -- description: the number of views
);

CREATE TABLE votes
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
591,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	Name TEXT null, -- examples: `Supporter`| description: the badge name the user obtained
	Date DATETIME null, -- examples: `2010-07-19 19:39:09.0`| description: the date that the user obtained the badge
);"
592,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, -- `User Id` description: the unique id of the user
	Name TEXT null, -- description: the badge name the user obtained
);

CREATE TABLE tags
(
	Id INTEGER not null primary key,
	Count INTEGER null, -- description: the count of posts that contain this tag value description: more counts --> this tag is more popular
);"
593,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Location TEXT null, -- examples: `Location`, `York`, `New York`| description: user's location
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, -- `User Id` description: the unique id of the user
	Name TEXT null, -- examples: `Teacher`, `Supporter`| description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
594,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, -- `Owner User Id` description: the id of the owner user
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Reputation INTEGER null, -- description: the user's reputation value description: The user with higher reputation has more influence.
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, -- `Post Id` description: the unique id of the post
	UserId INTEGER null, -- `User Id` description: the user who post the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
595,"CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, -- `Post Id` description: the unique id of the post
	UserId INTEGER null, -- `User Id` description: the user who post the post
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Views INTEGER null, -- description: the number of views
);"
596,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	UserId INTEGER null, -- `User Id` description: the id of the user who post the comment
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `user`
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Name TEXT null, -- description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	UserId INTEGER null, -- `User Id` description: the user who post the post
	Comment TEXT null, --
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
597,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Location TEXT null, -- examples: `Location`, `India`| description: user's location
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, -- `User Id` description: the unique id of the user
	Name TEXT null, -- examples: `Teacher`| description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
598,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	Name TEXT null, -- examples: `Student`| description: the badge name the user obtained
	Date DATETIME null, -- examples: `2010-07-19 19:39:10.0`| description: the date that the user obtained the badge
);"
599,"CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostHistoryTypeId INTEGER null, -- `Post History Type Id` description: the id of the post history type
	PostId INTEGER null, -- `Post Id` description: the unique id of the post
);

CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, -- `Post Id` description: the unique id of the post
	UserId INTEGER null, -- `User Id` description: the id of the user who post the comment
);"
600,"CREATE TABLE postLinks
(
	Id INTEGER not null primary key,
	PostId INTEGER null, -- `Post Id` description: the post id
	RelatedPostId INTEGER null, -- `Related Post Id` description: the id of the related post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (RelatedPostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	ViewCount INTEGER null, -- `View Count` description: the view count of the post value description: Higher view count means the post has higher popularity
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
601,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Score INTEGER null, -- description: the score of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postLinks
(
	Id INTEGER not null primary key,
	PostId INTEGER null, -- `Post Id` description: the post id
	RelatedPostId INTEGER null, -- `Related Post Id` description: the id of the related post
	LinkTypeId INTEGER null, -- `Link Type Id` description: the id of the link type
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (RelatedPostId) references posts (Id) on update cascade on delete cascade,
);"
602,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Score INTEGER null, -- description: the score of the post
	OwnerUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE votes
(
	Id INTEGER not null primary key,
	PostId INTEGER null, -- `Post Id` description: the id of the post that is voted
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
603,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	CreaionDate DATETIME null, -- examples: `2010-07-19 19:12:57.0`| `Creation Date` description: the creation date of the post
	OwnerUserId INTEGER null, -- `Owner User Id` description: the id of the owner user
	FavoriteCount INTEGER null, -- `Favorite Count` description: the total number of favorites of the post value description: more favorite count refers to more valuable posts.
	LastEditorUserId INTEGER null, -- `Last Editor User Id` description: the id of the last editor
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	UserId INTEGER null, -- `User Id` description: the user who post the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE votes
(
	Id INTEGER not null primary key,
	PostId INTEGER null, -- `Post Id` description: the id of the post that is voted
	CreationDate DATE null, -- examples: `2010-07-22`| `Creation Date` description: the creation date of the vote
	UserId INTEGER null, --
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
604,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	UpVotes INTEGER null, -- description: the number of upvotes
	Age INTEGER null, -- description: user's age value description:  teenager: 13-18  adult: 19-65  elder: > 65
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE tags
(
	Id INTEGER not null primary key,
	Count INTEGER null, --
	ExcerptPostId INTEGER null, --
	foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade,
);"
605,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, -- `User Id` description: the unique id of the user
	Name TEXT null, -- examples: `Announcer`| description: the badge name the user obtained
);"
606,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	Name TEXT null, -- description: the badge name the user obtained
	Date DATETIME null, -- examples: `2010-07-19 19:49:07.0`| description: the date that the user obtained the badge
);"
607,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	Score INTEGER null, -- description: rating score value description: The score is from 0 to 100. The score more than 60 refers that the comment is a positive comment. The score less than 60 refers that the comment is a negative comment.
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	Comment TEXT null, -- description: comments of the post
);"
608,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	Text TEXT null, -- description: the detailed content of the comment
	CreationDate DATETIME null, -- examples: `2010-07-19 19:25:47.0`| `Creation Date` description: the creation date of the comment
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	Comment TEXT null, -- description: comments of the post
);"
609,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Score INTEGER null, -- description: the score of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
610,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Reputation INTEGER null, -- description: the user's reputation value description: The user with higher reputation has more influence.
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Name TEXT null, -- description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
611,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Date DATETIME null, -- examples: `2010-07-19 19:59:07.0`| description: the date that the user obtained the badge
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Reputation INTEGER null, -- description: the user's reputation value description: The user with higher reputation has more influence.
);"
612,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `Pierre`| `Display Name` description: the user's display name
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Name TEXT null, -- description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
613,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Location TEXT null, -- examples: `Location`, `NY`, `Rochester, NY`| description: user's location
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Date DATETIME null, -- examples: `2010-07-19 19:59:07.0`| description: the date that the user obtained the badge
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
614,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, -- `User Id` description: the unique id of the user
	Name TEXT null, -- examples: `Teacher`| description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
);"
615,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, -- `User Id` description: the unique id of the user
	Name TEXT null, -- examples: `Organizer`| description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Age INTEGER null, -- description: user's age value description:  teenager: 13-18  adult: 19-65  elder: > 65
);"
616,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	CreaionDate DATETIME null, -- examples: `2010-07-19 19:12:57.0`| `Creation Date` description: the creation date of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	Score INTEGER null, -- description: rating score value description: The score is from 0 to 100. The score more than 60 refers that the comment is a positive comment. The score less than 60 refers that the comment is a negative comment.
	CreationDate DATETIME null, -- examples: `2010-07-19 19:19:56.0`| `Creation Date` description: the creation date of the comment
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
617,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	Text TEXT null, -- description: the detailed content of the comment
	CreationDate DATETIME null, -- examples: `2010-07-19 19:18:54.0`| `Creation Date` description: the creation date of the comment
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	CreaionDate DATETIME null, -- examples: `2010-07-19 19:14:44.0`| `Creation Date` description: the creation date of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
618,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Location TEXT null, -- examples: `Location`, `Vienna`, `Austria`| description: user's location
	Age INTEGER null, -- description: user's age value description:  teenager: 13-18  adult: 19-65  elder: > 65
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
619,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, -- `User Id` description: the unique id of the user
	Name TEXT null, -- examples: `Supporter`| description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Age INTEGER null, -- description: user's age value description:  teenager: 13-18  adult: 19-65  elder: > 65
);"
620,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Date DATETIME null, -- examples: `2010-07-19 19:49:06.0`| description: the date that the user obtained the badge
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Views INTEGER null, -- description: the number of views
);"
621,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Reputation INTEGER null, -- description: the user's reputation value description: The user with higher reputation has more influence.
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, -- `User Id` description: the unique id of the user
	Name TEXT null, -- description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
622,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `Sharpie`| `Display Name` description: the user's display name
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, -- `User Id` description: the unique id of the user
	Name TEXT null, -- description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
623,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Age INTEGER null, -- description: user's age value description:  teenager: 13-18  adult: 19-65  elder: > 65
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Name TEXT null, -- examples: `Supporter`| description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
624,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `user`| `Display Name` description: the user's display name
);"
625,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Location TEXT null, -- examples: `Location`, `York`, `New York`| description: user's location
);"
626,"CREATE TABLE votes
(
	Id INTEGER not null primary key,
	CreationDate DATE null, -- examples: `2010-07-23`| `Creation Date` description: the creation date of the vote
);"
627,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Age INTEGER null, -- description: user's age value description:  teenager: 13-18  adult: 19-65  elder: > 65
);"
628,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `user`| `Display Name` description: the user's display name
	Views INTEGER null, -- description: the number of views
);"
629,"CREATE TABLE votes
(
	Id INTEGER not null primary key,
	CreationDate DATE null, -- examples: `2010-07-27`| `Creation Date` description: the creation date of the vote
);

CREATE TABLE tags
(
	Id INTEGER not null primary key,
	Count INTEGER null, --
);"
630,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `John Stauffer`, `John`| `Display Name` description: the user's display name
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	Tags TEXT null, -- description: the tag of the post
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
631,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `Daniel`, `Daniel Vassallo`| `Display Name` description: the user's display name
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
632,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `Harlan`| `Display Name` description: the user's display name
);

CREATE TABLE votes
(
	Id INTEGER not null primary key,
	UserId INTEGER null, -- `User Id` description: the id of the voter
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
633,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `slashnick`
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	AnswerCount INTEGER null, -- `Answer Count` description: the total number of answers of the post
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE votes
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	UserId INTEGER null, --
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
634,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `Noah`, `Noah Snyder`, `Harvey Motulsky`, `Harvey`
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	ViewCount INTEGER null, -- `View Count` description: the view count of the post value description: Higher view count means the post has higher popularity
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
635,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `Parker`, `Matt Parker`, `Matt`
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE votes
(
	Id INTEGER not null primary key,
	PostId INTEGER null, -- `Post Id` description: the id of the post that is voted
	UserId INTEGER null, -- `User Id` description: the id of the voter
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
636,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `Neil McGuigan`, `Neil`
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	Score INTEGER null, -- description: rating score value description: The score is from 0 to 100. The score more than 60 refers that the comment is a positive comment. The score less than 60 refers that the comment is a negative comment.
	UserId INTEGER null, -- `User Id` description: the id of the user who post the comment
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	UserId INTEGER null, --
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
637,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `Mark`, `Mark Meckes`| `Display Name` description: the user's display name
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	Tags TEXT null, -- description: the tag of the post
	CommentCount INTEGER null, -- `Comment Count` description: the total number of comments of the post
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE tags
(
	Id INTEGER not null primary key,
	TagName TEXT null, -- `Tag Name` description: the name of the tag
	ExcerptPostId INTEGER null, -- `Excerpt Post Id` description: the excerpt post id of the tag
	foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	UserId INTEGER null, --
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
638,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Name TEXT null, -- examples: `Organizer`| description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `Name`| `Display Name` description: the user's display name
);"
639,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	Tags TEXT null, -- description: the tag of the post
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `Community`
);

CREATE TABLE tags
(
	Id INTEGER not null primary key,
	TagName TEXT null, -- examples: `percentage`| `Tag Name` description: the name of the tag
	ExcerptPostId INTEGER null, --
	foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE votes
(
	Id INTEGER not null primary key,
	PostId INTEGER null, -- `Post Id` description: the id of the post that is voted
	UserId INTEGER null, --
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
640,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `mornington`, `Amos`| `Display Name` description: the user's display name
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	ViewCount INTEGER null, -- `View Count` description: the view count of the post value description: Higher view count means the post has higher popularity
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
641,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	Name TEXT null, -- examples: `Commentator`| description: the badge name the user obtained
	Date DATETIME null, -- examples: `2010-07-19 19:44:07.0`| description: the date that the user obtained the badge
);"
642,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	CreaionDate DATETIME null, -- examples: `2010-07-19 19:12:12.0`| `Creation Date` description: the creation date of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
643,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `user`| `Display Name` description: the user's display name
	Views INTEGER null, -- description: the number of views
	Age INTEGER null, -- description: user's age value description:  teenager: 13-18  adult: 19-65  elder: > 65
);"
644,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Title TEXT null, -- description: the title of the post
	LastEditorUserId INTEGER null, -- `Last Editor User Id` description: the id of the last editor
	LastEditDate DATETIME null, -- examples: `2010-07-19 20:43:02.0`| `Last Edit Date` description: the last edit date
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
645,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	Score INTEGER null, -- description: rating score value description: The score is from 0 to 100. The score more than 60 refers that the comment is a positive comment. The score less than 60 refers that the comment is a negative comment.
	UserId INTEGER null, -- `User Id` description: the id of the user who post the comment
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	Comment TEXT null, -- description: comments of the post
);"
646,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	Score INTEGER null, -- description: rating score value description: The score is from 0 to 100. The score more than 60 refers that the comment is a positive comment. The score less than 60 refers that the comment is a negative comment.
	UserId INTEGER null, -- `User Id` description: the id of the user who post the comment
	UserDisplayName TEXT null, -- `User Display Name` description: user's display name
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	Title TEXT null, -- description: the title of the post
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	UserId INTEGER null, -- `User Id` description: the user who post the post
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `user`| `Display Name` description: the user's display name
);"
647,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Location TEXT null, -- examples: `Location`, `north`, `North Pole`| description: user's location
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Name TEXT null, -- description: the badge name the user obtained
	Date DATETIME null, -- examples: `2010-07-19 19:39:08.0`| description: the date that the user obtained the badge
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
648,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	FavoriteCount INTEGER null, -- `Favorite Count` description: the total number of favorites of the post value description: more favorite count refers to more valuable posts.
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`| `Display Name` description: the user's display name
	WebsiteUrl TEXT null, -- `Website Url` description: the website url of the user account
);"
649,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Title TEXT null, -- description: the title of the post
	LastEditDate DATETIME null, -- examples: `2013-06-07 06:38:10.0`| `Last Edit Date` description: the last edit date
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE tags
(
	Id INTEGER not null primary key,
	Count INTEGER null, -- description: the count of posts that contain this tag value description: more counts --> this tag is more popular
	ExcerptPostId INTEGER null, -- `Excerpt Post Id` description: the excerpt post id of the tag
	foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade,
);"
650,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Name TEXT null, -- examples: `outliers`| description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	LastAccessDate DATETIME null, -- examples: `2014-07-23 21:28:18.0`| `Last Access Date` description: the last access date of the user account
	Location TEXT null, -- examples: `Location`| description: user's location
);"
651,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Title TEXT null, -- description: the title of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postLinks
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	RelatedPostId INTEGER null, -- `Related Post Id` description: the id of the related post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (RelatedPostId) references posts (Id) on update cascade on delete cascade,
);"
652,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `Samuel`| `Display Name` description: the user's display name
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	CreaionDate DATETIME null, -- examples: `2010-07-19 19:12:57.0`| `Creation Date` description: the creation date of the post
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Name TEXT null, -- description: the badge name the user obtained
	Date DATETIME null, -- examples: `2010-07-19 19:49:06.0`| description: the date that the user obtained the badge
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	UserId INTEGER null, --
	UserDisplayName TEXT null, -- examples: `Samuel`
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE postLinks
(
	Id INTEGER not null primary key,
	CreationDate DATETIME null, -- examples: `2010-07-27 23:22:51.0`| `Creation Date` description: the creation date of the post link
	PostId INTEGER null, -- `Post Id` description: the post id
	RelatedPostId INTEGER null, --
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (RelatedPostId) references posts (Id) on update cascade on delete cascade,
);"
653,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	ViewCount INTEGER null, -- `View Count` description: the view count of the post value description: Higher view count means the post has higher popularity
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	OwnerDisplayName TEXT null, -- `Owner Display Name` description: the display name of the post owner
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Views INTEGER null, --
);"
654,"CREATE TABLE tags
(
	Id INTEGER not null primary key,
	TagName TEXT null, -- examples: `hypothesis-testing`
	ExcerptPostId INTEGER null, -- `Excerpt Post Id` description: the excerpt post id of the tag
	foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, -- `Owner User Id` description: the id of the owner user
	LastEditorUserId INTEGER null, -- `Last Editor User Id` description: the id of the last editor
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `user`| `Display Name` description: the user's display name
	Location TEXT null, -- examples: `Location`
);"
655,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Title TEXT null, -- description: the title of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postLinks
(
	Id INTEGER not null primary key,
	PostId INTEGER null, -- `Post Id` description: the post id
	RelatedPostId INTEGER null, -- `Related Post Id` description: the id of the related post
	LinkTypeId INTEGER null, -- `Link Type Id` description: the id of the link type
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (RelatedPostId) references posts (Id) on update cascade on delete cascade,
);"
656,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Score INTEGER null, -- description: the score of the post
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, -- description: the id of the parent post value description: If the parent id is null, the post is the root post. Otherwise, the post is the child post of other post.
	OwnerDisplayName TEXT null, -- examples: `nullglob`| `Owner Display Name` description: the display name of the post owner
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `null`
);"
657,"CREATE TABLE votes
(
	Id INTEGER not null primary key,
	VoteTypeId INTEGER null, -- `Vote Type Id` description: the id of the vote type
	UserId INTEGER null, -- `User Id` description: the id of the voter
	BountyAmount INTEGER null, -- `Bounty Amount` description: the amount of bounty
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `user`| `Display Name` description: the user's display name
	WebsiteUrl TEXT null, -- `Website Url` description: the website url of the user account
);"
658,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	ViewCount INTEGER null, -- `View Count` description: the view count of the post value description: Higher view count means the post has higher popularity
	Title TEXT null, -- description: the title of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
659,"CREATE TABLE tags
(
	Id INTEGER not null primary key,
	Count INTEGER null, -- description: the count of posts that contain this tag value description: more counts --> this tag is more popular
	ExcerptPostId INTEGER null, -- `Excerpt Post Id` description: the excerpt post id of the tag
	foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Tags TEXT null, -- description: the tag of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
660,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, -- `Owner User Id` description: the id of the owner user
	FavoriteCount INTEGER null, -- `Favorite Count` description: the total number of favorites of the post value description: more favorite count refers to more valuable posts.
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
661,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Reputation INTEGER null, -- description: the user's reputation value description: The user with higher reputation has more influence.
	Age INTEGER null, -- description: user's age value description:  teenager: 13-18  adult: 19-65  elder: > 65
);"
662,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE votes
(
	Id INTEGER not null primary key,
	PostId INTEGER null, -- `Post Id` description: the id of the post that is voted
	CreationDate DATE null, -- examples: `2010-07-20`| `Creation Date` description: the creation date of the vote
	BountyAmount INTEGER null, -- `Bounty Amount` description: the amount of bounty
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
663,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Age INTEGER null, -- description: user's age value description:  teenager: 13-18  adult: 19-65  elder: > 65
);"
664,"CREATE TABLE tags
(
	Id INTEGER not null primary key,
	Count INTEGER null, -- description: the count of posts that contain this tag value description: more counts --> this tag is more popular
	ExcerptPostId INTEGER null, --
	foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Score INTEGER null, -- description: the score of the post
	ViewCount INTEGER null, -- `View Count` description: the view count of the post value description: Higher view count means the post has higher popularity
	Tags TEXT null, -- description: the tag of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
665,"CREATE TABLE postLinks
(
	Id INTEGER not null primary key,
	CreationDate DATETIME null, -- examples: `2010-07-29 19:01:22.0`| `Creation Date` description: the creation date of the post link
	PostId INTEGER null, --
	RelatedPostId INTEGER null, --
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (RelatedPostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	AnswerCount INTEGER null, -- `Answer Count` description: the total number of answers of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE tags
(
	Id INTEGER not null primary key,
	Count INTEGER null, -- description: the count of posts that contain this tag value description: more counts --> this tag is more popular
	ExcerptPostId INTEGER null, --
	foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade,
);"
666,"CREATE TABLE votes
(
	Id INTEGER not null primary key,
	PostId INTEGER null, -- `Post Id` description: the id of the post that is voted
	UserId INTEGER null, -- `User Id` description: the id of the voter
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	FavoriteCount INTEGER null, -- `Favorite Count` description: the total number of favorites of the post value description: more favorite count refers to more valuable posts.
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
667,"CREATE TABLE postLinks
(
	Id INTEGER not null primary key,
	CreationDate DATETIME null, -- examples: `2010-08-04 11:21:07.0`| `Creation Date` description: the creation date of the post link
	PostId INTEGER null, --
	RelatedPostId INTEGER null, --
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (RelatedPostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	CreaionDate DATETIME null, -- examples: `2010-07-19 19:17:47.0`| `Creation Date` description: the creation date of the post
	Title TEXT null, -- description: the title of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
668,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Name TEXT null, -- description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `Name`, `user`| `Display Name` description: the user's display name
);"
669,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `chl`
);

CREATE TABLE votes
(
	Id INTEGER not null primary key,
	CreationDate DATE null, -- examples: `2010-07-26`| `Creation Date` description: the creation date of the vote
	UserId INTEGER null, -- `User Id` description: the id of the voter
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
670,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Age INTEGER null, -- description: user's age value description:  teenager: 13-18  adult: 19-65  elder: > 65
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	CreaionDate DATETIME null, -- examples: `2010-07-19 19:17:47.0`| `Creation Date` description: the creation date of the post
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Date DATETIME null, -- examples: `2010-07-19 19:54:06.0`
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
671,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Name TEXT null, -- examples: `Autobiographer`| description: the badge name the user obtained
	Date DATETIME null, -- examples: `2010-07-19 19:49:07.0`| description: the date that the user obtained the badge
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `user`| `Display Name` description: the user's display name
);"
672,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Location TEXT null, -- examples: `Location`, `United Kingdom`| description: user's location
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	FavoriteCount INTEGER null, -- `Favorite Count` description: the total number of favorites of the post value description: more favorite count refers to more valuable posts.
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
673,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Age INTEGER null, -- description: user's age value description:  teenager: 13-18  adult: 19-65  elder: > 65
);

CREATE TABLE votes
(
	Id INTEGER not null primary key,
	PostId INTEGER null, -- `Post Id` description: the id of the post that is voted
	UserId INTEGER null, -- `User Id` description: the id of the voter
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
674,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Reputation INTEGER null, -- description: the user's reputation value description: The user with higher reputation has more influence.
	DisplayName TEXT null, -- examples: `name`| `Display Name` description: the user's display name
);"
675,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Reputation INTEGER null, -- description: the user's reputation value description: The user with higher reputation has more influence.
	Views INTEGER null, -- description: the number of views
);"
676,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `user`| `Display Name` description: the user's display name
	Age INTEGER null, -- description: user's age value description:  teenager: 13-18  adult: 19-65  elder: > 65
);"
677,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	CreationDate DATETIME null, -- examples: `2010-07-19 19:04:52.0`| `Creation Date` description: the creation date of the user account
	DisplayName TEXT null, -- examples: `Jay`, `Jay Stevens`| `Display Name` description: the user's display name
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	CreaionDate DATETIME null, -- examples: `2010-07-19 19:16:27.0`| `Creation Date` description: the creation date of the post
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postLinks
(
	Id INTEGER not null primary key,
	CreationDate DATETIME null, -- examples: `2010-07-28 19:36:09.0`| `Creation Date` description: the creation date of the post link
	PostId INTEGER null, --
	RelatedPostId INTEGER null, --
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (RelatedPostId) references posts (Id) on update cascade on delete cascade,
);"
678,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `Harvey Motulsky`, `Harvey`| `Display Name` description: the user's display name
	Views INTEGER null, -- description: the number of views
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	ViewCount INTEGER null, -- `View Count` description: the view count of the post value description: Higher view count means the post has higher popularity
	OwnerUserId INTEGER null, --
	Title TEXT null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postLinks
(
	Id INTEGER not null primary key,
	PostId INTEGER null, -- `Post Id` description: the post id
	RelatedPostId INTEGER null, --
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (RelatedPostId) references posts (Id) on update cascade on delete cascade,
);"
679,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Score INTEGER null, -- description: the score of the post
	OwnerUserId INTEGER null, -- `Owner User Id` description: the id of the owner user
	Title TEXT null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`| `Display Name` description: the user's display name
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Name TEXT null, --
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
680,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `Stephen`, `Stephen Turner`| `Display Name` description: the user's display name
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Score INTEGER null, -- description: the score of the post
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
681,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `user`| `Display Name` description: the user's display name
	Views INTEGER null, -- description: the number of views
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	CreaionDate DATETIME null, -- examples: `2010-07-19 19:14:43.0`
	ViewCount INTEGER null, -- `View Count` description: the view count of the post value description: Higher view count means the post has higher popularity
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
682,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	CreaionDate DATETIME null, -- examples: `2010-07-19 19:16:27.0`| `Creation Date` description: the creation date of the post
	FavoriteCount INTEGER null, -- `Favorite Count` description: the total number of favorites of the post value description: more favorite count refers to more valuable posts.
	ParentId INTEGER null, --
	OwnerDisplayName TEXT null, -- `Owner Display Name` description: the display name of the post owner
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE votes
(
	Id INTEGER not null primary key,
	PostId INTEGER null, -- `Post Id` description: the id of the post that is voted
	CreationDate DATE null, -- examples: `2010-07-28`| `Creation Date` description: the creation date of the vote
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
683,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	CreaionDate DATETIME null, -- examples: `2010-07-19 19:17:47.0`| `Creation Date` description: the creation date of the post
	OwnerUserId INTEGER null, -- `Owner User Id` description: the id of the owner user
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Reputation INTEGER null, -- description: the user's reputation value description: The user with higher reputation has more influence.
);

CREATE TABLE tags
(
	Id INTEGER not null primary key,
	Count INTEGER null, -- description: the count of posts that contain this tag value description: more counts --> this tag is more popular
	ExcerptPostId INTEGER null, --
	foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade,
);"
684,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Age INTEGER null, -- description: user's age value description:  teenager: 13-18  adult: 19-65  elder: > 65
);"
685,"CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	UserId INTEGER null, -- `User Id` description: the user who post the post
	Text TEXT null, --
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	ViewCount INTEGER null, -- `View Count` description: the view count of the post value description: Higher view count means the post has higher popularity
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, -- `Last Editor User Id` description: the id of the last editor
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `user`| `Display Name` description: the user's display name
	Views INTEGER null, -- description: the number of views
);"
686,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	ViewCount INTEGER null, -- `View Count` description: the view count of the post value description: Higher view count means the post has higher popularity
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Views INTEGER null, -- description: the number of views
);"
687,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Score INTEGER null, -- description: the score of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	Score INTEGER null, -- description: rating score value description: The score is from 0 to 100. The score more than 60 refers that the comment is a positive comment. The score less than 60 refers that the comment is a negative comment.
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
688,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	ViewCount INTEGER null, -- `View Count` description: the view count of the post value description: Higher view count means the post has higher popularity
	CommentCount INTEGER null, -- `Comment Count` description: the total number of comments of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	Comment TEXT null, --
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
689,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, -- `Last Editor User Id` description: the id of the last editor
	LastEditDate DATETIME null, -- examples: `2010-10-18 07:57:31.0`| `Last Edit Date` description: the last edit date
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `user`
	Location TEXT null, -- examples: `Location`
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	UserId INTEGER null, --
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
690,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Name TEXT null, -- description: the badge name the user obtained
	Date DATETIME null, -- examples: `2010-07-19 19:39:07.0`| description: the date that the user obtained the badge
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `Name`, `Emmett`| `Display Name` description: the user's display name
);"
691,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	UpVotes INTEGER null, -- description: the number of upvotes
	Age INTEGER null, -- description: user's age value description:  teenager: 13-18  adult: 19-65  elder: > 65
);"
692,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	CreationDate DATETIME null, -- examples: `2010-07-19 06:55:26.0`| `Creation Date` description: the creation date of the user account
	DisplayName TEXT null, -- examples: `name`, `user`, `Zolomon`| `Display Name` description: the user's display name
);

CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Name TEXT null, -- description: the badge name the user obtained
	Date DATETIME null, -- examples: `2010-07-19 19:59:07.0`| description: the date that the user obtained the badge
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
693,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	CreationDate DATETIME null, -- examples: `2010-07-19 19:03:27.0`| `Creation Date` description: the creation date of the user account
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, -- `Last Editor User Id` description: the id of the last editor
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	CreationDate DATETIME null, -- examples: `2010-07-19 19:15:52.0`| `Creation Date` description: the creation date of the comment
	UserId INTEGER null, -- `User Id` description: the id of the user who post the comment
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	UserId INTEGER null, -- `User Id` description: the user who post the post
	Comment TEXT null, --
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
694,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	OwnerUserId INTEGER null, --
	Title TEXT null, -- description: the title of the post
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	Text TEXT null, -- description: the detailed content of the comment
	CreationDate DATETIME null, -- examples: `2010-07-19 19:20:28.0`| `Creation Date` description: the creation date of the comment
	UserId INTEGER null, -- `User Id` description: the id of the user who post the comment
	UserDisplayName TEXT null, --
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	UserId INTEGER null, -- `User Id` description: the user who post the post
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `user`
);"
695,"CREATE TABLE badges
(
	Id INTEGER not null primary key,
	UserId INTEGER null, --
	Name TEXT null, -- examples: `Citizen Patrol`| description: the badge name the user obtained
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
);"
696,"CREATE TABLE tags
(
	Id INTEGER not null primary key,
	TagName TEXT null, -- examples: `careers`| `Tag Name` description: the name of the tag
	Count INTEGER null, -- description: the count of posts that contain this tag value description: more counts --> this tag is more popular
	ExcerptPostId INTEGER null, -- `Excerpt Post Id` description: the excerpt post id of the tag
	foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Tags TEXT null, -- description: the tag of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
697,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Reputation INTEGER null, -- description: the user's reputation value description: The user with higher reputation has more influence.
	DisplayName TEXT null, -- examples: `name`, `Jarrod`, `Jarrod Dixon`| `Display Name` description: the user's display name
	Views INTEGER null, -- description: the number of views
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	ViewCount INTEGER null, -- `View Count` description: the view count of the post value description: Higher view count means the post has higher popularity
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
698,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Title TEXT null, -- description: the title of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
699,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	CreationDate DATETIME null, -- examples: `2010-07-19 19:06:02.0`| `Creation Date` description: the creation date of the user account
	DisplayName TEXT null, -- examples: `IrishStat`| `Display Name` description: the user's display name
);"
700,"CREATE TABLE votes
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	BountyAmount INTEGER null, -- `Bounty Amount` description: the amount of bounty
);"
701,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Reputation INTEGER null, -- description: the user's reputation value description: The user with higher reputation has more influence.
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Score INTEGER null, -- description: the score of the post
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE tags
(
	Id INTEGER not null primary key,
	Count INTEGER null, -- description: the count of posts that contain this tag value description: more counts --> this tag is more popular
	ExcerptPostId INTEGER null, --
	foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade,
);"
702,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Score INTEGER null, -- description: the score of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
703,"CREATE TABLE tags
(
	Id INTEGER not null primary key,
	Count INTEGER null, -- description: the count of posts that contain this tag value description: more counts --> this tag is more popular
);"
704,"CREATE TABLE tags
(
	Id INTEGER not null primary key,
	TagName TEXT null, -- examples: `sample`| `Tag Name` description: the name of the tag
	ExcerptPostId INTEGER null, -- `Excerpt Post Id` description: the excerpt post id of the tag
	WikiPostId INTEGER null, -- `Wiki Post Id` description: the wiki post id of the tag
	foreign key (ExcerptPostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Tags TEXT null, -- description: the tag of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);"
705,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	Text TEXT null, -- description: the detailed content of the comment
	UserId INTEGER null, -- `User Id` description: the id of the user who post the comment
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Reputation INTEGER null, -- description: the user's reputation value description: The user with higher reputation has more influence.
	UpVotes INTEGER null, -- description: the number of upvotes
);"
706,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Title TEXT null, -- description: the title of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	Text TEXT null, -- description: the detailed content of the comment
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
707,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	ViewCount INTEGER null, -- `View Count` description: the view count of the post value description: Higher view count means the post has higher popularity
	OwnerUserId INTEGER null, --
	LastEditorUserId INTEGER null, --
	ParentId INTEGER null, --
	foreign key (LastEditorUserId) references users (Id) on update cascade on delete cascade,
	foreign key (OwnerUserId) references users (Id) on update cascade on delete cascade,
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	Score INTEGER null, -- description: rating score value description: The score is from 0 to 100. The score more than 60 refers that the comment is a positive comment. The score less than 60 refers that the comment is a negative comment.
	Text TEXT null, --
	UserId INTEGER null, --
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Views INTEGER null, -- description: the number of views
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	UserId INTEGER null, --
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
708,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	Text TEXT null, -- description: the detailed content of the comment
	CreationDate DATETIME null, -- examples: `2010-07-19 19:16:14.0`| `Creation Date` description: the creation date of the comment
	UserId INTEGER null, -- `User Id` description: the id of the user who post the comment
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	CreationDate DATETIME null, -- examples: `2010-07-19 19:05:40.0`| `Creation Date` description: the creation date of the user account
	Age INTEGER null, -- description: user's age value description:  teenager: 13-18  adult: 19-65  elder: > 65
);"
709,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	Score INTEGER null, -- description: rating score value description: The score is from 0 to 100. The score more than 60 refers that the comment is a positive comment. The score less than 60 refers that the comment is a negative comment.
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	ViewCount INTEGER null, -- `View Count` description: the view count of the post value description: Higher view count means the post has higher popularity
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	Comment TEXT null, --
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
710,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	CommentCount INTEGER null, -- `Comment Count` description: the total number of comments of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, --
	Score INTEGER null, -- description: rating score value description: The score is from 0 to 100. The score more than 60 refers that the comment is a positive comment. The score less than 60 refers that the comment is a negative comment.
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
711,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	Score INTEGER null, -- description: rating score value description: The score is from 0 to 100. The score more than 60 refers that the comment is a positive comment. The score less than 60 refers that the comment is a negative comment.
	UserId INTEGER null, --
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	Age INTEGER null, -- description: user's age value description:  teenager: 13-18  adult: 19-65  elder: > 65
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	UserId INTEGER null, -- `User Id` description: the user who post the post
	Comment TEXT null, -- description: comments of the post
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
712,"CREATE TABLE posts
(
	Id INTEGER not null UNIQUE primary key,
	Title TEXT null, -- description: the title of the post
	ParentId INTEGER null, --
	foreign key (ParentId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE comments
(
	Id INTEGER not null primary key,
	PostId INTEGER null, -- `Post Id` description: the unique id of the post
	Text TEXT null, -- description: the detailed content of the comment
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	PostId INTEGER null, --
	Comment TEXT null, -- description: comments of the post
	foreign key (PostId) references posts (Id) on update cascade on delete cascade,
);"
713,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	Text TEXT null, -- description: the detailed content of the comment
	UserId INTEGER null, -- `User Id` description: the id of the user who post the comment
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	UpVotes INTEGER null, -- description: the number of upvotes
);"
714,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	Text TEXT null, -- description: the detailed content of the comment
	UserId INTEGER null, -- `User Id` description: the id of the user who post the comment
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `username`, `Harvey`, `user`, `Harvey Motulsky`| `Display Name` description: the user's display name
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	UserId INTEGER null, -- `User Id` description: the user who post the post
	Comment TEXT null, -- description: comments of the post
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
715,"CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	DisplayName TEXT null, -- examples: `name`, `user`| `Display Name` description: the user's display name
	DownVotes INTEGER null, -- description: the number of downvotes
);

CREATE TABLE comments
(
	Id INTEGER not null primary key,
	Score INTEGER null, -- description: rating score value description: The score is from 0 to 100. The score more than 60 refers that the comment is a positive comment. The score less than 60 refers that the comment is a negative comment.
	UserId INTEGER null, -- `User Id` description: the id of the user who post the comment
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	UserId INTEGER null, --
	Comment TEXT null, --
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);"
716,"CREATE TABLE comments
(
	Id INTEGER not null primary key,
	Score INTEGER null, -- description: rating score value description: The score is from 0 to 100. The score more than 60 refers that the comment is a positive comment. The score less than 60 refers that the comment is a negative comment.
	UserId INTEGER null, -- `User Id` description: the id of the user who post the comment
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE users
(
	Id INTEGER not null UNIQUE primary key,
	UpVotes INTEGER null, -- description: the number of upvotes
);

CREATE TABLE postHistory
(
	Id INTEGER not null UNIQUE primary key,
	UserId INTEGER null, -- `User Id` description: the user who post the post
	Comment TEXT null, --
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE votes
(
	Id INTEGER not null primary key,
	UserId INTEGER null, -- `User Id` description: the id of the voter
	foreign key (UserId) references users (Id) on update cascade on delete cascade,
);

CREATE TABLE tags
(
	Id INTEGER not null primary key,
	Count INTEGER null, --
);"
